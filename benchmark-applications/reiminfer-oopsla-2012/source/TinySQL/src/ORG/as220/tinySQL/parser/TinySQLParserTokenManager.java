/* Generated By:JavaCC: Do not edit this line. TinySQLParserTokenManager.java */
package ORG.as220.tinySQL.parser;


public class TinySQLParserTokenManager implements TinySQLParserConstants
{
  public java.io.PrintStream debugStream = System.out;

  public void setDebugStream(java.io.PrintStream ds)
  {
    debugStream = ds;
  }

  private final int jjStopAtPos(int pos, int kind)
  {
    jjmatchedKind = kind;
    jjmatchedPos = pos;
    return pos + 1;
  }

  private final int jjMoveStringLiteralDfa0_0()
  {
    switch (curChar)
    {
      case 40:
        jjmatchedKind = 18;
        return jjMoveNfa_0(0, 0);
      case 41:
        jjmatchedKind = 19;
        return jjMoveNfa_0(0, 0);
      case 42:
        jjmatchedKind = 79;
        return jjMoveNfa_0(0, 0);
      case 43:
        jjmatchedKind = 77;
        return jjMoveNfa_0(0, 0);
      case 44:
        jjmatchedKind = 12;
        return jjMoveNfa_0(0, 0);
      case 45:
        jjmatchedKind = 78;
        return jjMoveNfa_0(0, 0);
      case 47:
        jjmatchedKind = 80;
        return jjMoveNfa_0(0, 0);
      case 59:
        jjmatchedKind = 17;
        return jjMoveNfa_0(0, 0);
      case 60:
        jjmatchedKind = 86;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x180000L);
      case 61:
        jjmatchedKind = 81;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 62:
        jjmatchedKind = 87;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 63:
        jjmatchedKind = 20;
        return jjMoveNfa_0(0, 0);
      case 65:
        return jjMoveStringLiteralDfa1_0(0x7e00000L, 0x0L);
      case 66:
        return jjMoveStringLiteralDfa1_0(0x2800000008000000L, 0x1000840L);
      case 67:
        return jjMoveStringLiteralDfa1_0(0x70000000L, 0x1000L);
      case 68:
        return jjMoveStringLiteralDfa1_0(0xc400000780000000L, 0x0L);
      case 69:
        return jjMoveStringLiteralDfa1_0(0x1800000000L, 0x0L);
      case 70:
        return jjMoveStringLiteralDfa1_0(0x1000002000000000L, 0x0L);
      case 71:
        return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 73:
        return jjMoveStringLiteralDfa1_0(0x38000000000L, 0x0L);
      case 76:
        return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x4000120L);
      case 78:
        return jjMoveStringLiteralDfa1_0(0x180000000000L, 0x0L);
      case 79:
        return jjMoveStringLiteralDfa1_0(0x600000000000L, 0x0L);
      case 82:
        return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x1L);
      case 83:
        return jjMoveStringLiteralDfa1_0(0x3000000000000L, 0x0L);
      case 84:
        return jjMoveStringLiteralDfa1_0(0xc000000000000L, 0x600L);
      case 85:
        return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 86:
        return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x90L);
      case 87:
        return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 97:
        return jjMoveStringLiteralDfa1_0(0x7e00000L, 0x0L);
      case 98:
        return jjMoveStringLiteralDfa1_0(0x2800000008000000L, 0x1000840L);
      case 99:
        return jjMoveStringLiteralDfa1_0(0x70000000L, 0x1000L);
      case 100:
        return jjMoveStringLiteralDfa1_0(0xc400000780000000L, 0x0L);
      case 101:
        return jjMoveStringLiteralDfa1_0(0x1800000000L, 0x0L);
      case 102:
        return jjMoveStringLiteralDfa1_0(0x1000002000000000L, 0x0L);
      case 103:
        return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 105:
        return jjMoveStringLiteralDfa1_0(0x38000000000L, 0x0L);
      case 108:
        return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x4000120L);
      case 110:
        return jjMoveStringLiteralDfa1_0(0x180000000000L, 0x0L);
      case 111:
        return jjMoveStringLiteralDfa1_0(0x600000000000L, 0x0L);
      case 114:
        return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x1L);
      case 115:
        return jjMoveStringLiteralDfa1_0(0x3000000000000L, 0x0L);
      case 116:
        return jjMoveStringLiteralDfa1_0(0xc000000000000L, 0x600L);
      case 117:
        return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 118:
        return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x90L);
      case 119:
        return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      default :
        return jjMoveNfa_0(0, 0);
    }
  }

  private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
  {
    try
    {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e)
    {
      return jjMoveNfa_0(0, 0);
    }
    switch (curChar)
    {
      case 61:
        if ((active1 & 0x40000L) != 0L)
        {
          jjmatchedKind = 82;
          jjmatchedPos = 1;
        }
        else if ((active1 & 0x100000L) != 0L)
        {
          jjmatchedKind = 84;
          jjmatchedPos = 1;
        }
        else if ((active1 & 0x200000L) != 0L)
        {
          jjmatchedKind = 85;
          jjmatchedPos = 1;
        }
        break;
      case 62:
        if ((active1 & 0x80000L) != 0L)
        {
          jjmatchedKind = 83;
          jjmatchedPos = 1;
        }
        break;
      case 65:
        return jjMoveStringLiteralDfa2_0(active0, 0x424000000000000L, active1, 0x90L);
      case 68:
        return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 69:
        return jjMoveStringLiteralDfa2_0(active0, 0x4003800180000000L, active1, 0x1000001L);
      case 70:
        if ((active0 & 0x8000000000L) != 0L)
        {
          jjmatchedKind = 39;
          jjmatchedPos = 1;
        }
        break;
      case 72:
        return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);
      case 73:
        return jjMoveStringLiteralDfa2_0(active0, 0x2000040200000000L, active1, 0x4000640L);
      case 76:
        return jjMoveStringLiteralDfa2_0(active0, 0x1000000001800000L, active1, 0x1800L);
      case 78:
        return jjMoveStringLiteralDfa2_0(active0, 0x30000400000L, active1, 0L);
      case 79:
        if ((active0 & 0x8000000000000L) != 0L)
        {
          jjmatchedKind = 51;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(active0, 0x8800080030000000L, active1, 0x120L);
      case 80:
        return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 82:
        if ((active0 & 0x200000000000L) != 0L)
        {
          jjmatchedKind = 45;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(active0, 0x406440000000L, active1, 0L);
      case 83:
        if ((active0 & 0x2000000L) != 0L)
        {
          jjmatchedKind = 25;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 85:
        return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 88:
        return jjMoveStringLiteralDfa2_0(active0, 0x1800000000L, active1, 0L);
      case 89:
        if ((active0 & 0x8000000L) != 0L)
        {
          jjmatchedKind = 27;
          jjmatchedPos = 1;
        }
        break;
      case 97:
        return jjMoveStringLiteralDfa2_0(active0, 0x424000000000000L, active1, 0x90L);
      case 100:
        return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 101:
        return jjMoveStringLiteralDfa2_0(active0, 0x4003800180000000L, active1, 0x1000001L);
      case 102:
        if ((active0 & 0x8000000000L) != 0L)
        {
          jjmatchedKind = 39;
          jjmatchedPos = 1;
        }
        break;
      case 104:
        return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);
      case 105:
        return jjMoveStringLiteralDfa2_0(active0, 0x2000040200000000L, active1, 0x4000640L);
      case 108:
        return jjMoveStringLiteralDfa2_0(active0, 0x1000000001800000L, active1, 0x1800L);
      case 110:
        return jjMoveStringLiteralDfa2_0(active0, 0x30000400000L, active1, 0L);
      case 111:
        if ((active0 & 0x8000000000000L) != 0L)
        {
          jjmatchedKind = 51;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(active0, 0x8800080030000000L, active1, 0x120L);
      case 112:
        return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 114:
        if ((active0 & 0x200000000000L) != 0L)
        {
          jjmatchedKind = 45;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(active0, 0x406440000000L, active1, 0L);
      case 115:
        if ((active0 & 0x2000000L) != 0L)
        {
          jjmatchedKind = 25;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 117:
        return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 120:
        return jjMoveStringLiteralDfa2_0(active0, 0x1800000000L, active1, 0L);
      case 121:
        if ((active0 & 0x8000000L) != 0L)
        {
          jjmatchedKind = 27;
          jjmatchedPos = 1;
        }
        break;
      default :
        break;
    }
    return jjMoveNfa_0(0, 1);
  }

  private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
  {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 1);
    try
    {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e)
    {
      return jjMoveNfa_0(0, 1);
    }
    switch (curChar)
    {
      case 65:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 66:
        return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 67:
        if ((active0 & 0x4000000L) != 0L)
        {
          jjmatchedKind = 26;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      case 68:
        if ((active0 & 0x200000L) != 0L)
        {
          jjmatchedKind = 21;
          jjmatchedPos = 2;
        }
        else if ((active0 & 0x400000L) != 0L)
        {
          jjmatchedKind = 22;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(active0, 0x10400000000000L, active1, 0L);
      case 69:
        return jjMoveStringLiteralDfa3_0(active0, 0x40000040000000L, active1, 0L);
      case 73:
        return jjMoveStringLiteralDfa3_0(active0, 0x1800000000L, active1, 0L);
      case 75:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000L);
      case 76:
        if ((active0 & 0x800000L) != 0L)
        {
          jjmatchedKind = 23;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(active0, 0x21100090000000L, active1, 0L);
      case 77:
        return jjMoveStringLiteralDfa3_0(active0, 0x40020000000L, active1, 0x600L);
      case 78:
        return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0x160L);
      case 79:
        return jjMoveStringLiteralDfa3_0(active0, 0x1800006400000000L, active1, 0x1800L);
      case 82:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x90L);
      case 83:
        return jjMoveStringLiteralDfa3_0(active0, 0x10300000000L, active1, 0L);
      case 84:
        if ((active0 & 0x80000000000L) != 0L)
        {
          jjmatchedKind = 43;
          jjmatchedPos = 2;
        }
        else if ((active0 & 0x2000000000000L) != 0L)
        {
          jjmatchedKind = 49;
          jjmatchedPos = 2;
        }
        else if ((active0 & 0x2000000000000000L) != 0L)
        {
          jjmatchedKind = 61;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(active0, 0x400020001000000L, active1, 0x1000000L);
      case 85:
        return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 97:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 98:
        return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 99:
        if ((active0 & 0x4000000L) != 0L)
        {
          jjmatchedKind = 26;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      case 100:
        if ((active0 & 0x200000L) != 0L)
        {
          jjmatchedKind = 21;
          jjmatchedPos = 2;
        }
        else if ((active0 & 0x400000L) != 0L)
        {
          jjmatchedKind = 22;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(active0, 0x10400000000000L, active1, 0L);
      case 101:
        return jjMoveStringLiteralDfa3_0(active0, 0x40000040000000L, active1, 0L);
      case 105:
        return jjMoveStringLiteralDfa3_0(active0, 0x1800000000L, active1, 0L);
      case 107:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000L);
      case 108:
        if ((active0 & 0x800000L) != 0L)
        {
          jjmatchedKind = 23;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(active0, 0x21100090000000L, active1, 0L);
      case 109:
        return jjMoveStringLiteralDfa3_0(active0, 0x40020000000L, active1, 0x600L);
      case 110:
        return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0x160L);
      case 111:
        return jjMoveStringLiteralDfa3_0(active0, 0x1800006400000000L, active1, 0x1800L);
      case 114:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x90L);
      case 115:
        return jjMoveStringLiteralDfa3_0(active0, 0x10300000000L, active1, 0L);
      case 116:
        if ((active0 & 0x80000000000L) != 0L)
        {
          jjmatchedKind = 43;
          jjmatchedPos = 2;
        }
        else if ((active0 & 0x2000000000000L) != 0L)
        {
          jjmatchedKind = 49;
          jjmatchedPos = 2;
        }
        else if ((active0 & 0x2000000000000000L) != 0L)
        {
          jjmatchedKind = 61;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(active0, 0x400020001000000L, active1, 0x1000000L);
      case 117:
        return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      default :
        break;
    }
    return jjMoveNfa_0(0, 2);
  }

  private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
  {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 2);
    try
    {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e)
    {
      return jjMoveNfa_0(0, 2);
    }
    switch (curChar)
    {
      case 65:
        return jjMoveStringLiteralDfa4_0(active0, 0x1010800040000000L, active1, 0x40L);
      case 66:
        if ((active1 & 0x800L) != 0L)
        {
          jjmatchedKind = 75;
          jjmatchedPos = 3;
        }
        else if ((active1 & 0x1000L) != 0L)
        {
          jjmatchedKind = 76;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x80L);
      case 67:
        if ((active0 & 0x100000000L) != 0L)
        {
          jjmatchedKind = 32;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 69:
        if ((active0 & 0x400000000000000L) != 0L)
        {
          jjmatchedKind = 58;
          jjmatchedPos = 3;
        }
        else if ((active1 & 0x200L) != 0L)
        {
          jjmatchedKind = 73;
          jjmatchedPos = 3;
        }
        else if ((active1 & 0x4000000L) != 0L)
        {
          jjmatchedKind = 90;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x1410081000000L, active1, 0x400L);
      case 71:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x120L);
      case 73:
        return jjMoveStringLiteralDfa4_0(active0, 0x4000040000000000L, active1, 0L);
      case 76:
        if ((active0 & 0x100000000000L) != 0L)
        {
          jjmatchedKind = 44;
          jjmatchedPos = 3;
        }
        else if ((active1 & 0x1L) != 0L)
        {
          jjmatchedKind = 64;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x804000000000000L, active1, 0L);
      case 77:
        if ((active0 & 0x2000000000L) != 0L)
        {
          jjmatchedKind = 37;
          jjmatchedPos = 3;
        }
        break;
      case 79:
        if ((active0 & 0x20000000000L) != 0L)
        {
          jjmatchedKind = 41;
          jjmatchedPos = 3;
        }
        break;
      case 80:
        if ((active0 & 0x400000000L) != 0L)
        {
          jjmatchedKind = 34;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 82:
        return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L);
      case 83:
        return jjMoveStringLiteralDfa4_0(active0, 0x1800000000L, active1, 0L);
      case 84:
        return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L);
      case 85:
        return jjMoveStringLiteralDfa4_0(active0, 0x20004010000000L, active1, 0L);
      case 87:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000L);
      case 97:
        return jjMoveStringLiteralDfa4_0(active0, 0x1010800040000000L, active1, 0x40L);
      case 98:
        if ((active1 & 0x800L) != 0L)
        {
          jjmatchedKind = 75;
          jjmatchedPos = 3;
        }
        else if ((active1 & 0x1000L) != 0L)
        {
          jjmatchedKind = 76;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x80L);
      case 99:
        if ((active0 & 0x100000000L) != 0L)
        {
          jjmatchedKind = 32;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 101:
        if ((active0 & 0x400000000000000L) != 0L)
        {
          jjmatchedKind = 58;
          jjmatchedPos = 3;
        }
        else if ((active1 & 0x200L) != 0L)
        {
          jjmatchedKind = 73;
          jjmatchedPos = 3;
        }
        else if ((active1 & 0x4000000L) != 0L)
        {
          jjmatchedKind = 90;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x1410081000000L, active1, 0x400L);
      case 103:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x120L);
      case 105:
        return jjMoveStringLiteralDfa4_0(active0, 0x4000040000000000L, active1, 0L);
      case 108:
        if ((active0 & 0x100000000000L) != 0L)
        {
          jjmatchedKind = 44;
          jjmatchedPos = 3;
        }
        else if ((active1 & 0x1L) != 0L)
        {
          jjmatchedKind = 64;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x804000000000000L, active1, 0L);
      case 109:
        if ((active0 & 0x2000000000L) != 0L)
        {
          jjmatchedKind = 37;
          jjmatchedPos = 3;
        }
        break;
      case 111:
        if ((active0 & 0x20000000000L) != 0L)
        {
          jjmatchedKind = 41;
          jjmatchedPos = 3;
        }
        break;
      case 112:
        if ((active0 & 0x400000000L) != 0L)
        {
          jjmatchedKind = 34;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 114:
        return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L);
      case 115:
        return jjMoveStringLiteralDfa4_0(active0, 0x1800000000L, active1, 0L);
      case 116:
        return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L);
      case 117:
        return jjMoveStringLiteralDfa4_0(active0, 0x20004010000000L, active1, 0L);
      case 119:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000L);
      default :
        break;
    }
    return jjMoveNfa_0(0, 3);
  }

  private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
  {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 3);
    try
    {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e)
    {
      return jjMoveNfa_0(0, 3);
    }
    switch (curChar)
    {
      case 65:
        return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0L);
      case 67:
        return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
      case 69:
        if ((active0 & 0x4000000000000L) != 0L)
        {
          jjmatchedKind = 50;
          jjmatchedPos = 4;
        }
        else if ((active0 & 0x40000000000000L) != 0L)
        {
          jjmatchedKind = 54;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(active0, 0x820000000000000L, active1, 0x1000000L);
      case 72:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 73:
        return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0x80L);
      case 76:
        return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 77:
        return jjMoveStringLiteralDfa5_0(active0, 0x4000800010000000L, active1, 0L);
      case 80:
        if ((active0 & 0x4000000000L) != 0L)
        {
          jjmatchedKind = 38;
          jjmatchedPos = 4;
        }
        break;
      case 82:
        if ((active0 & 0x1000000L) != 0L)
        {
          jjmatchedKind = 24;
          jjmatchedPos = 4;
        }
        else if ((active0 & 0x400000000000L) != 0L)
        {
          jjmatchedKind = 46;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0x40L);
      case 83:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 84:
        if ((active0 & 0x800000000L) != 0L)
        {
          jjmatchedKind = 35;
          jjmatchedPos = 4;
        }
        else if ((active0 & 0x40000000000L) != 0L)
        {
          jjmatchedKind = 42;
          jjmatchedPos = 4;
        }
        else if ((active0 & 0x1000000000000000L) != 0L)
        {
          jjmatchedKind = 60;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(active0, 0x100010c0000000L, active1, 0L);
      case 86:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x120L);
      case 97:
        return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0L);
      case 99:
        return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
      case 101:
        if ((active0 & 0x4000000000000L) != 0L)
        {
          jjmatchedKind = 50;
          jjmatchedPos = 4;
        }
        else if ((active0 & 0x40000000000000L) != 0L)
        {
          jjmatchedKind = 54;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(active0, 0x820000000000000L, active1, 0x1000000L);
      case 104:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 105:
        return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0x80L);
      case 108:
        return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 109:
        return jjMoveStringLiteralDfa5_0(active0, 0x4000800010000000L, active1, 0L);
      case 112:
        if ((active0 & 0x4000000000L) != 0L)
        {
          jjmatchedKind = 38;
          jjmatchedPos = 4;
        }
        break;
      case 114:
        if ((active0 & 0x1000000L) != 0L)
        {
          jjmatchedKind = 24;
          jjmatchedPos = 4;
        }
        else if ((active0 & 0x400000000000L) != 0L)
        {
          jjmatchedKind = 46;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0x40L);
      case 115:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 116:
        if ((active0 & 0x800000000L) != 0L)
        {
          jjmatchedKind = 35;
          jjmatchedPos = 4;
        }
        else if ((active0 & 0x40000000000L) != 0L)
        {
          jjmatchedKind = 42;
          jjmatchedPos = 4;
        }
        else if ((active0 & 0x1000000000000000L) != 0L)
        {
          jjmatchedKind = 60;
          jjmatchedPos = 4;
        }
        return jjMoveStringLiteralDfa5_0(active0, 0x100010c0000000L, active1, 0L);
      case 118:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x120L);
      default :
        break;
    }
    return jjMoveNfa_0(0, 4);
  }

  private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
  {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 4);
    try
    {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e)
    {
      return jjMoveNfa_0(0, 4);
    }
    switch (curChar)
    {
      case 65:
        return jjMoveStringLiteralDfa6_0(active0, 0x4800000000000000L, active1, 0x130L);
      case 67:
        return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L);
      case 69:
        if ((active0 & 0x40000000L) != 0L)
        {
          jjmatchedKind = 30;
          jjmatchedPos = 5;
        }
        else if ((active0 & 0x80000000L) != 0L)
        {
          jjmatchedKind = 31;
          jjmatchedPos = 5;
        }
        else if ((active0 & 0x800000000000L) != 0L)
        {
          jjmatchedKind = 47;
          jjmatchedPos = 5;
        }
        else if ((active0 & 0x10000000000000L) != 0L)
        {
          jjmatchedKind = 52;
          jjmatchedPos = 5;
        }
        else if ((active0 & 0x8000000000000000L) != 0L)
        {
          jjmatchedKind = 63;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L);
      case 78:
        if ((active0 & 0x10000000L) != 0L)
        {
          jjmatchedKind = 28;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0x80L);
      case 83:
        if ((active0 & 0x1000000000L) != 0L)
        {
          jjmatchedKind = 36;
          jjmatchedPos = 5;
        }
        else if ((active0 & 0x20000000000000L) != 0L)
        {
          jjmatchedKind = 53;
          jjmatchedPos = 5;
        }
        break;
      case 84:
        if ((active0 & 0x10000000000L) != 0L)
        {
          jjmatchedKind = 40;
          jjmatchedPos = 5;
        }
        else if ((active0 & 0x1000000000000L) != 0L)
        {
          jjmatchedKind = 48;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 89:
        if ((active1 & 0x40L) != 0L)
        {
          jjmatchedKind = 70;
          jjmatchedPos = 5;
        }
        break;
      case 97:
        return jjMoveStringLiteralDfa6_0(active0, 0x4800000000000000L, active1, 0x130L);
      case 99:
        return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L);
      case 101:
        if ((active0 & 0x40000000L) != 0L)
        {
          jjmatchedKind = 30;
          jjmatchedPos = 5;
        }
        else if ((active0 & 0x80000000L) != 0L)
        {
          jjmatchedKind = 31;
          jjmatchedPos = 5;
        }
        else if ((active0 & 0x800000000000L) != 0L)
        {
          jjmatchedKind = 47;
          jjmatchedPos = 5;
        }
        else if ((active0 & 0x10000000000000L) != 0L)
        {
          jjmatchedKind = 52;
          jjmatchedPos = 5;
        }
        else if ((active0 & 0x8000000000000000L) != 0L)
        {
          jjmatchedKind = 63;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L);
      case 110:
        if ((active0 & 0x10000000L) != 0L)
        {
          jjmatchedKind = 28;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0x80L);
      case 115:
        if ((active0 & 0x1000000000L) != 0L)
        {
          jjmatchedKind = 36;
          jjmatchedPos = 5;
        }
        else if ((active0 & 0x20000000000000L) != 0L)
        {
          jjmatchedKind = 53;
          jjmatchedPos = 5;
        }
        break;
      case 116:
        if ((active0 & 0x10000000000L) != 0L)
        {
          jjmatchedKind = 40;
          jjmatchedPos = 5;
        }
        else if ((active0 & 0x1000000000000L) != 0L)
        {
          jjmatchedKind = 48;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 121:
        if ((active1 & 0x40L) != 0L)
        {
          jjmatchedKind = 70;
          jjmatchedPos = 5;
        }
        break;
      default :
        break;
    }
    return jjMoveNfa_0(0, 5);
  }

  private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
  {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 5);
    try
    {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e)
    {
      return jjMoveNfa_0(0, 5);
    }
    switch (curChar)
    {
      case 65:
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x480L);
      case 67:
        return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0L);
      case 76:
        if ((active0 & 0x4000000000000000L) != 0L)
        {
          jjmatchedKind = 62;
          jjmatchedPos = 6;
        }
        break;
      case 78:
        if ((active0 & 0x800000000000000L) != 0L)
        {
          jjmatchedKind = 59;
          jjmatchedPos = 6;
        }
        else if ((active1 & 0x1000000L) != 0L)
        {
          jjmatchedKind = 88;
          jjmatchedPos = 6;
        }
        break;
      case 82:
        if ((active1 & 0x10L) != 0L)
        {
          jjmatchedKind = 68;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x120L);
      case 84:
        if ((active0 & 0x20000000L) != 0L)
        {
          jjmatchedKind = 29;
          jjmatchedPos = 6;
        }
        break;
      case 97:
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x480L);
      case 99:
        return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0L);
      case 108:
        if ((active0 & 0x4000000000000000L) != 0L)
        {
          jjmatchedKind = 62;
          jjmatchedPos = 6;
        }
        break;
      case 110:
        if ((active0 & 0x800000000000000L) != 0L)
        {
          jjmatchedKind = 59;
          jjmatchedPos = 6;
        }
        else if ((active1 & 0x1000000L) != 0L)
        {
          jjmatchedKind = 88;
          jjmatchedPos = 6;
        }
        break;
      case 114:
        if ((active1 & 0x10L) != 0L)
        {
          jjmatchedKind = 68;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x120L);
      case 116:
        if ((active0 & 0x20000000L) != 0L)
        {
          jjmatchedKind = 29;
          jjmatchedPos = 6;
        }
        break;
      default :
        break;
    }
    return jjMoveNfa_0(0, 6);
  }

  private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
  {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 6);
    try
    {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e)
    {
      return jjMoveNfa_0(0, 6);
    }
    switch (curChar)
    {
      case 66:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100L);
      case 67:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L);
      case 77:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L);
      case 82:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L);
      case 84:
        if ((active0 & 0x200000000L) != 0L)
        {
          jjmatchedKind = 33;
          jjmatchedPos = 7;
        }
        break;
      case 98:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100L);
      case 99:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L);
      case 109:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L);
      case 114:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L);
      case 116:
        if ((active0 & 0x200000000L) != 0L)
        {
          jjmatchedKind = 33;
          jjmatchedPos = 7;
        }
        break;
      default :
        break;
    }
    return jjMoveNfa_0(0, 7);
  }

  private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
  {
    if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 7);
    try
    {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e)
    {
      return jjMoveNfa_0(0, 7);
    }
    switch (curChar)
    {
      case 72:
        return jjMoveStringLiteralDfa9_0(active1, 0x20L);
      case 73:
        return jjMoveStringLiteralDfa9_0(active1, 0x100L);
      case 80:
        if ((active1 & 0x400L) != 0L)
        {
          jjmatchedKind = 74;
          jjmatchedPos = 8;
        }
        break;
      case 89:
        if ((active1 & 0x80L) != 0L)
        {
          jjmatchedKind = 71;
          jjmatchedPos = 8;
        }
        break;
      case 104:
        return jjMoveStringLiteralDfa9_0(active1, 0x20L);
      case 105:
        return jjMoveStringLiteralDfa9_0(active1, 0x100L);
      case 112:
        if ((active1 & 0x400L) != 0L)
        {
          jjmatchedKind = 74;
          jjmatchedPos = 8;
        }
        break;
      case 121:
        if ((active1 & 0x80L) != 0L)
        {
          jjmatchedKind = 71;
          jjmatchedPos = 8;
        }
        break;
      default :
        break;
    }
    return jjMoveNfa_0(0, 8);
  }

  private final int jjMoveStringLiteralDfa9_0(long old1, long active1)
  {
    if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 8);
    try
    {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e)
    {
      return jjMoveNfa_0(0, 8);
    }
    switch (curChar)
    {
      case 65:
        return jjMoveStringLiteralDfa10_0(active1, 0x20L);
      case 78:
        return jjMoveStringLiteralDfa10_0(active1, 0x100L);
      case 97:
        return jjMoveStringLiteralDfa10_0(active1, 0x20L);
      case 110:
        return jjMoveStringLiteralDfa10_0(active1, 0x100L);
      default :
        break;
    }
    return jjMoveNfa_0(0, 9);
  }

  private final int jjMoveStringLiteralDfa10_0(long old1, long active1)
  {
    if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 9);
    try
    {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e)
    {
      return jjMoveNfa_0(0, 9);
    }
    switch (curChar)
    {
      case 65:
        return jjMoveStringLiteralDfa11_0(active1, 0x100L);
      case 82:
        if ((active1 & 0x20L) != 0L)
        {
          jjmatchedKind = 69;
          jjmatchedPos = 10;
        }
        break;
      case 97:
        return jjMoveStringLiteralDfa11_0(active1, 0x100L);
      case 114:
        if ((active1 & 0x20L) != 0L)
        {
          jjmatchedKind = 69;
          jjmatchedPos = 10;
        }
        break;
      default :
        break;
    }
    return jjMoveNfa_0(0, 10);
  }

  private final int jjMoveStringLiteralDfa11_0(long old1, long active1)
  {
    if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 10);
    try
    {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e)
    {
      return jjMoveNfa_0(0, 10);
    }
    switch (curChar)
    {
      case 82:
        return jjMoveStringLiteralDfa12_0(active1, 0x100L);
      case 114:
        return jjMoveStringLiteralDfa12_0(active1, 0x100L);
      default :
        break;
    }
    return jjMoveNfa_0(0, 11);
  }

  private final int jjMoveStringLiteralDfa12_0(long old1, long active1)
  {
    if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 11);
    try
    {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e)
    {
      return jjMoveNfa_0(0, 11);
    }
    switch (curChar)
    {
      case 89:
        if ((active1 & 0x100L) != 0L)
        {
          jjmatchedKind = 72;
          jjmatchedPos = 12;
        }
        break;
      case 121:
        if ((active1 & 0x100L) != 0L)
        {
          jjmatchedKind = 72;
          jjmatchedPos = 12;
        }
        break;
      default :
        break;
    }
    return jjMoveNfa_0(0, 12);
  }

  private final void jjCheckNAdd(int state)
  {
    if (jjrounds[state] != jjround)
    {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
    }
  }

  private final void jjAddStates(int start, int end)
  {
    do
    {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
    }
    while (start++ != end);
  }

  private final void jjCheckNAddTwoStates(int state1, int state2)
  {
    jjCheckNAdd(state1);
    jjCheckNAdd(state2);
  }

  private final void jjCheckNAddStates(int start, int end)
  {
    do
    {
      jjCheckNAdd(jjnextStates[start]);
    }
    while (start++ != end);
  }

  private final void jjCheckNAddStates(int start)
  {
    jjCheckNAdd(jjnextStates[start]);
    jjCheckNAdd(jjnextStates[start + 1]);
  }

  static final long[] jjbitVec0 = {
    0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
  };

  private final int jjMoveNfa_0(int startState, int curPos)
  {
    int strKind = jjmatchedKind;
    int strPos = jjmatchedPos;
    int seenUpto;
    input_stream.backup(seenUpto = curPos + 1);
    try
    {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e)
    {
      throw new Error("Internal Error");
    }
    curPos = 0;
    int[] nextStates;
    int startsAt = 0;
    jjnewStateCnt = 173;
    int i = 1;
    jjstateSet[0] = startState;
    int j, kind = 0x7fffffff;
    for (; ;)
    {
      if (++jjround == 0x7fffffff)
        ReInitRounds();
      if (curChar < 64)
      {
        long l = 1L << curChar;
        MatchLoop: do
        {
          switch (jjstateSet[--i])
          {
            case 0:
              if ((0x1ffffffffL & l) != 0L)
              {
                if (kind > 1)
                  kind = 1;
              }
              else if ((0x3fe000000000000L & l) != 0L)
              {
                if (kind > 8)
                  kind = 8;
                jjCheckNAddStates(0, 11);
              }
              else if ((0x280000000000L & l) != 0L)
                jjAddStates(12, 16);
              else if (curChar == 46)
                jjCheckNAddStates(17, 24);
              else if (curChar == 34)
                jjAddStates(25, 26);
              else if (curChar == 36)
              {
                if (kind > 91)
                  kind = 91;
                jjCheckNAddStates(27, 30);
              }
              else if (curChar == 48)
              {
                if (kind > 8)
                  kind = 8;
                jjCheckNAddStates(31, 36);
              }
              else if (curChar == 39)
                jjCheckNAddStates(37, 40);
              if (curChar == 45)
                jjstateSet[jjnewStateCnt++] = 1;
              break;
            case 1:
              if (curChar == 45)
                jjCheckNAddStates(41, 43);
              break;
            case 2:
              if ((0xffffffffffffdbffL & l) != 0L)
                jjCheckNAddStates(41, 43);
              break;
            case 3:
              if ((0x2400L & l) != 0L && kind > 2)
                kind = 2;
              break;
            case 4:
              if (curChar == 10 && kind > 2)
                kind = 2;
              break;
            case 5:
              if (curChar == 13)
                jjstateSet[jjnewStateCnt++] = 4;
              break;
            case 6:
              if (curChar == 45)
                jjstateSet[jjnewStateCnt++] = 1;
              break;
            case 14:
            case 15:
            case 18:
              if (curChar == 39)
                jjCheckNAddStates(37, 40);
              break;
            case 16:
              if (curChar == 39)
                jjstateSet[jjnewStateCnt++] = 15;
              break;
            case 19:
              if ((0xffffff7fffffffffL & l) != 0L)
                jjCheckNAddStates(37, 40);
              break;
            case 20:
              if (curChar == 39 && kind > 93)
                kind = 93;
              break;
            case 92:
              if (curChar != 48)
                break;
              if (kind > 8)
                kind = 8;
              jjCheckNAddStates(31, 36);
              break;
            case 93:
              if (curChar == 46)
                jjCheckNAddTwoStates(94, 100);
              break;
            case 94:
              if (curChar == 48)
                jjCheckNAdd(95);
              break;
            case 96:
              if ((0x280000000000L & l) != 0L)
                jjCheckNAddTwoStates(97, 98);
              break;
            case 97:
              if (curChar == 48 && kind > 96)
                kind = 96;
              break;
            case 98:
              if ((0x3fe000000000000L & l) == 0L)
                break;
              if (kind > 96)
                kind = 96;
              jjCheckNAdd(99);
              break;
            case 99:
              if ((0x3ff000000000000L & l) == 0L)
                break;
              if (kind > 96)
                kind = 96;
              jjCheckNAdd(99);
              break;
            case 100:
              if ((0x3fe000000000000L & l) != 0L)
                jjCheckNAddTwoStates(101, 95);
              break;
            case 101:
              if ((0x3ff000000000000L & l) != 0L)
                jjCheckNAddTwoStates(101, 95);
              break;
            case 102:
              if (curChar == 46)
                jjCheckNAddTwoStates(97, 103);
              break;
            case 103:
              if ((0x3fe000000000000L & l) == 0L)
                break;
              if (kind > 96)
                kind = 96;
              jjCheckNAdd(104);
              break;
            case 104:
              if ((0x3ff000000000000L & l) == 0L)
                break;
              if (kind > 96)
                kind = 96;
              jjCheckNAdd(104);
              break;
            case 105:
              if (curChar == 46)
                jjCheckNAddTwoStates(106, 112);
              break;
            case 106:
              if (curChar == 48)
                jjCheckNAdd(107);
              break;
            case 108:
              if ((0x280000000000L & l) != 0L)
                jjCheckNAddTwoStates(109, 110);
              break;
            case 109:
              if (curChar == 48 && kind > 103)
                kind = 103;
              break;
            case 110:
              if ((0x3fe000000000000L & l) == 0L)
                break;
              if (kind > 103)
                kind = 103;
              jjCheckNAdd(111);
              break;
            case 111:
              if ((0x3ff000000000000L & l) == 0L)
                break;
              if (kind > 103)
                kind = 103;
              jjCheckNAdd(111);
              break;
            case 112:
              if ((0x3fe000000000000L & l) != 0L)
                jjCheckNAddTwoStates(113, 107);
              break;
            case 113:
              if ((0x3ff000000000000L & l) != 0L)
                jjCheckNAddTwoStates(113, 107);
              break;
            case 114:
              if (curChar == 46)
                jjCheckNAddTwoStates(109, 115);
              break;
            case 115:
              if ((0x3fe000000000000L & l) == 0L)
                break;
              if (kind > 103)
                kind = 103;
              jjCheckNAdd(116);
              break;
            case 116:
              if ((0x3ff000000000000L & l) == 0L)
                break;
              if (kind > 103)
                kind = 103;
              jjCheckNAdd(116);
              break;
            case 117:
              if ((0x3fe000000000000L & l) == 0L)
                break;
              if (kind > 8)
                kind = 8;
              jjCheckNAddStates(0, 11);
              break;
            case 118:
              if ((0x3ff000000000000L & l) == 0L)
                break;
              if (kind > 8)
                kind = 8;
              jjCheckNAdd(118);
              break;
            case 119:
              if ((0x3ff000000000000L & l) != 0L)
                jjCheckNAddStates(44, 46);
              break;
            case 120:
              if ((0x3ff000000000000L & l) == 0L)
                break;
              if (kind > 96)
                kind = 96;
              jjCheckNAddTwoStates(120, 102);
              break;
            case 121:
              if ((0x3ff000000000000L & l) == 0L)
                break;
              if (kind > 101)
                kind = 101;
              jjCheckNAdd(121);
              break;
            case 122:
              if ((0x3ff000000000000L & l) != 0L)
                jjCheckNAddStates(47, 49);
              break;
            case 123:
              if ((0x3ff000000000000L & l) == 0L)
                break;
              if (kind > 103)
                kind = 103;
              jjCheckNAddTwoStates(123, 114);
              break;
            case 140:
              if (curChar != 36)
                break;
              if (kind > 91)
                kind = 91;
              jjCheckNAddStates(27, 30);
              break;
            case 141:
              if ((0x3ff001000000000L & l) == 0L)
                break;
              if (kind > 91)
                kind = 91;
              jjCheckNAddTwoStates(141, 142);
              break;
            case 142:
              if (curChar != 46)
                break;
              if (kind > 91)
                kind = 91;
              jjCheckNAdd(143);
              break;
            case 143:
              if ((0x3ff001000000000L & l) == 0L)
                break;
              if (kind > 91)
                kind = 91;
              jjCheckNAdd(143);
              break;
            case 144:
              if ((0x3ff001000000000L & l) != 0L)
                jjCheckNAddTwoStates(144, 145);
              break;
            case 145:
              if (curChar == 46)
                jjstateSet[jjnewStateCnt++] = 146;
              break;
            case 146:
              if (curChar == 42 && kind > 94)
                kind = 94;
              break;
            case 147:
              if (curChar == 34)
                jjAddStates(25, 26);
              break;
            case 148:
              if (curChar == 36)
                jjCheckNAddStates(50, 52);
              break;
            case 149:
              if ((0x3ff001000000000L & l) != 0L)
                jjCheckNAddStates(50, 52);
              break;
            case 150:
              if (curChar == 46)
                jjCheckNAddTwoStates(151, 152);
              break;
            case 151:
              if ((0x3ff001000000000L & l) != 0L)
                jjCheckNAddTwoStates(151, 152);
              break;
            case 152:
              if (curChar == 34 && kind > 92)
                kind = 92;
              break;
            case 153:
              if (curChar == 36)
                jjCheckNAddTwoStates(154, 155);
              break;
            case 154:
              if ((0x3ff001000000000L & l) != 0L)
                jjCheckNAddTwoStates(154, 155);
              break;
            case 155:
              if (curChar == 46)
                jjstateSet[jjnewStateCnt++] = 156;
              break;
            case 156:
              if (curChar == 42)
                jjstateSet[jjnewStateCnt++] = 157;
              break;
            case 157:
              if (curChar == 34 && kind > 95)
                kind = 95;
              break;
            case 158:
              if ((0x280000000000L & l) != 0L)
                jjAddStates(12, 16);
              break;
            case 159:
              if (curChar == 48 && kind > 101)
                kind = 101;
              break;
            case 160:
              if ((0x3fe000000000000L & l) == 0L)
                break;
              if (kind > 101)
                kind = 101;
              jjCheckNAdd(121);
              break;
            case 161:
              if (curChar != 48)
                break;
              if (kind > 103)
                kind = 103;
              jjCheckNAddStates(53, 55);
              break;
            case 162:
              if ((0x3fe000000000000L & l) == 0L)
                break;
              if (kind > 103)
                kind = 103;
              jjCheckNAddStates(56, 60);
              break;
            case 163:
              if (curChar == 46)
                jjCheckNAddStates(61, 64);
              break;
            case 164:
              if ((0x3fe000000000000L & l) != 0L)
                jjCheckNAddTwoStates(165, 107);
              break;
            case 165:
              if ((0x3ff000000000000L & l) != 0L)
                jjCheckNAddTwoStates(165, 107);
              break;
            case 166:
              if ((0x3fe000000000000L & l) == 0L)
                break;
              if (kind > 103)
                kind = 103;
              jjCheckNAdd(167);
              break;
            case 167:
              if ((0x3ff000000000000L & l) == 0L)
                break;
              if (kind > 103)
                kind = 103;
              jjCheckNAdd(167);
              break;
            case 168:
              if (curChar == 46)
                jjCheckNAddStates(17, 24);
              break;
            case 169:
              if ((0x3fe000000000000L & l) != 0L)
                jjCheckNAddTwoStates(170, 95);
              break;
            case 170:
              if ((0x3ff000000000000L & l) != 0L)
                jjCheckNAddTwoStates(170, 95);
              break;
            case 171:
              if ((0x3fe000000000000L & l) == 0L)
                break;
              if (kind > 96)
                kind = 96;
              jjCheckNAdd(172);
              break;
            case 172:
              if ((0x3ff000000000000L & l) == 0L)
                break;
              if (kind > 96)
                kind = 96;
              jjCheckNAdd(172);
              break;
            default :
              break;
          }
        }
        while (i != startsAt);
      }
      else if (curChar < 128)
      {
        long l = 1L << (curChar & 077);
        MatchLoop: do
        {
          switch (jjstateSet[--i])
          {
            case 0:
              if ((0x7fffffe87fffffeL & l) != 0L)
              {
                if (kind > 91)
                  kind = 91;
                jjCheckNAddStates(27, 30);
              }
              if ((0x400000004000L & l) != 0L)
                jjAddStates(65, 66);
              else if ((0x800000008L & l) != 0L)
                jjAddStates(67, 68);
              else if ((0x20000000200L & l) != 0L)
                jjAddStates(69, 70);
              else if ((0x400000004L & l) != 0L)
                jjAddStates(71, 72);
              else if ((0x8000000080000L & l) != 0L)
                jjAddStates(73, 74);
              else if ((0x10000000100000L & l) != 0L)
                jjAddStates(75, 76);
              else if ((0x1000000010L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 12;
              break;
            case 2:
              jjAddStates(41, 43);
              break;
            case 7:
              if ((0x100000001000L & l) != 0L && kind > 57)
                kind = 57;
              break;
            case 8:
              if ((0x200000002L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 7;
              break;
            case 9:
              if ((0x200000002000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 8;
              break;
            case 10:
              if ((0x20000000200L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 9;
              break;
            case 11:
              if ((0x800000008L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 10;
              break;
            case 12:
              if ((0x2000000020L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 11;
              break;
            case 13:
              if ((0x1000000010L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 12;
              break;
            case 17:
              if (curChar == 92)
                jjstateSet[jjnewStateCnt++] = 18;
              break;
            case 18:
              if ((0x7fffffe17fffffeL & l) != 0L)
                jjCheckNAddStates(37, 40);
              break;
            case 19:
              jjCheckNAddStates(37, 40);
              break;
            case 21:
              if ((0x10000000100000L & l) != 0L)
                jjAddStates(75, 76);
              break;
            case 22:
              if ((0x10000000100000L & l) != 0L && kind > 67)
                kind = 67;
              break;
            case 23:
              if ((0x400000004000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 22;
              break;
            case 24:
              if ((0x20000000200L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 23;
              break;
            case 25:
              if ((0x200000002000000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 24;
              break;
            case 26:
              if ((0x400000004000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 25;
              break;
            case 27:
              if ((0x20000000200L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 26;
              break;
            case 28:
              if ((0x4000000040000L & l) != 0L && kind > 67)
                kind = 67;
              break;
            case 29:
              if ((0x2000000020L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 28;
              break;
            case 30:
              if ((0x8000000080L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 29;
              break;
            case 31:
              if ((0x2000000020L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 30;
              break;
            case 32:
              if ((0x10000000100000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 31;
              break;
            case 33:
              if ((0x400000004000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 32;
              break;
            case 34:
              if ((0x20000000200L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 33;
              break;
            case 35:
              if ((0x200000002000000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 34;
              break;
            case 36:
              if ((0x400000004000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 35;
              break;
            case 37:
              if ((0x20000000200L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 36;
              break;
            case 38:
              if ((0x8000000080000L & l) != 0L)
                jjAddStates(73, 74);
              break;
            case 39:
              if ((0x10000000100000L & l) != 0L && kind > 66)
                kind = 66;
              break;
            case 40:
              if ((0x400000004000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 39;
              break;
            case 41:
              if ((0x20000000200L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 40;
              break;
            case 42:
              if ((0x100000001000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 41;
              break;
            case 43:
              if ((0x100000001000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 42;
              break;
            case 44:
              if ((0x200000002L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 43;
              break;
            case 45:
              if ((0x200000002000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 44;
              break;
            case 46:
              if ((0x4000000040000L & l) != 0L && kind > 66)
                kind = 66;
              break;
            case 47:
              if ((0x2000000020L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 46;
              break;
            case 48:
              if ((0x8000000080L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 47;
              break;
            case 49:
              if ((0x2000000020L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 48;
              break;
            case 50:
              if ((0x10000000100000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 49;
              break;
            case 51:
              if ((0x400000004000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 50;
              break;
            case 52:
              if ((0x20000000200L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 51;
              break;
            case 53:
              if ((0x100000001000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 52;
              break;
            case 54:
              if ((0x100000001000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 53;
              break;
            case 55:
              if ((0x200000002L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 54;
              break;
            case 56:
              if ((0x200000002000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 55;
              break;
            case 57:
              if ((0x400000004L & l) != 0L)
                jjAddStates(71, 72);
              break;
            case 58:
              if ((0x10000000100000L & l) != 0L && kind > 65)
                kind = 65;
              break;
            case 59:
              if ((0x400000004000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 58;
              break;
            case 60:
              if ((0x20000000200L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 59;
              break;
            case 61:
              if ((0x8000000080L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 60;
              break;
            case 62:
              if ((0x20000000200L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 61;
              break;
            case 63:
              if ((0x4000000040000L & l) != 0L && kind > 65)
                kind = 65;
              break;
            case 64:
              if ((0x2000000020L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 63;
              break;
            case 65:
              if ((0x8000000080L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 64;
              break;
            case 66:
              if ((0x2000000020L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 65;
              break;
            case 67:
              if ((0x10000000100000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 66;
              break;
            case 68:
              if ((0x400000004000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 67;
              break;
            case 69:
              if ((0x20000000200L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 68;
              break;
            case 70:
              if ((0x8000000080L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 69;
              break;
            case 71:
              if ((0x20000000200L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 70;
              break;
            case 72:
              if ((0x20000000200L & l) != 0L)
                jjAddStates(69, 70);
              break;
            case 73:
              if ((0x10000000100000L & l) != 0L && kind > 56)
                kind = 56;
              break;
            case 74:
              if ((0x400000004000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 73;
              break;
            case 75:
              if ((0x4000000040000L & l) != 0L && kind > 56)
                kind = 56;
              break;
            case 76:
              if ((0x2000000020L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 75;
              break;
            case 77:
              if ((0x8000000080L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 76;
              break;
            case 78:
              if ((0x2000000020L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 77;
              break;
            case 79:
              if ((0x10000000100000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 78;
              break;
            case 80:
              if ((0x400000004000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 79;
              break;
            case 81:
              if ((0x800000008L & l) != 0L)
                jjAddStates(67, 68);
              break;
            case 82:
              if ((0x4000000040000L & l) != 0L && kind > 55)
                kind = 55;
              break;
            case 83:
              if ((0x200000002L & l) != 0L)
                jjCheckNAdd(82);
              break;
            case 84:
              if ((0x10000000100L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 83;
              break;
            case 85:
              if ((0x2000000020L & l) != 0L)
                jjCheckNAdd(82);
              break;
            case 86:
              if ((0x10000000100000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 85;
              break;
            case 87:
              if ((0x800000008L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 86;
              break;
            case 88:
              if ((0x200000002L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 87;
              break;
            case 89:
              if ((0x4000000040000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 88;
              break;
            case 90:
              if ((0x200000002L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 89;
              break;
            case 91:
              if ((0x10000000100L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 90;
              break;
            case 95:
              if ((0x2000000020L & l) != 0L)
                jjAddStates(77, 79);
              break;
            case 107:
              if ((0x2000000020L & l) != 0L)
                jjAddStates(80, 82);
              break;
            case 124:
              if ((0x400000004000L & l) != 0L)
                jjAddStates(65, 66);
              break;
            case 125:
              if ((0x800000008L & l) != 0L && kind > 57)
                kind = 57;
              break;
            case 126:
              if ((0x20000000200L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 125;
              break;
            case 127:
              if ((0x4000000040000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 126;
              break;
            case 128:
              if ((0x2000000020L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 127;
              break;
            case 129:
              if ((0x200000002000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 128;
              break;
            case 130:
              if ((0x20000000200000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 129;
              break;
            case 131:
              if ((0x10000000100000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 138;
              break;
            case 132:
              if ((0x400000004000L & l) != 0L && kind > 89)
                kind = 89;
              break;
            case 133:
              if ((0x2000000020L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 132;
              break;
            case 134:
              if ((0x2000000020L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 133;
              break;
            case 135:
              if ((0x80000000800000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 134;
              break;
            case 136:
              if ((0x10000000100000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 135;
              break;
            case 137:
              if ((0x2000000020L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 136;
              break;
            case 138:
              if ((0x400000004L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 137;
              break;
            case 139:
              if ((0x800000008000L & l) != 0L)
                jjstateSet[jjnewStateCnt++] = 131;
              break;
            case 140:
              if ((0x7fffffe87fffffeL & l) == 0L)
                break;
              if (kind > 91)
                kind = 91;
              jjCheckNAddStates(27, 30);
              break;
            case 141:
              if ((0x7fffffe87fffffeL & l) == 0L)
                break;
              if (kind > 91)
                kind = 91;
              jjCheckNAddTwoStates(141, 142);
              break;
            case 143:
              if ((0x7fffffe87fffffeL & l) == 0L)
                break;
              if (kind > 91)
                kind = 91;
              jjstateSet[jjnewStateCnt++] = 143;
              break;
            case 144:
              if ((0x7fffffe87fffffeL & l) != 0L)
                jjCheckNAddTwoStates(144, 145);
              break;
            case 148:
            case 149:
              if ((0x7fffffe87fffffeL & l) != 0L)
                jjCheckNAddStates(50, 52);
              break;
            case 151:
              if ((0x7fffffe87fffffeL & l) != 0L)
                jjCheckNAddTwoStates(151, 152);
              break;
            case 153:
            case 154:
              if ((0x7fffffe87fffffeL & l) != 0L)
                jjCheckNAddTwoStates(154, 155);
              break;
            default :
              break;
          }
        }
        while (i != startsAt);
      }
      else
      {
        int i2 = (curChar & 0xff) >> 6;
        long l2 = 1L << (curChar & 077);
        MatchLoop: do
        {
          switch (jjstateSet[--i])
          {
            case 2:
              if ((jjbitVec0[i2] & l2) != 0L)
                jjAddStates(41, 43);
              break;
            case 19:
              if ((jjbitVec0[i2] & l2) != 0L)
                jjAddStates(37, 40);
              break;
            default :
              break;
          }
        }
        while (i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
        jjmatchedKind = kind;
        jjmatchedPos = curPos;
        kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 173 - (jjnewStateCnt = startsAt)))
        break;
      try
      {
        curChar = input_stream.readChar();
      }
      catch (java.io.IOException e)
      {
        break;
      }
    }
    if (jjmatchedPos > strPos)
      return curPos;

    int toRet = Math.max(curPos, seenUpto);

    if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0;)
        try
        {
          curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
          throw new Error("Internal Error : Please send a bug report.");
        }

    if (jjmatchedPos < strPos)
    {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
    }
    else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

    return toRet;
  }

  static final int[] jjnextStates = {
    118, 119, 93, 95, 120, 102, 121, 122, 105, 107, 123, 114, 159, 160, 161, 162,
    163, 94, 169, 97, 171, 106, 164, 109, 166, 148, 153, 141, 142, 144, 145, 93,
    95, 102, 105, 107, 114, 16, 17, 19, 20, 2, 3, 5, 119, 93, 95, 122,
    105, 107, 149, 150, 152, 105, 107, 114, 122, 105, 107, 123, 114, 106, 164, 109,
    166, 130, 139, 84, 91, 74, 80, 62, 71, 45, 56, 27, 37, 96, 97, 98,
    108, 109, 110,
  };
  public static final String[] jjstrLiteralImages = {
    "", null, null, null, null, null, null, null, null, null, null, null, "\54",
    null, null, null, null, "\73", "\50", "\51", "\77", null, null, null, null, null,
    null, null, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null, "\53", "\55", "\52", "\57",
    "\75", "\75\75", "\74\76", "\74\75", "\76\75", "\74", "\76", null, null, null, null,
    null, null, null, null, null, null, null, null, null, null, null, null, };
  public static final String[] lexStateNames = {
    "DEFAULT",
  };
  static final long[] jjtoToken = {
    0xfffffffffffe1101L, 0xa1ffffffffL,
  };
  static final long[] jjtoSkip = {
    0x6L, 0x0L,
  };
  private SimpleCharStream input_stream;
  private final int[] jjrounds = new int[173];
  private final int[] jjstateSet = new int[346];
  protected char curChar;

  public TinySQLParserTokenManager(SimpleCharStream stream)
  {
    if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
    input_stream = stream;
  }

  public TinySQLParserTokenManager(SimpleCharStream stream, int lexState)
  {
    this(stream);
    SwitchTo(lexState);
  }

  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private final void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 173; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

  private final Token jjFillToken()
  {
    Token t = Token.newToken(jjmatchedKind);
    t.kind = jjmatchedKind;
    String im = jjstrLiteralImages[jjmatchedKind];
    t.image = (im == null) ? input_stream.GetImage() : im;
    t.beginLine = input_stream.getBeginLine();
    t.beginColumn = input_stream.getBeginColumn();
    t.endLine = input_stream.getEndLine();
    t.endColumn = input_stream.getEndColumn();
    return t;
  }

  int curLexState = 0;
  int defaultLexState = 0;
  int jjnewStateCnt;
  int jjround;
  int jjmatchedPos;
  int jjmatchedKind;

  public final Token getNextToken()
  {
    int kind;
    Token specialToken = null;
    Token matchedToken;
    int curPos = 0;

    EOFLoop :
    for (; ;)
    {
      try
      {
        curChar = input_stream.BeginToken();
      }
      catch (java.io.IOException e)
      {
        jjmatchedKind = 0;
        matchedToken = jjFillToken();
        return matchedToken;
      }

      jjmatchedKind = 0x7fffffff;
      jjmatchedPos = 0;
      curPos = jjMoveStringLiteralDfa0_0();
      if (jjmatchedKind != 0x7fffffff)
      {
        if (jjmatchedPos + 1 < curPos)
          input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
          matchedToken = jjFillToken();
          return matchedToken;
        }
        else
        {
          continue EOFLoop;
        }
      }
      int error_line = input_stream.getEndLine();
      int error_column = input_stream.getEndColumn();
      String error_after = null;
      boolean EOFSeen = false;
      try
      {
        input_stream.readChar();
        input_stream.backup(1);
      }
      catch (java.io.IOException e1)
      {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r')
        {
          error_line++;
          error_column = 0;
        }
        else
          error_column++;
      }
      if (!EOFSeen)
      {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
      }
      throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
    }
  }

}
