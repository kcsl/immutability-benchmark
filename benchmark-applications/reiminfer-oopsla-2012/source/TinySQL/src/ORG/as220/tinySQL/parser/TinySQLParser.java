/* Generated By:JavaCC: Do not edit this line. TinySQLParser.java */
package ORG.as220.tinySQL.parser;

import ORG.as220.tinySQL.sqlparser.AlterCreateTableStatement;
import ORG.as220.tinySQL.sqlparser.AlterTableAddColumnStatement;
import ORG.as220.tinySQL.sqlparser.AlterTableDropColumnStatement;
import ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement;
import ORG.as220.tinySQL.sqlparser.ColumnDefinition;
import ORG.as220.tinySQL.sqlparser.ColumnValue;
import ORG.as220.tinySQL.sqlparser.CompactTableStatement;
import ORG.as220.tinySQL.sqlparser.CreateTableStatement;
import ORG.as220.tinySQL.sqlparser.DeleteStatement;
import ORG.as220.tinySQL.sqlparser.DropTableStatement;
import ORG.as220.tinySQL.sqlparser.EmptyStatement;
import ORG.as220.tinySQL.sqlparser.Expression;
import ORG.as220.tinySQL.sqlparser.InsertStatement;
import ORG.as220.tinySQL.sqlparser.JokerColumnValue;
import ORG.as220.tinySQL.sqlparser.LValue;
import ORG.as220.tinySQL.sqlparser.Operator;
import ORG.as220.tinySQL.sqlparser.ParameterValue;
import ORG.as220.tinySQL.sqlparser.SQLStatement;
import ORG.as220.tinySQL.sqlparser.SelectStatement;
import ORG.as220.tinySQL.sqlparser.StaticValue;
import ORG.as220.tinySQL.sqlparser.UpdateStatement;
import ORG.as220.tinySQL.sqlparser.WhereClause;
import ORG.as220.tinySQL.tinySQLException;
import ORG.as220.tinySQL.tinySQLStatement;

import java.math.BigDecimal;
import java.sql.Types;
import java.util.Vector;
//import checkers.inference.ownership.quals.*;

public class TinySQLParser implements TinySQLParserConstants
{
  private class AliasedItem
  {
    public LValue item;
    public String alias;

    public AliasedItem(LValue item, String alias)
    {
      this.item = item;
      this.alias = alias;
    }
  }

  private class AliasedString
  {
    public String item;
    public String alias;

    public AliasedString(String item, String alias)
    {
      this.item = item;
      this.alias = alias;
    }
  }

  public static BigDecimal createBigDecimal(String numeric_literal)
  {
    try
    {
      return new BigDecimal(numeric_literal);
    }
    catch (Exception e)
    {
      return new BigDecimal(0);
    }
  }

  public static String stripQuote(String s)
  {
    if (s.length() < 2)
      return s;
    else
      return s.substring(1, s.length() - 1);
  }

  /**
   * Productions
   */
  final public SQLStatement getStatement(tinySQLStatement statement) throws ParseException, tinySQLException
  {
    SQLStatement currentStatement = null;
    switch (jj_nt.kind)
    {
      case SELECT:
        currentStatement = Select(statement);
        break;
      case UPDATE:
        currentStatement = Update(statement);
        break;
      case INSERT:
        currentStatement = Insert(statement);
        break;
      case DELETE:
        currentStatement = Delete(statement);
        break;
      case DROP:
        currentStatement = DropTable(statement);
        break;
      case ALTER:
        currentStatement = AlterTable(statement);
        break;
      case CREATE:
        currentStatement = CreateTable(statement);
        break;
      case COMPACT:
        currentStatement = CompactTable(statement);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    switch (jj_nt.kind)
    {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    if (currentStatement == null)
    {
      currentStatement = new EmptyStatement(statement);
//      throw new tinySQLException ("Empty");
    }
    {
      if (true) return currentStatement;
    }
    throw new Error("Missing return statement in function");
  }

  final public SQLStatement Select(tinySQLStatement statement) throws ParseException, tinySQLException
  {
    SelectStatement select = new SelectStatement(statement);
    int mod = select.getModifier();
    Vector columnList = null;
    Vector tables = null;
    LValue whereC = null;
    LValue order = null;
    jj_consume_token(SELECT);
    switch (jj_nt.kind)
    {
      case ALL:
      case DISTINCT:
        mod = getSelectMod();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
    }
    columnList = getSelectColumns();
    switch (jj_nt.kind)
    {
      case FROM:
        tables = getSelectTables();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
    }
    switch (jj_nt.kind)
    {
      case WHERE:
        whereC = getWhereClauseExpression();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
    }
    switch (jj_nt.kind)
    {
      case ORDER:
        order = getOrderBy();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
    }
    select.setModifier(mod);
    if (tables != null)
    {
      for (int i = 0; i < tables.size(); i++)
      {
        AliasedString a = (AliasedString) tables.elementAt(i);
        select.addTable(a.item, a.alias);
      }
    }

    for (int i = 0; i < columnList.size(); i++)
    {
      AliasedItem a = (AliasedItem) columnList.elementAt(i);
      select.addColumn(a.item, a.alias);
    }

    if (whereC != null)
    {
      WhereClause w = new WhereClause(select);
      w.setExpression(whereC);
      select.setWhereClause(w);
    }
    {
      if (true) return select;
    }
    throw new Error("Missing return statement in function");
  }

  /**
   * @returns MOD_DISTINCT or MOD_ALL, called from Select ()
   */
  final public int getSelectMod() throws ParseException
  {
    switch (jj_nt.kind)
    {
      case DISTINCT:
        jj_consume_token(DISTINCT);
        {
          if (true) return SelectStatement.MOD_DISTINCT;
        }
        break;
      case ALL:
        jj_consume_token(ALL);
        {
          if (true) return SelectStatement.MOD_ALL;
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Vector getSelectColumns() throws ParseException
  {
    Vector retval = null;
    LValue column = null;
    String alias = null;
    switch (jj_nt.kind)
    {
      case UNSIGNED_INTEGER:
      case L_PAREN:
      case QUEST:
      case NULL:
      case IDENTIFIER:
      case QUOTED_IDENTIFIER:
      case STRING_LITERAL:
      case UNSIGNED_NUMERIC_LITERAL:
      case SIGNED_INTEGER:
      case SIGNED_NUMERIC_LITERAL:
        column = getExpression(0);
        alias = getAlias(column.getName());
        break;
      case MULT:
      case JOKER_IDENTIFIER:
      case QUOTED_JOKER_IDENTIFIER:
        alias = getJokerName();
        column = new JokerColumnValue(alias);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    retval = new Vector();
    retval.add(new AliasedItem(column, alias));
    label_1:
    while (true)
    {
      switch (jj_nt.kind)
      {
        case COMMA:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_1;
      }
      jj_consume_token(COMMA);
      switch (jj_nt.kind)
      {
        case UNSIGNED_INTEGER:
        case L_PAREN:
        case QUEST:
        case NULL:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
        case STRING_LITERAL:
        case UNSIGNED_NUMERIC_LITERAL:
        case SIGNED_INTEGER:
        case SIGNED_NUMERIC_LITERAL:
          column = getExpression(0);
          alias = getAlias(column.getName());
          break;
        case MULT:
        case JOKER_IDENTIFIER:
        case QUOTED_JOKER_IDENTIFIER:
          alias = getJokerName();
          column = new JokerColumnValue(alias);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
      }
      retval.add(new AliasedItem(column, alias));
    }
    {
      if (true) return retval;
    }
    throw new Error("Missing return statement in function");
  }

  final public String getAlias(String colname) throws ParseException
  {
    Token alias_token = null;
    String alias = colname;
    switch (jj_nt.kind)
    {
      case AS:
        jj_consume_token(AS);
        alias = getString();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
    }
    {
      if (true) return alias;
    }
    throw new Error("Missing return statement in function");
  }

  final public String getName() throws ParseException
  {
    Token retval = null;
    String name = null;
    switch (jj_nt.kind)
    {
      case IDENTIFIER:
        retval = jj_consume_token(IDENTIFIER);
        name = retval.image;
        break;
      case QUOTED_IDENTIFIER:
        retval = jj_consume_token(QUOTED_IDENTIFIER);
        name = stripQuote(retval.image);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    {
      if (true) return name;
    }
    throw new Error("Missing return statement in function");
  }

  final public String getJokerName() throws ParseException
  {
    String name = null;
    Token retval = null;
    switch (jj_nt.kind)
    {
      case JOKER_IDENTIFIER:
        retval = jj_consume_token(JOKER_IDENTIFIER);
        name = retval.image;
        break;
      case QUOTED_JOKER_IDENTIFIER:
        retval = jj_consume_token(QUOTED_JOKER_IDENTIFIER);
        name = stripQuote(retval.image);
        break;
      case MULT:
        retval = jj_consume_token(MULT);
        name = retval.image;
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    {
      if (true) return name;
    }
    throw new Error("Missing return statement in function");
  }

  final public String getString() throws ParseException
  {
    Token retval = null;
    String val = null;
    switch (jj_nt.kind)
    {
      case IDENTIFIER:
        retval = jj_consume_token(IDENTIFIER);
        val = retval.image;
        break;
      case QUOTED_IDENTIFIER:
        retval = jj_consume_token(QUOTED_IDENTIFIER);
        val = stripQuote(retval.image);
        break;
      case STRING_LITERAL:
        retval = jj_consume_token(STRING_LITERAL);
        val = stripQuote(retval.image);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    {
      if (true) return retval.image;
    }
    throw new Error("Missing return statement in function");
  }

  final public LValue getExpression(int level) throws ParseException
  {
    LValue retval = null;
    LValue tail_value = null;
    Operator op = null;
    Expression ex = null;
    Token value = null;
    if (level == -1) level = -2;
    retval = getLValue(level + 1);
    label_2:
    while (true)
    {
      switch (jj_nt.kind)
      {
        case AND:
        case OR:
        case PLUS:
        case MINUS:
        case MULT:
        case DIV:
        case ASSIGN:
        case EQUALS:
        case NOT_EQUALS:
        case LT_EQUALS:
        case GT_EQUALS:
        case LT:
        case GT:
        case BETWEEN:
        case NBETWEEN:
        case LIKE:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_2;
      }
      ex = startTail(retval, ex);
    }
    if (ex != null)
    {
      {
        if (true) return ex;
      }
    }
    if ((level == 0) && (retval instanceof Expression))
    {
      ex = (Expression) retval;
    }
    {
      if (true) return retval;
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression startTail(LValue retval, Expression ex) throws ParseException
  {
    LValue val = null;
    Operator op = null;
    op = getOperator();
    val = getLValue(-1);
    if (ex == null)
    {
      if (retval instanceof Expression)
      {
        ex = (Expression) retval;
      }
      else
      {
        ex = new Expression(retval);
      }
    }
    ex.add(op, val);

    {
      if (true) return ex;
    }
    throw new Error("Missing return statement in function");
  }

  final public LValue getLValue(int level) throws ParseException
  {
    Token value = null;
    LValue retval = null;
    LValue lval;
    switch (jj_nt.kind)
    {
      case IDENTIFIER:
        value = jj_consume_token(IDENTIFIER);
        retval = new ColumnValue(value.image);
        break;
      case QUOTED_IDENTIFIER:
        value = jj_consume_token(QUOTED_IDENTIFIER);
        retval = new ColumnValue(stripQuote(value.image));
        break;
      case STRING_LITERAL:
        value = jj_consume_token(STRING_LITERAL);
        retval = new StaticValue(stripQuote(value.image));
        break;
      case SIGNED_NUMERIC_LITERAL:
        value = jj_consume_token(SIGNED_NUMERIC_LITERAL);
        retval = new StaticValue(createBigDecimal(value.image));
        break;
      case UNSIGNED_NUMERIC_LITERAL:
        value = jj_consume_token(UNSIGNED_NUMERIC_LITERAL);
        retval = new StaticValue(createBigDecimal(value.image));
        break;
      case SIGNED_INTEGER:
        value = jj_consume_token(SIGNED_INTEGER);
        retval = new StaticValue(createBigDecimal(value.image));
        break;
      case UNSIGNED_INTEGER:
        value = jj_consume_token(UNSIGNED_INTEGER);
        retval = new StaticValue(createBigDecimal(value.image));
        break;
      case QUEST:
        value = jj_consume_token(QUEST);
        retval = new ParameterValue();
        break;
      case NULL:
        value = jj_consume_token(NULL);
        retval = new StaticValue(null);
        break;
      case L_PAREN:
        jj_consume_token(L_PAREN);
        retval = getExpression(level);
        jj_consume_token(R_PAREN);
        if (level != -1)
        {
          retval = new Expression(retval);
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    {
      if (true) return retval;
    }
    throw new Error("Missing return statement in function");
  }

  final public Operator getOperator() throws ParseException
  {
    Operator op = null;
    switch (jj_nt.kind)
    {
      case PLUS:
        jj_consume_token(PLUS);
        op = Operator.ADD;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        op = Operator.SUB;
        break;
      case MULT:
        jj_consume_token(MULT);
        op = Operator.MULT;
        break;
      case DIV:
        jj_consume_token(DIV);
        op = Operator.DIV;
        break;
      case EQUALS:
        jj_consume_token(EQUALS);
        op = Operator.EQUAL;
        break;
      case ASSIGN:
        jj_consume_token(ASSIGN);
        op = Operator.EQUAL;
        break;
      case NOT_EQUALS:
        jj_consume_token(NOT_EQUALS);
        op = Operator.NEQUAL;
        break;
      case LT_EQUALS:
        jj_consume_token(LT_EQUALS);
        op = Operator.LEQUAL;
        break;
      case GT_EQUALS:
        jj_consume_token(GT_EQUALS);
        op = Operator.GEQUAL;
        break;
      case LT:
        jj_consume_token(LT);
        op = Operator.LESSER;
        break;
      case GT:
        jj_consume_token(GT);
        op = Operator.GREATER;
        break;
      case AND:
        jj_consume_token(AND);
        op = Operator.AND;
        break;
      case OR:
        jj_consume_token(OR);
        op = Operator.OR;
        break;
      case BETWEEN:
        jj_consume_token(BETWEEN);
        op = Operator.BETWEEN;
        break;
      case NBETWEEN:
        jj_consume_token(NBETWEEN);
        op = Operator.NBETWEEN;
        break;
      case LIKE:
        jj_consume_token(LIKE);
        op = Operator.LIKE;
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    {
      if (true) return op;
    }
    throw new Error("Missing return statement in function");
  }

  final public Vector getSelectTables() throws ParseException
  {
    Vector v = null;
    String table = null;
    String alias = null;
    jj_consume_token(FROM);
    table = getName();
    alias = getAlias(table);
    v = new Vector();
    v.add(new AliasedString(table, alias));
    label_3:
    while (true)
    {
      switch (jj_nt.kind)
      {
        case COMMA:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_3;
      }
      jj_consume_token(COMMA);
      table = getName();
      alias = getAlias(table);
      v.add(new AliasedString(table, alias));
    }
    {
      if (true) return v;
    }
    throw new Error("Missing return statement in function");
  }

  final public LValue getWhereClauseExpression() throws ParseException
  {
    LValue lval = null;
    jj_consume_token(WHERE);
    lval = getExpression(0);
    {
      if (true) return lval;
    }
    throw new Error("Missing return statement in function");
  }

  final public LValue getOrderBy() throws ParseException
  {
    LValue lval = null;
    jj_consume_token(ORDER);
    jj_consume_token(BY);
    lval = getExpression(0);
    {
      if (true) return lval;
    }
    throw new Error("Missing return statement in function");
  }

  final public SQLStatement Update(tinySQLStatement statement) throws ParseException, tinySQLException
  {
    String table = null;
    Vector cols = new Vector(); // Vector of String
    Vector vals = new Vector(); // Vector of Expression
    LValue whereC = null;
    jj_consume_token(UPDATE);
    table = getName();
    updateSetColsVals(cols, vals);
    switch (jj_nt.kind)
    {
      case WHERE:
        whereC = getWhereClauseExpression();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
    }
    UpdateStatement upd = new UpdateStatement(statement);
    upd.setTable(table);
    for (int i = 0; i < cols.size(); i++)
    {
      upd.addColumn((String) cols.elementAt(i));
    }

    if (whereC != null)
    {
      WhereClause w = new WhereClause(upd);
      w.setExpression(whereC);
      upd.setWhereClause(w);
    }

    upd.setValues(vals);
    {
      if (true) return upd;
    }
    throw new Error("Missing return statement in function");
  }

  final public void updateSetColsVals(Vector cols,  /*@NoRep*/  Vector retvals) throws ParseException
  {
    String name = null;
    LValue expr = null;
    jj_consume_token(SET);
    name = getName();
    jj_consume_token(ASSIGN);
    expr = getExpression(0);
    cols.add(name);
    retvals.add(expr);
    label_4:
    while (true)
    {
      switch (jj_nt.kind)
      {
        case COMMA:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_4;
      }
      jj_consume_token(COMMA);
      name = getName();
      jj_consume_token(ASSIGN);
      expr = getExpression(0);
      cols.add(name);
      retvals.add(expr);
    }
  }

  final public SQLStatement Insert(tinySQLStatement statement) throws ParseException, tinySQLException
  {
    String table = null;
    Vector cols = new Vector(); // Vector of String
    Vector vals = new Vector(); // Vector of Vector of Expression
    SQLStatement select = null;
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
    table = getName();
    switch (jj_nt.kind)
    {
      case SELECT:
        select = Select(statement);
        break;
      case L_PAREN:
      case SET:
        insertColsVals(cols, vals);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    InsertStatement ins = new InsertStatement(statement);
    ins.setTable(table);
    if (select == null)
    {
      for (int i = 0; i < cols.size(); i++)
      {
        ins.addColumn((String) cols.elementAt(i));
      }
      for (int i = 0; i < vals.size(); i++)
      {
        ins.addValues((Vector) vals.elementAt(i));
      }
    }
    else
      ins.addSelect((SelectStatement) select);
    {
      if (true) return ins;
    }
    throw new Error("Missing return statement in function");
  }

  final public void insertColsVals(Vector cols, Vector vals) throws ParseException
  {
    switch (jj_nt.kind)
    {
      case SET:
        insertSetColsVals(cols, vals);
        break;
      case L_PAREN:
        insertValuesColsVals(cols, vals);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
  }

  final public void insertSetColsVals(Vector cols, Vector vals) throws ParseException
  {
    String name = null;
    LValue expr = null;
     /*@NoRep*/  Vector retvals = new Vector();
    vals.addElement(retvals);
    jj_consume_token(SET);
    name = getName();
    jj_consume_token(ASSIGN);
    expr = getExpression(0);
    cols.add(name);
    retvals.add(expr);
    label_5:
    while (true)
    {
      switch (jj_nt.kind)
      {
        case COMMA:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_5;
      }
      jj_consume_token(COMMA);
      name = getName();
      jj_consume_token(ASSIGN);
      expr = getExpression(0);
      cols.add(name);
      retvals.add(expr);
    }
  }

  final public void insertValuesColsVals(Vector cols, Vector vals) throws ParseException
  {
    String name = null;
    Vector valrow = null;
    jj_consume_token(L_PAREN);
    name = getName();
    cols.add(name);
    label_6:
    while (true)
    {
      switch (jj_nt.kind)
      {
        case COMMA:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_6;
      }
      jj_consume_token(COMMA);
      name = getName();
      cols.add(name);
    }
    jj_consume_token(R_PAREN);
    jj_consume_token(VALUES);
    valrow = getInsertValuesVal();
    vals.add(valrow);
    label_7:
    while (true)
    {
      switch (jj_nt.kind)
      {
        case COMMA:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_7;
      }
      jj_consume_token(COMMA);
      valrow = getInsertValuesVal();
      vals.add(valrow);
    }
  }

  final public Vector getInsertValuesVal() throws ParseException
  {
    Vector vals = new Vector();
    LValue expr = null;
    jj_consume_token(L_PAREN);
    expr = getExpression(0);
    vals.add(expr);
    label_8:
    while (true)
    {
      switch (jj_nt.kind)
      {
        case COMMA:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_8;
      }
      jj_consume_token(COMMA);
      expr = getExpression(0);
      vals.add(expr);
    }
    jj_consume_token(R_PAREN);
    {
      if (true) return vals;
    }
    throw new Error("Missing return statement in function");
  }

  final public SQLStatement Delete(tinySQLStatement statement) throws ParseException, tinySQLException
  {
    String table = null;
    LValue w = null;
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    table = getName();
    switch (jj_nt.kind)
    {
      case WHERE:
        w = getWhereClauseExpression();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
    }
    DeleteStatement del = new DeleteStatement(statement);
    del.setTable(table);
    if (w != null)
    {
      WhereClause where = new WhereClause(del);
      where.setExpression(w);
      del.setWhereClause(where);
    }
    {
      if (true) return del;
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean ifExists() throws ParseException
  {
    jj_consume_token(IF);
    jj_consume_token(EXISTS);
    {
      if (true) return true;
    }
    throw new Error("Missing return statement in function");
  }

  final public boolean ifNotExists() throws ParseException
  {
    jj_consume_token(IF);
    jj_consume_token(NOT);
    jj_consume_token(EXISTS);
    {
      if (true) return true;
    }
    throw new Error("Missing return statement in function");
  }

  final public SQLStatement DropTable(tinySQLStatement statement) throws ParseException, tinySQLException
  {
    String table = null;
    boolean ifex = false;
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    switch (jj_nt.kind)
    {
      case IF:
        ifex = ifExists();
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
    }
    table = getName();
    DropTableStatement stmt = new DropTableStatement(statement);
    stmt.setTable(table, ifex);
    {
      if (true) return stmt;
    }
    throw new Error("Missing return statement in function");
  }

  final public SQLStatement CompactTable(tinySQLStatement statement) throws ParseException, tinySQLException
  {
    String table = null;
    jj_consume_token(COMPACT);
    jj_consume_token(TABLE);
    table = getName();
    CompactTableStatement stmt = new CompactTableStatement(statement);
    stmt.setTable(table);
    {
      if (true) return stmt;
    }
    throw new Error("Missing return statement in function");
  }

  final public SQLStatement CreateTable(tinySQLStatement statement) throws ParseException, tinySQLException
  {
    String table = null;
    Vector coldefs = null;
    jj_consume_token(CREATE);
    jj_consume_token(TABLE);
    table = getName();
    coldefs = getColumnDefinitions();
    CreateTableStatement stmt = new CreateTableStatement(statement);

    stmt.setTable(table);

    int size = coldefs.size();
    for (int i = 0; i < size; i++)
    {
      stmt.addColumnDefinition((ColumnDefinition) coldefs.elementAt(i));
    }
    {
      if (true) return stmt;
    }
    throw new Error("Missing return statement in function");
  }

  final public Vector getColumnDefinitions() throws ParseException, tinySQLException
  {
    Vector retval = new  /*@RepRep*/  Vector();
    ColumnDefinition coldef = null;
    jj_consume_token(L_PAREN);
    coldef = getColumnDefinition();
    retval.add(coldef);
    label_9:
    while (true)
    {
      switch (jj_nt.kind)
      {
        case COMMA:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_9;
      }
      jj_consume_token(COMMA);
      coldef = getColumnDefinition();
      retval.add(coldef);
    }
    jj_consume_token(R_PAREN);
    {
      if (true) return retval;
    }
    throw new Error("Missing return statement in function");
  }

  final public ColumnDefinition getColumnDefinition() throws ParseException, tinySQLException
  {
    ColumnDefinition coldef = null;
    String name = null;
    name = getName();
    coldef = new ColumnDefinition(name);
    switch (jj_nt.kind)
    {
      case INT:
      case DATE:
      case BOOLEAN:
      case BIT:
      case DOUBLE:
      case REAL:
      case BIGINT:
      case SMALLINT:
      case TINYINT:
      case TIME:
      case TIMESTAMP:
        getSimpleType(coldef);
        break;
      case CHAR:
      case VARCHAR:
      case LONGVARCHAR:
      case BINARY:
      case VARBINARY:
      case LONGVARBINARY:
      case BLOB:
      case CLOB:
        getCharType(coldef);
        break;
      case NUMERIC:
      case FLOAT:
      case DECIMAL:
        getNumericType(coldef);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    switch (jj_nt.kind)
    {
      case NOT:
      case NULL:
        switch (jj_nt.kind)
        {
          case NULL:
            jj_consume_token(NULL);
            coldef.setNullable(true);
            break;
          case NOT:
            jj_consume_token(NOT);
            jj_consume_token(NULL);
            coldef.setNullable(false);
            break;
          default:
            jj_la1[30] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
    }
    {
      if (true) return coldef;
    }
    throw new Error("Missing return statement in function");
  }

// Check types that need a numeric precision size
  final public void getNumericType(ColumnDefinition coldef) throws ParseException, tinySQLException
  {
    Token scale = null;
    Token size = null;
    int type;
    switch (jj_nt.kind)
    {
      case NUMERIC:
        jj_consume_token(NUMERIC);
        type = Types.NUMERIC;
        break;
      case DECIMAL:
        jj_consume_token(DECIMAL);
        type = Types.DECIMAL;
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        type = Types.REAL;
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    jj_consume_token(L_PAREN);
    size = jj_consume_token(UNSIGNED_INTEGER);
    switch (jj_nt.kind)
    {
      case COMMA:
        jj_consume_token(COMMA);
        scale = jj_consume_token(UNSIGNED_INTEGER);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
    }
    jj_consume_token(R_PAREN);
    coldef.setType(type);
    int isize = Integer.parseInt(size.image);
    if (scale != null)
    {
      int iscale = Integer.parseInt(scale.image);
      coldef.setSize(isize, iscale);
    }
    else
    {
      coldef.setSize(isize, 0);
    }
  }

// Check types that dont need a size
  final public void getSimpleType(ColumnDefinition coldef) throws ParseException, tinySQLException
  {
    Token scale = null;
    Token size = null;
    int type;
    switch (jj_nt.kind)
    {
      case INT:
        jj_consume_token(INT);
        type = Types.INTEGER;
        break;
      case BIGINT:
        jj_consume_token(BIGINT);
        type = Types.BIGINT;
        break;
      case TINYINT:
        jj_consume_token(TINYINT);
        type = Types.TINYINT;
        break;
      case SMALLINT:
        jj_consume_token(SMALLINT);
        type = Types.SMALLINT;
        break;
      case REAL:
        jj_consume_token(REAL);
        type = Types.REAL;
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
        type = Types.DOUBLE;
        break;
      case DATE:
        jj_consume_token(DATE);
        type = Types.DATE;
        break;
      case TIME:
        jj_consume_token(TIME);
        type = Types.TIME;
        break;
      case TIMESTAMP:
        jj_consume_token(TIMESTAMP);
        type = Types.TIMESTAMP;
        break;
      case BIT:
        jj_consume_token(BIT);
        type = Types.BIT;
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        type = Types.BIT;
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    coldef.setType(type);
  }

// Checks types that need a single size
  final public void getCharType(ColumnDefinition coldef) throws ParseException, tinySQLException
  {
    Token size = null;
    int type = 0;
    switch (jj_nt.kind)
    {
      case CHAR:
        jj_consume_token(CHAR);
        type = Types.CHAR;
        break;
      case VARCHAR:
        jj_consume_token(VARCHAR);
        type = Types.VARCHAR;
        break;
      case LONGVARCHAR:
        jj_consume_token(LONGVARCHAR);
        type = Types.LONGVARCHAR;
        break;
      case BINARY:
        jj_consume_token(BINARY);
        type = Types.BINARY;
        break;
      case VARBINARY:
        jj_consume_token(VARBINARY);
        type = Types.VARBINARY;
        break;
      case LONGVARBINARY:
        jj_consume_token(LONGVARBINARY);
        type = Types.LONGVARBINARY;
        break;
      case CLOB:
        jj_consume_token(CLOB);
        type = Types.CLOB;
        break;
      case BLOB:
        jj_consume_token(BLOB);
        type = Types.BLOB;
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    jj_consume_token(L_PAREN);
    size = jj_consume_token(UNSIGNED_INTEGER);
    jj_consume_token(R_PAREN);
    coldef.setType(type);
    coldef.setSize(Integer.parseInt(size.image));
  }

  final public SQLStatement AlterTable(tinySQLStatement statement) throws ParseException, tinySQLException
  {
    String name = null;
    SQLStatement stmt;
    jj_consume_token(ALTER);
    switch (jj_nt.kind)
    {
      case CREATE:
        stmt = AlterCreateTable(statement);
        break;
      case TABLE:
        jj_consume_token(TABLE);
        name = getName();
        switch (jj_nt.kind)
        {
          case ADD:
            stmt = AlterTableAddColumn(statement, name);
            break;
          case DROP:
            stmt = AlterTableDropColumn(statement, name);
            break;
          case RENAME:
            stmt = AlterTableRenameColumn(statement, name);
            break;
          default:
            jj_la1[36] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
    }
    {
      if (true) return stmt;
    }
    throw new Error("Missing return statement in function");
  }

  final public SQLStatement AlterTableAddColumn(tinySQLStatement statement, String name) throws ParseException, tinySQLException
  {
    Vector coldefs = null;
    jj_consume_token(ADD);
    switch (jj_nt.kind)
    {
      case COLUMN:
        jj_consume_token(COLUMN);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
    }
    coldefs = getColumnDefinitions();
    AlterTableAddColumnStatement stmt = new AlterTableAddColumnStatement(statement);
    stmt.setTable(name);
    int size = coldefs.size();
    for (int i = 0; i < size; i++)
    {
      stmt.addColumn((ColumnDefinition) coldefs.elementAt(i));
    }
    {
      if (true) return stmt;
    }
    throw new Error("Missing return statement in function");
  }

  final public SQLStatement AlterTableDropColumn(tinySQLStatement statement, String name) throws ParseException, tinySQLException
  {
    Vector columns = null;
    jj_consume_token(DROP);
    switch (jj_nt.kind)
    {
      case COLUMN:
        jj_consume_token(COLUMN);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
    }
    columns = getNames();
    AlterTableDropColumnStatement stmt = new AlterTableDropColumnStatement(statement);
    stmt.setTable(name);
    int size = columns.size();
    for (int i = 0; i < size; i++)
    {
      stmt.addColumn((String) columns.elementAt(i));
    }
    {
      if (true) return stmt;
    }
    throw new Error("Missing return statement in function");
  }

  final public SQLStatement AlterTableRenameColumn(tinySQLStatement statement, String name) throws ParseException, tinySQLException
  {
    String oldCol = null;
    String newCol = null;
    jj_consume_token(RENAME);
    switch (jj_nt.kind)
    {
      case COLUMN:
        jj_consume_token(COLUMN);
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
    }
    oldCol = getName();
    switch (jj_nt.kind)
    {
      case TO:
        jj_consume_token(TO);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
    }
    newCol = getName();
    AlterTableRenameColumnStatement stmt = new AlterTableRenameColumnStatement(statement);
    stmt.setTable(name);
    stmt.addColumn(oldCol, newCol);
    {
      if (true) return stmt;
    }
    throw new Error("Missing return statement in function");
  }

  final public SQLStatement AlterCreateTable(tinySQLStatement statement) throws ParseException, tinySQLException
  {
    SQLStatement cstmt = null;
    cstmt = CreateTable(statement);
    AlterCreateTableStatement stmt = new AlterCreateTableStatement(statement);
    stmt.setCreateTableStatement((CreateTableStatement) cstmt);
    {
      if (true) return stmt;
    }
    throw new Error("Missing return statement in function");
  }

  final public Vector getNames() throws ParseException
  {
    Vector cols = new  /*@NoRep*/  Vector();
    String name = null;
    name = getName();
    cols.add(name);
    label_10:
    while (true)
    {
      switch (jj_nt.kind)
      {
        case COMMA:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_10;
      }
      jj_consume_token(COMMA);
      name = getName();
      cols.add(name);
    }
    {
      if (true) return cols;
    }
    throw new Error("Missing return statement in function");
  }

  public /*@RepOwn*/ TinySQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_gen;
  final private int[] jj_la1 = new int[43];
  final private int[] jj_la1_0 = {0xe1000000, 0x20001, 0x800000, 0x0, 0x0, 0x0, 0x800000, 0x140100, 0x1000, 0x140100, 0x2000000, 0x0, 0x0, 0x0, 0x400000, 0x140100, 0x400000, 0x1000, 0x0, 0x1000, 0x40000, 0x40000, 0x1000, 0x1000, 0x1000, 0x1000, 0x0, 0x0, 0x1000, 0x0, 0x0, 0x0, 0x0, 0x1000, 0x0, 0x0, 0x200000, 0x40000000, 0x10000000, 0x10000000, 0x10000000, 0x0, 0x1000, };
  final private int[] jj_la1_1 = {0x110104, 0x0, 0x2, 0x20, 0x400000, 0x4000, 0x2, 0x1000, 0x0, 0x1000, 0x0, 0x0, 0x0, 0x0, 0x2000, 0x1000, 0x2000, 0x0, 0x400000, 0x0, 0x30000, 0x20000, 0x0, 0x0, 0x0, 0x0, 0x400000, 0x80, 0x0, 0xff800000, 0x1800, 0x1800, 0x52000000, 0x0, 0xad000000, 0x800000, 0x8004, 0x40000, 0x0, 0x0, 0x0, 0x80000, 0x0, };
  final private int[] jj_la1_2 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8008000, 0x0, 0xf8008000, 0x0, 0x18000000, 0xc0008000, 0x38000000, 0x7ffe000, 0x38000000, 0x7ffe000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1fff, 0x0, 0x0, 0x0, 0x0, 0x60f, 0x19f0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
  final private int[] jj_la1_3 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa1, 0x0, 0xa1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };

  public TinySQLParser(java.io.InputStream stream)
  {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TinySQLParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream)
  {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  public TinySQLParser(java.io.Reader stream)
  {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TinySQLParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream)
  {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  public TinySQLParser(TinySQLParserTokenManager tm)
  {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  public void ReInit(TinySQLParserTokenManager tm)
  {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException
  {
    Token oldToken = token;
    if ((token = jj_nt).next != null)
      jj_nt = jj_nt.next;
    else
      jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind)
    {
      jj_gen++;
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken()
  {
    if ((token = jj_nt).next != null)
      jj_nt = jj_nt.next;
    else
      jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

  final public Token getToken(int index)
  {
    Token t = token;
    for (int i = 0; i < index; i++)
    {
      if (t.next != null)
        t = t.next;
      else
        t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException()
  {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[104];
    for (int i = 0; i < 104; i++)
    {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0)
    {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 43; i++)
    {
      if (jj_la1[i] == jj_gen)
      {
        for (int j = 0; j < 32; j++)
        {
          if ((jj_la1_0[i] & (1 << j)) != 0)
          {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1 << j)) != 0)
          {
            la1tokens[32 + j] = true;
          }
          if ((jj_la1_2[i] & (1 << j)) != 0)
          {
            la1tokens[64 + j] = true;
          }
          if ((jj_la1_3[i] & (1 << j)) != 0)
          {
            la1tokens[96 + j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 104; i++)
    {
      if (la1tokens[i])
      {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++)
    {
      exptokseq[i] = (int[]) jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing()
  {
  }

  final public void disable_tracing()
  {
  }

}
