public class ORG.as220.tinySQL.textFileDatabaseMetaData extends ORG.as220.tinySQL.tinySqlDatabaseMetaData
{

    public void <init>(ORG.as220.tinySQL.tinySQLConnection)
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;
        ORG.as220.tinySQL.tinySQLConnection r1;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLConnection;

        specialinvoke r0.<ORG.as220.tinySQL.tinySqlDatabaseMetaData: void <init>(ORG.as220.tinySQL.tinySQLConnection)>(r1);

        return;
    }

    private java.lang.String getDataDir()
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;
        java.lang.String r1, r2;
        java.sql.Connection $r3;
        ORG.as220.tinySQL.textFileConnection $r4;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.textFileDatabaseMetaData: java.sql.Connection getConnection()>();

        $r4 = (ORG.as220.tinySQL.textFileConnection) $r3;

        r1 = virtualinvoke $r4.<ORG.as220.tinySQL.textFileConnection: java.lang.String getUrl()>();

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 > 13 goto label1;

        return null;

     label1:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(13);

        return r2;
    }

    protected ORG.as220.tinySQL.textFile getTextFileEngine() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;
        java.sql.Connection $r1;
        ORG.as220.tinySQL.tinySQLConnection $r2;
        ORG.as220.tinySQL.tinySQL $r3;
        ORG.as220.tinySQL.textFile $r4;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        $r1 = virtualinvoke r0.<ORG.as220.tinySQL.textFileDatabaseMetaData: java.sql.Connection getConnection()>();

        $r2 = (ORG.as220.tinySQL.tinySQLConnection) $r1;

        $r3 = virtualinvoke $r2.<ORG.as220.tinySQL.tinySQLConnection: ORG.as220.tinySQL.tinySQL getDatabaseEngine()>();

        $r4 = (ORG.as220.tinySQL.textFile) $r3;

        return $r4;
    }

    public java.sql.ResultSet getTypeInfo() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;
        java.util.Vector $r3;
        ORG.as220.tinySQL.tsColumn $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        ORG.as220.tinySQL.tsResultSet $r13;
        ORG.as220.tinySQL.tsPhysicalRow $r14, r49, r50, r51, r52;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35;
        java.lang.String $r15, $r21, $r27, $r33;
        java.lang.Integer $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r28, $r29, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r38;
        ORG.as220.tinySQL.tinySQLResultSet $r39;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        $r4 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r4.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String)>("TYPE_NAME");

        virtualinvoke $r4.<ORG.as220.tinySQL.tsColumn: void setType(int)>(1);

        virtualinvoke $r4.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(10);

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        $r5 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r5.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String)>("DATA_TYPE");

        virtualinvoke $r5.<ORG.as220.tinySQL.tsColumn: void setType(int)>(2);

        virtualinvoke $r5.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(6);

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r5);

        $r6 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r6.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String)>("PRECISION");

        virtualinvoke $r6.<ORG.as220.tinySQL.tsColumn: void setType(int)>(2);

        virtualinvoke $r6.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(8);

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r6);

        $r7 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r7.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String)>("LITERAL_PREFIX");

        virtualinvoke $r7.<ORG.as220.tinySQL.tsColumn: void setType(int)>(1);

        virtualinvoke $r7.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(1);

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r7);

        $r8 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r8.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String)>("LITERAL_SUFFIX");

        virtualinvoke $r8.<ORG.as220.tinySQL.tsColumn: void setType(int)>(1);

        virtualinvoke $r8.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(1);

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r8);

        $r9 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r9.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String)>("CREATE_PARAMS");

        virtualinvoke $r9.<ORG.as220.tinySQL.tsColumn: void setType(int)>(1);

        virtualinvoke $r9.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(20);

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r9);

        $r10 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r10.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String)>("NULLABLE");

        virtualinvoke $r10.<ORG.as220.tinySQL.tsColumn: void setType(int)>(2);

        virtualinvoke $r10.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(6);

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r10);

        $r11 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r11.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String)>("CASE_SENSITIVE");

        virtualinvoke $r11.<ORG.as220.tinySQL.tsColumn: void setType(int)>(-7);

        virtualinvoke $r11.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(1);

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r11);

        $r12 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r12.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String)>("SEARCHABLE");

        virtualinvoke $r12.<ORG.as220.tinySQL.tsColumn: void setType(int)>(2);

        virtualinvoke $r12.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(6);

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r12);

        $r13 = new ORG.as220.tinySQL.tsResultSet;

        $r14 = new ORG.as220.tinySQL.tsPhysicalRow;

        specialinvoke $r14.<ORG.as220.tinySQL.tsPhysicalRow: void <init>(java.util.Vector)>($r3);

        specialinvoke $r13.<ORG.as220.tinySQL.tsResultSet: void <init>(ORG.as220.tinySQL.tsPhysicalRow)>($r14);

        r49 = virtualinvoke $r13.<ORG.as220.tinySQL.tsResultSet: ORG.as220.tinySQL.tsPhysicalRow createPhysicalRow()>();

        $i0 = virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("TYPE_NAME");

        $r15 = staticinvoke <ORG.as220.tinySQL.DBFHeader: java.lang.String typeToLiteral(int)>(1);

        virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i0, $r15);

        $i1 = virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("DATA_TYPE");

        $r16 = new java.lang.Integer;

        specialinvoke $r16.<java.lang.Integer: void <init>(int)>(1);

        virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i1, $r16);

        $i2 = virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("PRECISION");

        $r17 = new java.lang.Integer;

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>(254);

        virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i2, $r17);

        $i3 = virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("LITERAL_PREFIX");

        virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i3, "\'");

        $i4 = virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("LITERAL_SUFFIX");

        virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i4, "\'");

        $i5 = virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("CREATE_PARAMS");

        $r18 = new java.lang.Integer;

        specialinvoke $r18.<java.lang.Integer: void <init>(int)>(0);

        virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i5, $r18);

        $i6 = virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("NULLABLE");

        $r19 = new java.lang.Integer;

        specialinvoke $r19.<java.lang.Integer: void <init>(int)>(1);

        virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i6, $r19);

        $i7 = virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("CASE_SENSITIVE");

        virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i7, "Y");

        $i8 = virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("SEARCHABLE");

        $r20 = new java.lang.Integer;

        specialinvoke $r20.<java.lang.Integer: void <init>(int)>(3);

        virtualinvoke r49.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i8, $r20);

        virtualinvoke $r13.<ORG.as220.tinySQL.tsResultSet: boolean addPhysicalRow(ORG.as220.tinySQL.tsPhysicalRow)>(r49);

        r50 = virtualinvoke $r13.<ORG.as220.tinySQL.tsResultSet: ORG.as220.tinySQL.tsPhysicalRow createPhysicalRow()>();

        $i9 = virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("TYPE_NAME");

        $r21 = staticinvoke <ORG.as220.tinySQL.DBFHeader: java.lang.String typeToLiteral(int)>(2);

        virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i9, $r21);

        $i10 = virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("DATA_TYPE");

        $r22 = new java.lang.Integer;

        specialinvoke $r22.<java.lang.Integer: void <init>(int)>(6);

        virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i10, $r22);

        $i11 = virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("PRECISION");

        $r23 = new java.lang.Integer;

        specialinvoke $r23.<java.lang.Integer: void <init>(int)>(19);

        virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i11, $r23);

        $i12 = virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("LITERAL_PREFIX");

        virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i12, "");

        $i13 = virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("LITERAL_SUFFIX");

        virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i13, "");

        $i14 = virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("CREATE_PARAMS");

        $r24 = new java.lang.Integer;

        specialinvoke $r24.<java.lang.Integer: void <init>(int)>(0);

        virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i14, $r24);

        $i15 = virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("NULLABLE");

        $r25 = new java.lang.Integer;

        specialinvoke $r25.<java.lang.Integer: void <init>(int)>(1);

        virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i15, $r25);

        $i16 = virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("CASE_SENSITIVE");

        virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i16, "N");

        $i17 = virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("SEARCHABLE");

        $r26 = new java.lang.Integer;

        specialinvoke $r26.<java.lang.Integer: void <init>(int)>(3);

        virtualinvoke r50.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i17, $r26);

        virtualinvoke $r13.<ORG.as220.tinySQL.tsResultSet: boolean addPhysicalRow(ORG.as220.tinySQL.tsPhysicalRow)>(r50);

        r51 = virtualinvoke $r13.<ORG.as220.tinySQL.tsResultSet: ORG.as220.tinySQL.tsPhysicalRow createPhysicalRow()>();

        $i18 = virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("TYPE_NAME");

        $r27 = staticinvoke <ORG.as220.tinySQL.DBFHeader: java.lang.String typeToLiteral(int)>(-7);

        virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i18, $r27);

        $i19 = virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("DATA_TYPE");

        $r28 = new java.lang.Integer;

        specialinvoke $r28.<java.lang.Integer: void <init>(int)>(-7);

        virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i19, $r28);

        $i20 = virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("PRECISION");

        $r29 = new java.lang.Integer;

        specialinvoke $r29.<java.lang.Integer: void <init>(int)>(1);

        virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i20, $r29);

        $i21 = virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("LITERAL_PREFIX");

        virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i21, "");

        $i22 = virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("LITERAL_SUFFIX");

        virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i22, "");

        $i23 = virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("CREATE_PARAMS");

        $r30 = new java.lang.Integer;

        specialinvoke $r30.<java.lang.Integer: void <init>(int)>(0);

        virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i23, $r30);

        $i24 = virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("NULLABLE");

        $r31 = new java.lang.Integer;

        specialinvoke $r31.<java.lang.Integer: void <init>(int)>(1);

        virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i24, $r31);

        $i25 = virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("CASE_SENSITIVE");

        virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i25, "N");

        $i26 = virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("SEARCHABLE");

        $r32 = new java.lang.Integer;

        specialinvoke $r32.<java.lang.Integer: void <init>(int)>(3);

        virtualinvoke r51.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i26, $r32);

        virtualinvoke $r13.<ORG.as220.tinySQL.tsResultSet: boolean addPhysicalRow(ORG.as220.tinySQL.tsPhysicalRow)>(r51);

        r52 = virtualinvoke $r13.<ORG.as220.tinySQL.tsResultSet: ORG.as220.tinySQL.tsPhysicalRow createPhysicalRow()>();

        $i27 = virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("TYPE_NAME");

        $r33 = staticinvoke <ORG.as220.tinySQL.DBFHeader: java.lang.String typeToLiteral(int)>(91);

        virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i27, $r33);

        $i28 = virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("DATA_TYPE");

        $r34 = new java.lang.Integer;

        specialinvoke $r34.<java.lang.Integer: void <init>(int)>(91);

        virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i28, $r34);

        $i29 = virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("PRECISION");

        $r35 = new java.lang.Integer;

        specialinvoke $r35.<java.lang.Integer: void <init>(int)>(10);

        virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i29, $r35);

        $i30 = virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("LITERAL_PREFIX");

        virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i30, "\'");

        $i31 = virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("LITERAL_SUFFIX");

        virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i31, "\'");

        $i32 = virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("CREATE_PARAMS");

        $r36 = new java.lang.Integer;

        specialinvoke $r36.<java.lang.Integer: void <init>(int)>(0);

        virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i32, $r36);

        $i33 = virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("NULLABLE");

        $r37 = new java.lang.Integer;

        specialinvoke $r37.<java.lang.Integer: void <init>(int)>(1);

        virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i33, $r37);

        $i34 = virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("CASE_SENSITIVE");

        virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i34, "N");

        $i35 = virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("SEARCHABLE");

        $r38 = new java.lang.Integer;

        specialinvoke $r38.<java.lang.Integer: void <init>(int)>(3);

        virtualinvoke r52.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i35, $r38);

        virtualinvoke $r13.<ORG.as220.tinySQL.tsResultSet: boolean addPhysicalRow(ORG.as220.tinySQL.tsPhysicalRow)>(r52);

        $r39 = new ORG.as220.tinySQL.tinySQLResultSet;

        specialinvoke $r39.<ORG.as220.tinySQL.tinySQLResultSet: void <init>(ORG.as220.tinySQL.tsResultSet,ORG.as220.tinySQL.tinySQLStatement)>($r13, null);

        return $r39;
    }

    public java.sql.ResultSet getTables(java.lang.String, java.lang.String, java.lang.String, java.lang.String[]) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;
        java.lang.String r1, r2, r3, r4, r7, r9, $r21, r30;
        java.util.Vector r8, $r11;
        ORG.as220.tinySQL.tsPhysicalRow r10, $r18;
        ORG.as220.tinySQL.tsColumn $r12, $r13, $r14, $r15, $r16;
        ORG.as220.tinySQL.tsResultSet $r17;
        boolean $z0, $z2;
        java.lang.Object $r19;
        java.io.File $r20;
        int $i0, $i1, $i2, i3, i4, $i5, $i6, $i7, $i8;
        ORG.as220.tinySQL.textFile $r22;
        ORG.as220.tinySQL.tinySQLResultSet $r23;
        java.lang.String[] r24;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r24 := @parameter3: java.lang.String[];

        r4 = specialinvoke r0.<ORG.as220.tinySQL.textFileDatabaseMetaData: java.lang.String getDataDir()>();

        if r4 != null goto label01;

        return null;

     label01:
        if r24 != null goto label02;

        r24 = newarray (java.lang.String)[1];

        r24[0] = "TABLE";

     label02:
        $r11 = new java.util.Vector;

        specialinvoke $r11.<java.util.Vector: void <init>()>();

        $r12 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r12.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String)>("TABLE_CAT");

        virtualinvoke $r12.<ORG.as220.tinySQL.tsColumn: void setType(int)>(1);

        virtualinvoke $r12.<ORG.as220.tinySQL.tsColumn: void setDefaultValue(java.lang.Object)>("");

        virtualinvoke $r12.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(10);

        virtualinvoke $r11.<java.util.Vector: void addElement(java.lang.Object)>($r12);

        $r13 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r13.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String)>("TABLE_SCHEM");

        virtualinvoke $r13.<ORG.as220.tinySQL.tsColumn: void setType(int)>(1);

        virtualinvoke $r13.<ORG.as220.tinySQL.tsColumn: void setDefaultValue(java.lang.Object)>("");

        virtualinvoke $r13.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(10);

        virtualinvoke $r11.<java.util.Vector: void addElement(java.lang.Object)>($r13);

        $r14 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r14.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String)>("TABLE_NAME");

        virtualinvoke $r14.<ORG.as220.tinySQL.tsColumn: void setType(int)>(1);

        virtualinvoke $r14.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(250);

        virtualinvoke $r11.<java.util.Vector: void addElement(java.lang.Object)>($r14);

        $r15 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r15.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String)>("TABLE_TYPE");

        virtualinvoke $r15.<ORG.as220.tinySQL.tsColumn: void setType(int)>(1);

        virtualinvoke $r15.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(40);

        virtualinvoke $r15.<ORG.as220.tinySQL.tsColumn: void setDefaultValue(java.lang.Object)>("TABLE");

        virtualinvoke $r11.<java.util.Vector: void addElement(java.lang.Object)>($r15);

        $r16 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r16.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String)>("TABLE_REMARKS");

        virtualinvoke $r16.<ORG.as220.tinySQL.tsColumn: void setType(int)>(1);

        virtualinvoke $r16.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(254);

        virtualinvoke $r16.<ORG.as220.tinySQL.tsColumn: void setDefaultValue(java.lang.Object)>("");

        virtualinvoke $r11.<java.util.Vector: void addElement(java.lang.Object)>($r16);

        $r17 = new ORG.as220.tinySQL.tsResultSet;

        $r18 = new ORG.as220.tinySQL.tsPhysicalRow;

        specialinvoke $r18.<ORG.as220.tinySQL.tsPhysicalRow: void <init>(java.util.Vector)>($r11);

        specialinvoke $r17.<ORG.as220.tinySQL.tsResultSet: void <init>(ORG.as220.tinySQL.tsPhysicalRow)>($r18);

        i3 = 0;

        goto label13;

     label03:
        r7 = r24[i3];

        if r7 != null goto label04;

        goto label12;

     label04:
        r30 = null;

        $z0 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TABLE");

        if $z0 == 0 goto label05;

        $r22 = virtualinvoke r0.<ORG.as220.tinySQL.textFileDatabaseMetaData: ORG.as220.tinySQL.textFile getTextFileEngine()>();

        r30 = virtualinvoke $r22.<ORG.as220.tinySQL.textFile: java.lang.String getDefinitionExtension()>();

     label05:
        if r30 != null goto label06;

        goto label12;

     label06:
        r8 = staticinvoke <ORG.as220.tinySQL.Utils: java.util.Vector getAllFiles(java.lang.String,java.lang.String)>(r4, r30);

        i4 = 0;

        goto label11;

     label07:
        $r19 = virtualinvoke r8.<java.util.Vector: java.lang.Object elementAt(int)>(i4);

        $r20 = (java.io.File) $r19;

        $r21 = virtualinvoke $r20.<java.io.File: java.lang.String toString()>();

        r9 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String stripPathAndExtension(java.lang.String)>($r21);

        if r3 == null goto label08;

        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("%");

        if $z2 != 0 goto label08;

        $i2 = virtualinvoke r9.<java.lang.String: int indexOf(java.lang.String)>(r3);

        if $i2 < 0 goto label10;

     label08:
        $i5 = virtualinvoke r9.<java.lang.String: int length()>();

        $i6 = virtualinvoke $r16.<ORG.as220.tinySQL.tsColumn: int getSize()>();

        if $i5 <= $i6 goto label09;

        $i1 = virtualinvoke r9.<java.lang.String: int length()>();

        virtualinvoke $r16.<ORG.as220.tinySQL.tsColumn: void setSize(int)>($i1);

     label09:
        r10 = virtualinvoke $r17.<ORG.as220.tinySQL.tsResultSet: ORG.as220.tinySQL.tsPhysicalRow createPhysicalRow()>();

        $i0 = virtualinvoke r10.<ORG.as220.tinySQL.tsPhysicalRow: int findColumn(java.lang.String)>("TABLE_NAME");

        virtualinvoke r10.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>($i0, r9);

        virtualinvoke $r17.<ORG.as220.tinySQL.tsResultSet: boolean addPhysicalRow(ORG.as220.tinySQL.tsPhysicalRow)>(r10);

     label10:
        i4 = i4 + 1;

     label11:
        $i7 = virtualinvoke r8.<java.util.Vector: int size()>();

        if i4 < $i7 goto label07;

     label12:
        i3 = i3 + 1;

     label13:
        $i8 = lengthof r24;

        if i3 < $i8 goto label03;

        $r23 = new ORG.as220.tinySQL.tinySQLResultSet;

        specialinvoke $r23.<ORG.as220.tinySQL.tinySQLResultSet: void <init>(ORG.as220.tinySQL.tsResultSet,ORG.as220.tinySQL.tinySQLStatement)>($r17, null);

        return $r23;
    }

    public java.lang.String getDatabaseProductVersion()
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return "text-driver";
    }

    public boolean autoCommitFailureClosesAllResultSets() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return 0;
    }

    public java.sql.ResultSet getAttributes(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;
        java.lang.String r1, r2, r3, r4;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        return null;
    }

    public java.sql.ResultSet getClientInfoProperties() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return null;
    }

    public int getDatabaseMajorVersion() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return 0;
    }

    public int getDatabaseMinorVersion() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return 0;
    }

    public java.sql.ResultSet getFunctionColumns(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;
        java.lang.String r1, r2, r3, r4;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        return null;
    }

    public java.sql.ResultSet getFunctions(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;
        java.lang.String r1, r2, r3;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return null;
    }

    public int getJDBCMajorVersion() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return 0;
    }

    public int getJDBCMinorVersion() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return 0;
    }

    public int getResultSetHoldability() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return 0;
    }

    public java.sql.RowIdLifetime getRowIdLifetime() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return null;
    }

    public int getSQLStateType() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return 0;
    }

    public java.sql.ResultSet getSchemas(java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;
        java.lang.String r1, r2;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return null;
    }

    public java.sql.ResultSet getSuperTables(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;
        java.lang.String r1, r2, r3;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return null;
    }

    public java.sql.ResultSet getSuperTypes(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;
        java.lang.String r1, r2, r3;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return null;
    }

    public boolean locatorsUpdateCopy() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return 0;
    }

    public boolean supportsGetGeneratedKeys() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return 0;
    }

    public boolean supportsMultipleOpenResults() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return 0;
    }

    public boolean supportsNamedParameters() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return 0;
    }

    public boolean supportsResultSetHoldability(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean supportsSavepoints() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return 0;
    }

    public boolean supportsStatementPooling() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return 0;
    }

    public boolean supportsStoredFunctionsUsingCallSyntax() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return 0;
    }

    public boolean isWrapperFor(java.lang.Class) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;
        java.lang.Class r1;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        r1 := @parameter0: java.lang.Class;

        return 0;
    }

    public java.lang.Object unwrap(java.lang.Class) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;
        java.lang.Class r1;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        r1 := @parameter0: java.lang.Class;

        return null;
    }

    public java.sql.ResultSet getPseudoColumns(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;
        java.lang.String r1, r2, r3, r4;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        return null;
    }

    public boolean generatedKeyAlwaysReturned() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.textFileDatabaseMetaData r0;

        r0 := @this: ORG.as220.tinySQL.textFileDatabaseMetaData;

        return 0;
    }
}
