public class ORG.as220.tinySQL.tsColumn extends java.lang.Object
{
    public static final int COL_DATA;
    public static final int COL_EXPR;
    public static final int COL_INVALID;
    private ORG.as220.tinySQL.sqlparser.LValue expression;
    private java.lang.String physName;
    private java.lang.String displayName;
    private java.lang.String fqname;
    private int datatype;
    private int decimalPlaces;
    private java.lang.Object defaultVal;
    private boolean notNull;
    private int bytePos;
    private int tablePos;
    private int resultPos;
    private int size;
    private int coltype;
    private ORG.as220.tinySQL.tinySQLTableView table;

    public void <init>(ORG.as220.tinySQL.tinySQLTableView, java.lang.String, java.lang.String)
    {
        ORG.as220.tinySQL.tsColumn r0;
        ORG.as220.tinySQL.tinySQLTableView r1;
        java.lang.String r2, r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLTableView;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String physName> = null;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String displayName> = null;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String fqname> = null;

        r0.<ORG.as220.tinySQL.tsColumn: int datatype> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int decimalPlaces> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.Object defaultVal> = null;

        r0.<ORG.as220.tinySQL.tsColumn: boolean notNull> = 0;

        r0.<ORG.as220.tinySQL.tsColumn: int bytePos> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int tablePos> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int resultPos> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int size> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int coltype> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView table> = null;

        if r2 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Name must not be null");

        throw $r5;

     label1:
        $i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(46);

        if $i0 == -1 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView table> = r1;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String physName> = r2;

        if r3 != null goto label3;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String displayName> = r2;

        goto label4;

     label3:
        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String displayName> = r3;

     label4:
        r0.<ORG.as220.tinySQL.tsColumn: int coltype> = 0;

        return;
    }

    public void <init>(ORG.as220.tinySQL.tinySQLTableView, java.lang.String)
    {
        ORG.as220.tinySQL.tsColumn r0;
        ORG.as220.tinySQL.tinySQLTableView r1;
        java.lang.String r2;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLTableView;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<ORG.as220.tinySQL.tsColumn: void <init>(ORG.as220.tinySQL.tinySQLTableView,java.lang.String,java.lang.String)>(r1, r2, null);

        return;
    }

    public void <init>(java.lang.String, ORG.as220.tinySQL.sqlparser.LValue)
    {
        ORG.as220.tinySQL.tsColumn r0;
        java.lang.String r1;
        ORG.as220.tinySQL.sqlparser.LValue r2;
        java.lang.NullPointerException $r3;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: ORG.as220.tinySQL.sqlparser.LValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String physName> = null;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String displayName> = null;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String fqname> = null;

        r0.<ORG.as220.tinySQL.tsColumn: int datatype> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int decimalPlaces> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.Object defaultVal> = null;

        r0.<ORG.as220.tinySQL.tsColumn: boolean notNull> = 0;

        r0.<ORG.as220.tinySQL.tsColumn: int bytePos> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int tablePos> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int resultPos> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int size> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int coltype> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView table> = null;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Name must not be null");

        throw $r3;

     label1:
        r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.sqlparser.LValue expression> = r2;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String physName> = r1;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String displayName> = r1;

        r0.<ORG.as220.tinySQL.tsColumn: int coltype> = 1;

        return;
    }

    public void <init>(java.lang.String)
    {
        ORG.as220.tinySQL.tsColumn r0;
        java.lang.String r1;
        java.lang.NullPointerException $r2;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String physName> = null;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String displayName> = null;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String fqname> = null;

        r0.<ORG.as220.tinySQL.tsColumn: int datatype> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int decimalPlaces> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.Object defaultVal> = null;

        r0.<ORG.as220.tinySQL.tsColumn: boolean notNull> = 0;

        r0.<ORG.as220.tinySQL.tsColumn: int bytePos> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int tablePos> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int resultPos> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int size> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int coltype> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView table> = null;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Name must not be null");

        throw $r2;

     label1:
        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String physName> = r1;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String displayName> = r1;

        r0.<ORG.as220.tinySQL.tsColumn: int coltype> = -1;

        return;
    }

    public void <init>(ORG.as220.tinySQL.tsColumn)
    {
        ORG.as220.tinySQL.tsColumn r0, r1;
        java.lang.String $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object $r4;
        boolean $z0;
        ORG.as220.tinySQL.tinySQLTableView $r5;
        java.lang.NullPointerException $r6;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String physName> = null;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String displayName> = null;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String fqname> = null;

        r0.<ORG.as220.tinySQL.tsColumn: int datatype> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int decimalPlaces> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.Object defaultVal> = null;

        r0.<ORG.as220.tinySQL.tsColumn: boolean notNull> = 0;

        r0.<ORG.as220.tinySQL.tsColumn: int bytePos> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int tablePos> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int resultPos> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int size> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: int coltype> = -1;

        r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView table> = null;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Name was null?");

        throw $r6;

     label1:
        $r2 = r1.<ORG.as220.tinySQL.tsColumn: java.lang.String physName>;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String physName> = $r2;

        $r3 = r1.<ORG.as220.tinySQL.tsColumn: java.lang.String displayName>;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String displayName> = $r3;

        $i0 = r1.<ORG.as220.tinySQL.tsColumn: int coltype>;

        r0.<ORG.as220.tinySQL.tsColumn: int coltype> = $i0;

        $i1 = r1.<ORG.as220.tinySQL.tsColumn: int datatype>;

        r0.<ORG.as220.tinySQL.tsColumn: int datatype> = $i1;

        $i2 = r1.<ORG.as220.tinySQL.tsColumn: int decimalPlaces>;

        r0.<ORG.as220.tinySQL.tsColumn: int decimalPlaces> = $i2;

        $r4 = r1.<ORG.as220.tinySQL.tsColumn: java.lang.Object defaultVal>;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.Object defaultVal> = $r4;

        $z0 = r1.<ORG.as220.tinySQL.tsColumn: boolean notNull>;

        r0.<ORG.as220.tinySQL.tsColumn: boolean notNull> = $z0;

        $i3 = r1.<ORG.as220.tinySQL.tsColumn: int size>;

        r0.<ORG.as220.tinySQL.tsColumn: int size> = $i3;

        $r5 = r1.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView table>;

        r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView table> = $r5;

        $i4 = r1.<ORG.as220.tinySQL.tsColumn: int tablePos>;

        r0.<ORG.as220.tinySQL.tsColumn: int tablePos> = $i4;

        $i5 = r1.<ORG.as220.tinySQL.tsColumn: int bytePos>;

        r0.<ORG.as220.tinySQL.tsColumn: int bytePos> = $i5;

        $i6 = r1.<ORG.as220.tinySQL.tsColumn: int resultPos>;

        r0.<ORG.as220.tinySQL.tsColumn: int resultPos> = $i6;

        return;
    }

    public void <init>(ORG.as220.tinySQL.tinySQLTableView, ORG.as220.tinySQL.tsColumn)
    {
        ORG.as220.tinySQL.tsColumn r0, r2;
        ORG.as220.tinySQL.tinySQLTableView r1;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLTableView;

        r2 := @parameter1: ORG.as220.tinySQL.tsColumn;

        specialinvoke r0.<ORG.as220.tinySQL.tsColumn: void <init>(ORG.as220.tinySQL.tsColumn)>(r2);

        r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView table> = r1;

        return;
    }

    public void setAll(ORG.as220.tinySQL.tsColumn)
    {
        ORG.as220.tinySQL.tsColumn r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        $i0 = r1.<ORG.as220.tinySQL.tsColumn: int coltype>;

        r0.<ORG.as220.tinySQL.tsColumn: int coltype> = $i0;

        $i1 = r1.<ORG.as220.tinySQL.tsColumn: int datatype>;

        r0.<ORG.as220.tinySQL.tsColumn: int datatype> = $i1;

        $i2 = r1.<ORG.as220.tinySQL.tsColumn: int decimalPlaces>;

        r0.<ORG.as220.tinySQL.tsColumn: int decimalPlaces> = $i2;

        $r2 = r1.<ORG.as220.tinySQL.tsColumn: java.lang.Object defaultVal>;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.Object defaultVal> = $r2;

        $z0 = r1.<ORG.as220.tinySQL.tsColumn: boolean notNull>;

        r0.<ORG.as220.tinySQL.tsColumn: boolean notNull> = $z0;

        $i3 = r1.<ORG.as220.tinySQL.tsColumn: int size>;

        r0.<ORG.as220.tinySQL.tsColumn: int size> = $i3;

        $i4 = r1.<ORG.as220.tinySQL.tsColumn: int tablePos>;

        r0.<ORG.as220.tinySQL.tsColumn: int tablePos> = $i4;

        $i5 = r1.<ORG.as220.tinySQL.tsColumn: int bytePos>;

        r0.<ORG.as220.tinySQL.tsColumn: int bytePos> = $i5;

        $i6 = r1.<ORG.as220.tinySQL.tsColumn: int resultPos>;

        r0.<ORG.as220.tinySQL.tsColumn: int resultPos> = $i6;

        return;
    }

    public java.lang.String getPhysicalName()
    {
        ORG.as220.tinySQL.tsColumn r0;
        java.lang.String $r1;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        $r1 = r0.<ORG.as220.tinySQL.tsColumn: java.lang.String physName>;

        return $r1;
    }

    public java.lang.String getDisplayName()
    {
        ORG.as220.tinySQL.tsColumn r0;
        java.lang.String $r1;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        $r1 = r0.<ORG.as220.tinySQL.tsColumn: java.lang.String displayName>;

        return $r1;
    }

    public java.lang.String getFQName()
    {
        ORG.as220.tinySQL.tsColumn r0;
        ORG.as220.tinySQL.tinySQLTableView $r1;
        java.lang.String $r2, $r3;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        $r2 = r0.<ORG.as220.tinySQL.tsColumn: java.lang.String physName>;

        $r1 = r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView table>;

        $r3 = specialinvoke r0.<ORG.as220.tinySQL.tsColumn: java.lang.String formColname(java.lang.String,ORG.as220.tinySQL.tinySQLTableView)>($r2, $r1);

        return $r3;
    }

    public void setPhysicalName(java.lang.String)
    {
        ORG.as220.tinySQL.tsColumn r0;
        java.lang.String r1;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        r1 := @parameter0: java.lang.String;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String physName> = r1;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String fqname> = null;

        r0.<ORG.as220.tinySQL.tsColumn: int coltype> = -1;

        return;
    }

    public java.lang.Object getDefaultValue()
    {
        ORG.as220.tinySQL.tsColumn r0;
        java.lang.Object $r1;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        $r1 = r0.<ORG.as220.tinySQL.tsColumn: java.lang.Object defaultVal>;

        return $r1;
    }

    public void setDefaultValue(java.lang.Object)
    {
        ORG.as220.tinySQL.tsColumn r0;
        java.lang.Object r1;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        r1 := @parameter0: java.lang.Object;

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.Object defaultVal> = r1;

        return;
    }

    public void setType(int)
    {
        ORG.as220.tinySQL.tsColumn r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        i0 := @parameter0: int;

        r0.<ORG.as220.tinySQL.tsColumn: int datatype> = i0;

        return;
    }

    public int getType()
    {
        ORG.as220.tinySQL.tsColumn r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        $i0 = r0.<ORG.as220.tinySQL.tsColumn: int datatype>;

        return $i0;
    }

    public boolean isNullable()
    {
        ORG.as220.tinySQL.tsColumn r0;
        boolean $z0, $z1;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        $z0 = r0.<ORG.as220.tinySQL.tsColumn: boolean notNull>;

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        return $z1;
    }

    public void setNullable(boolean)
    {
        ORG.as220.tinySQL.tsColumn r0;
        boolean z0;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        z0 := @parameter0: boolean;

        r0.<ORG.as220.tinySQL.tsColumn: boolean notNull> = z0;

        return;
    }

    public void setSize(int)
    {
        ORG.as220.tinySQL.tsColumn r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Size must be >= 0");

        throw $r1;

     label1:
        r0.<ORG.as220.tinySQL.tsColumn: int size> = i0;

        r0.<ORG.as220.tinySQL.tsColumn: int decimalPlaces> = 0;

        return;
    }

    public void setSize(int, int)
    {
        ORG.as220.tinySQL.tsColumn r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1, $r8;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Size must be >= 0");

        throw $r8;

     label1:
        if i1 < i0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Decimals [");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] must be < than size [");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label2:
        r0.<ORG.as220.tinySQL.tsColumn: int size> = i0;

        r0.<ORG.as220.tinySQL.tsColumn: int decimalPlaces> = i1;

        return;
    }

    public int getSize()
    {
        ORG.as220.tinySQL.tsColumn r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        $i0 = r0.<ORG.as220.tinySQL.tsColumn: int size>;

        return $i0;
    }

    public int getDecimalPlaces()
    {
        ORG.as220.tinySQL.tsColumn r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        $i0 = r0.<ORG.as220.tinySQL.tsColumn: int decimalPlaces>;

        return $i0;
    }

    public void setResultPosition(int)
    {
        ORG.as220.tinySQL.tsColumn r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        i0 := @parameter0: int;

        r0.<ORG.as220.tinySQL.tsColumn: int resultPos> = i0;

        return;
    }

    public int getResultPosition()
    {
        ORG.as220.tinySQL.tsColumn r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        $i0 = r0.<ORG.as220.tinySQL.tsColumn: int resultPos>;

        return $i0;
    }

    public void setBytePosition(int)
    {
        ORG.as220.tinySQL.tsColumn r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        i0 := @parameter0: int;

        r0.<ORG.as220.tinySQL.tsColumn: int bytePos> = i0;

        return;
    }

    public int getBytePosition()
    {
        ORG.as220.tinySQL.tsColumn r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        $i0 = r0.<ORG.as220.tinySQL.tsColumn: int bytePos>;

        return $i0;
    }

    public int getTablePosition()
    {
        ORG.as220.tinySQL.tsColumn r0;
        ORG.as220.tinySQL.tinySQLTableView $r1, $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        $r1 = r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView table>;

        if $r1 != null goto label1;

        return -1;

     label1:
        $i0 = r0.<ORG.as220.tinySQL.tsColumn: int tablePos>;

        if $i0 != -1 goto label2;

        $r2 = r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView table>;

        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.tsColumn: java.lang.String getPhysicalName()>();

        $i2 = virtualinvoke $r2.<ORG.as220.tinySQL.tinySQLTableView: int findColumn(java.lang.String)>($r3);

        r0.<ORG.as220.tinySQL.tsColumn: int tablePos> = $i2;

     label2:
        $i1 = r0.<ORG.as220.tinySQL.tsColumn: int tablePos>;

        return $i1;
    }

    public void setTablePosition(int)
    {
        ORG.as220.tinySQL.tsColumn r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        i0 := @parameter0: int;

        r0.<ORG.as220.tinySQL.tsColumn: int tablePos> = i0;

        return;
    }

    public java.lang.String toString()
    {
        ORG.as220.tinySQL.tsColumn r0;
        java.lang.StringBuffer $r2;
        java.lang.String $r4, $r7, $r11, $r15, $r19, $r24, $r28, $r32, $r35;
        java.lang.StringBuilder $r9, $r10, $r13, $r14, $r17, $r18, $r21, $r22, $r23, $r26, $r27, $r30, $r31;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("tsColumn:={FQName =");

        $r4 = virtualinvoke r0.<ORG.as220.tinySQL.tsColumn: java.lang.String getFQName()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", display_name=");

        $r7 = r0.<ORG.as220.tinySQL.tsColumn: java.lang.String displayName>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>(", tablepos=");

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tsColumn: int getTablePosition()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>(", bytepos=");

        $i1 = virtualinvoke r0.<ORG.as220.tinySQL.tsColumn: int getBytePosition()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(", size= (");

        $i2 = r0.<ORG.as220.tinySQL.tsColumn: int size>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>(",");

        $i3 = r0.<ORG.as220.tinySQL.tsColumn: int decimalPlaces>;

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>(", type=");

        $i4 = r0.<ORG.as220.tinySQL.tsColumn: int datatype>;

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>(", coltype=");

        $i5 = r0.<ORG.as220.tinySQL.tsColumn: int coltype>;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        $r35 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r35;
    }

    public int getColumnType()
    {
        ORG.as220.tinySQL.tsColumn r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        $i0 = r0.<ORG.as220.tinySQL.tsColumn: int coltype>;

        return $i0;
    }

    public ORG.as220.tinySQL.tinySQLTableView getTable()
    {
        ORG.as220.tinySQL.tsColumn r0;
        ORG.as220.tinySQL.tinySQLTableView $r1;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        $r1 = r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView table>;

        return $r1;
    }

    public ORG.as220.tinySQL.sqlparser.LValue getExpression()
    {
        ORG.as220.tinySQL.tsColumn r0;
        ORG.as220.tinySQL.sqlparser.LValue $r1;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        $r1 = r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.sqlparser.LValue expression>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        ORG.as220.tinySQL.tsColumn r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3, $r4, $r13, $r14;
        ORG.as220.tinySQL.tinySQLTableView $r5, $r6, $r7;
        ORG.as220.tinySQL.sqlparser.LValue $r8, $r9, $r10, $r11, $r12;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof ORG.as220.tinySQL.tsColumn;

        if $z0 == 0 goto label9;

        r2 = (ORG.as220.tinySQL.tsColumn) r1;

        $i0 = virtualinvoke r2.<ORG.as220.tinySQL.tsColumn: int getColumnType()>();

        $i1 = virtualinvoke r0.<ORG.as220.tinySQL.tsColumn: int getColumnType()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r3 = r0.<ORG.as220.tinySQL.tsColumn: java.lang.String physName>;

        if $r3 == null goto label2;

        $r14 = r2.<ORG.as220.tinySQL.tsColumn: java.lang.String physName>;

        if $r14 != null goto label2;

        return 0;

     label2:
        $r4 = r0.<ORG.as220.tinySQL.tsColumn: java.lang.String physName>;

        if $r4 != null goto label3;

        $r13 = r2.<ORG.as220.tinySQL.tsColumn: java.lang.String physName>;

        if $r13 == null goto label3;

        return 0;

     label3:
        $r5 = virtualinvoke r2.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView getTable()>();

        if $r5 != null goto label7;

        $r7 = virtualinvoke r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView getTable()>();

        if $r7 == null goto label4;

        return 0;

     label4:
        $r8 = virtualinvoke r2.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.sqlparser.LValue getExpression()>();

        if $r8 != null goto label5;

        $r12 = virtualinvoke r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.sqlparser.LValue getExpression()>();

        if $r12 != null goto label9;

        return 1;

     label5:
        $r9 = virtualinvoke r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.sqlparser.LValue getExpression()>();

        if $r9 != null goto label6;

        return 0;

     label6:
        $r10 = virtualinvoke r2.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.sqlparser.LValue getExpression()>();

        $r11 = virtualinvoke r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.sqlparser.LValue getExpression()>();

        $z1 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        return $z1;

     label7:
        $r6 = virtualinvoke r0.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView getTable()>();

        if $r6 != null goto label8;

        return 0;

     label8:
        $i2 = virtualinvoke r0.<ORG.as220.tinySQL.tsColumn: int getTablePosition()>();

        $i3 = virtualinvoke r2.<ORG.as220.tinySQL.tsColumn: int getTablePosition()>();

        if $i2 != $i3 goto label9;

        return 1;

     label9:
        return 0;
    }

    public boolean isValidName(java.lang.String)
    {
        ORG.as220.tinySQL.tsColumn r0;
        java.lang.String r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tsColumn: java.lang.String getPhysicalName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.tsColumn: java.lang.String getDisplayName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $r4 = virtualinvoke r0.<ORG.as220.tinySQL.tsColumn: java.lang.String getFQName()>();

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private java.lang.String formColname(java.lang.String, ORG.as220.tinySQL.tinySQLTableView)
    {
        ORG.as220.tinySQL.tsColumn r0;
        java.lang.String r1, $r3, $r4, $r6, $r7, $r10;
        ORG.as220.tinySQL.tinySQLTableView r2;
        java.lang.StringBuilder $r5, $r8, $r9;

        r0 := @this: ORG.as220.tinySQL.tsColumn;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: ORG.as220.tinySQL.tinySQLTableView;

        if r2 != null goto label1;

        return r1;

     label1:
        $r3 = r0.<ORG.as220.tinySQL.tsColumn: java.lang.String fqname>;

        if $r3 != null goto label2;

        $r5 = new java.lang.StringBuilder;

        $r6 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String getName()>();

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<ORG.as220.tinySQL.tsColumn: java.lang.String fqname> = $r10;

     label2:
        $r4 = r0.<ORG.as220.tinySQL.tsColumn: java.lang.String fqname>;

        return $r4;
    }

    public static void <clinit>()
    {
        <ORG.as220.tinySQL.tsColumn: int COL_INVALID> = -1;

        <ORG.as220.tinySQL.tsColumn: int COL_EXPR> = 1;

        <ORG.as220.tinySQL.tsColumn: int COL_DATA> = 0;

        return;
    }
}
