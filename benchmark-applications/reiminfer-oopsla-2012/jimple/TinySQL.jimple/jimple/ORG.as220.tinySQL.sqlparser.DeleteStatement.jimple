public class ORG.as220.tinySQL.sqlparser.DeleteStatement extends java.lang.Object implements ORG.as220.tinySQL.sqlparser.ConditionalStatement
{
    private ORG.as220.tinySQL.tinySQL db;
    private int limit;
    private ORG.as220.tinySQL.tinySQLTableView table;
    private ORG.as220.tinySQL.sqlparser.WhereClause whereC;
    private int updatecount;

    public void <init>(ORG.as220.tinySQL.tinySQLStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.DeleteStatement r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        java.sql.Connection $r2;
        ORG.as220.tinySQL.tinySQL $r3;
        ORG.as220.tinySQL.sqlparser.WhereClause $r4;
        java.sql.SQLException $r5;
        ORG.as220.tinySQL.tinySQLException $r6;
        ORG.as220.tinySQL.tinySQLConnection r7;

        r0 := @this: ORG.as220.tinySQL.sqlparser.DeleteStatement;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r2 = virtualinvoke r1.<ORG.as220.tinySQL.tinySQLStatement: java.sql.Connection getConnection()>();

        r7 = (ORG.as220.tinySQL.tinySQLConnection) $r2;

        $r3 = virtualinvoke r7.<ORG.as220.tinySQL.tinySQLConnection: ORG.as220.tinySQL.tinySQL getTinySqlHandle()>();

        r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.tinySQL db> = $r3;

        $r4 = new ORG.as220.tinySQL.sqlparser.WhereClause;

        specialinvoke $r4.<ORG.as220.tinySQL.sqlparser.WhereClause: void <init>(ORG.as220.tinySQL.sqlparser.ConditionalStatement)>(r0);

        r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.sqlparser.WhereClause whereC> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r6.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Unable to resolve connection", $r5);

        throw $r6;

     label4:
        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public ORG.as220.tinySQL.tinySQLTableView getTable()
    {
        ORG.as220.tinySQL.sqlparser.DeleteStatement r0;
        ORG.as220.tinySQL.tinySQLTableView $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.DeleteStatement;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.tinySQLTableView table>;

        return $r1;
    }

    public java.util.Enumeration getTables()
    {
        ORG.as220.tinySQL.sqlparser.DeleteStatement r0;
        java.util.Vector $r2;
        ORG.as220.tinySQL.tinySQLTableView $r3;
        java.util.Enumeration $r4;

        r0 := @this: ORG.as220.tinySQL.sqlparser.DeleteStatement;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        $r3 = r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.tinySQLTableView table>;

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>($r3);

        $r4 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

        return $r4;
    }

    public void setTable(java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.DeleteStatement r0;
        java.lang.String r1;
        ORG.as220.tinySQL.tinySQL $r2;
        ORG.as220.tinySQL.tinySQLTableView $r3;

        r0 := @this: ORG.as220.tinySQL.sqlparser.DeleteStatement;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.tinySQL getDatabase()>();

        $r3 = virtualinvoke $r2.<ORG.as220.tinySQL.tinySQL: ORG.as220.tinySQL.tinySQLTableView getTable(java.lang.String)>(r1);

        r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.tinySQLTableView table> = $r3;

        return;
    }

    public void setWhereClause(ORG.as220.tinySQL.sqlparser.WhereClause) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.DeleteStatement r0;
        ORG.as220.tinySQL.sqlparser.WhereClause r1;
        java.lang.NullPointerException $r2;

        r0 := @this: ORG.as220.tinySQL.sqlparser.DeleteStatement;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.WhereClause;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.sqlparser.WhereClause whereC> = r1;

        return;
    }

    public ORG.as220.tinySQL.sqlparser.WhereClause getWhereClause()
    {
        ORG.as220.tinySQL.sqlparser.DeleteStatement r0;
        ORG.as220.tinySQL.sqlparser.WhereClause $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.DeleteStatement;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.sqlparser.WhereClause whereC>;

        return $r1;
    }

    public int getLimit()
    {
        ORG.as220.tinySQL.sqlparser.DeleteStatement r0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.DeleteStatement;

        return -1;
    }

    public ORG.as220.tinySQL.tinySQL getDatabase() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.DeleteStatement r0;
        ORG.as220.tinySQL.tinySQL $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.DeleteStatement;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.tinySQL db>;

        return $r1;
    }

    public boolean execute() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.DeleteStatement r0;
        java.util.Vector r1;
        ORG.as220.tinySQL.sqlparser.ParameterValue r2;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r3;
        boolean $z0;
        ORG.as220.tinySQL.tinySQLException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r12;
        java.lang.String $r8, $r13;
        ORG.as220.tinySQL.tinySQLTableView $r9;
        java.io.PrintStream $r11;
        ORG.as220.tinySQL.tinySQL $r14;

        r0 := @this: ORG.as220.tinySQL.sqlparser.DeleteStatement;

        r1 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: java.util.Vector getParameters()>();

        i3 = 0;

        goto label3;

     label1:
        $r3 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r2 = (ORG.as220.tinySQL.sqlparser.ParameterValue) $r3;

        $z0 = virtualinvoke r2.<ORG.as220.tinySQL.sqlparser.ParameterValue: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r4 = new ORG.as220.tinySQL.tinySQLException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Parameter ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not yet set");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        i3 = i3 + 1;

     label3:
        $i0 = virtualinvoke r1.<java.util.Vector: int size()>();

        if i3 < $i0 goto label1;

        $r9 = r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.tinySQLTableView table>;

        if $r9 == null goto label4;

        $r14 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.tinySQL getDatabase()>();

        $i2 = virtualinvoke $r14.<ORG.as220.tinySQL.tinySQL: int DeleteStatement(ORG.as220.tinySQL.sqlparser.DeleteStatement)>(r0);

        r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: int updatecount> = $i2;

     label4:
        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("On DELETE: UpdateCount was ");

        $i1 = r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: int updatecount>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r13);

        return 0;
    }

    public int getUpdateCount() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.DeleteStatement r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.DeleteStatement;

        $i0 = r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: int updatecount>;

        return $i0;
    }

    public ORG.as220.tinySQL.tinySQLResultSet getResultSet() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.DeleteStatement r0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.DeleteStatement;

        return null;
    }

    public boolean getMoreResults() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.DeleteStatement r0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.DeleteStatement;

        return 0;
    }

    public java.lang.String toString()
    {
        ORG.as220.tinySQL.sqlparser.DeleteStatement r0;
        java.lang.StringBuffer $r2;
        ORG.as220.tinySQL.tinySQLTableView $r4;
        ORG.as220.tinySQL.sqlparser.WhereClause $r7;
        java.lang.String $r9;

        r0 := @this: ORG.as220.tinySQL.sqlparser.DeleteStatement;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DELETE FROM ");

        $r4 = r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.tinySQLTableView table>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r7 = r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.sqlparser.WhereClause whereC>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    public java.util.Vector getParameters()
    {
        ORG.as220.tinySQL.sqlparser.DeleteStatement r0;
        ORG.as220.tinySQL.sqlparser.WhereClause $r1;
        java.util.Vector $r2;

        r0 := @this: ORG.as220.tinySQL.sqlparser.DeleteStatement;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.sqlparser.WhereClause whereC>;

        $r2 = virtualinvoke $r1.<ORG.as220.tinySQL.sqlparser.WhereClause: java.util.Vector getParameters()>();

        return $r2;
    }
}
