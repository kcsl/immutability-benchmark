public class ORG.as220.tinySQL.tinySQLResultSet extends java.lang.Object implements java.sql.ResultSet
{
    private ORG.as220.tinySQL.tinySQLStatement statement;
    private ORG.as220.tinySQL.tsResultSet result;
    private ORG.as220.tinySQL.tsResultRow current_row;
    private int current_row_index;
    private ORG.as220.tinySQL.tinySQLResultSetMetaData meta;

    public void <init>(ORG.as220.tinySQL.tsResultSet, ORG.as220.tinySQL.tinySQLStatement)
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        ORG.as220.tinySQL.tsResultSet r1;
        ORG.as220.tinySQL.tinySQLStatement r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: ORG.as220.tinySQL.tsResultSet;

        r2 := @parameter1: ORG.as220.tinySQL.tinySQLStatement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ORG.as220.tinySQL.tinySQLResultSet: int current_row_index> = -1;

        r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tsResultSet result> = r1;

        r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tinySQLStatement statement> = r2;

        if r2 == null goto label1;

        virtualinvoke r2.<ORG.as220.tinySQL.tinySQLStatement: void onCreateResultSet(ORG.as220.tinySQL.tinySQLResultSet)>(r0);

     label1:
        return;
    }

    public synchronized boolean next() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        ORG.as220.tinySQL.tsResultSet $r2, $r3, $r5;
        ORG.as220.tinySQL.tsResultRow $r4;
        java.lang.Exception $r6;
        ORG.as220.tinySQL.tinySQLException $r7;
        java.lang.String $r8;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

     label1:
        $i0 = r0.<ORG.as220.tinySQL.tinySQLResultSet: int current_row_index>;

        $i1 = $i0 + 1;

        r0.<ORG.as220.tinySQL.tinySQLResultSet: int current_row_index> = $i1;

        $i2 = r0.<ORG.as220.tinySQL.tinySQLResultSet: int current_row_index>;

        $r2 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tsResultSet result>;

        $i3 = virtualinvoke $r2.<ORG.as220.tinySQL.tsResultSet: int getResultSize()>();

        if $i2 != $i3 goto label3;

     label2:
        return 0;

     label3:
        $r3 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tsResultSet result>;

        $i4 = r0.<ORG.as220.tinySQL.tinySQLResultSet: int current_row_index>;

        $r4 = virtualinvoke $r3.<ORG.as220.tinySQL.tsResultSet: ORG.as220.tinySQL.tsResultRow getResultRowAt(int)>($i4);

        r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tsResultRow current_row> = $r4;

        $i5 = r0.<ORG.as220.tinySQL.tinySQLResultSet: int current_row_index>;

        $r5 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tsResultSet result>;

        $i6 = virtualinvoke $r5.<ORG.as220.tinySQL.tsResultSet: int getResultSize()>();

        if $i5 != $i6 goto label5;

     label4:
        return 0;

     label5:
        return 1;

     label6:
        $r6 := @caughtexception;

        $r7 = new ORG.as220.tinySQL.tinySQLException;

        $r8 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r7.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>($r8, $r6);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Exception from label3 to label4 with label6;
    }

    public void close() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        ORG.as220.tinySQL.tsResultSet $r1;
        ORG.as220.tinySQL.tinySQLStatement $r2, $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tsResultSet result>;

        virtualinvoke $r1.<ORG.as220.tinySQL.tsResultSet: void close()>();

        $r2 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tinySQLStatement statement>;

        if $r2 == null goto label1;

        $r3 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tinySQLStatement statement>;

        virtualinvoke $r3.<ORG.as220.tinySQL.tinySQLStatement: void onCloseResultSet(ORG.as220.tinySQL.tinySQLResultSet)>(r0);

     label1:
        return;
    }

    public boolean wasNull() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return 0;
    }

    public java.lang.String getString(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.lang.String $r1;
        java.lang.Exception $r2;
        ORG.as220.tinySQL.tinySQLException $r3;
        java.lang.Object r4;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

     label1:
        r4 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int)>(i0);

        $r1 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.lang.String convertToString(java.lang.Object)>(r4);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Error in getString ():", $r2);

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public byte getByte(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.math.BigDecimal r1;
        byte $b1;
        java.lang.Exception $r2;
        ORG.as220.tinySQL.tinySQLException $r3;
        java.lang.Object r4;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

     label1:
        r4 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int)>(i0);

        if r4 != null goto label3;

     label2:
        return 0;

     label3:
        r1 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.math.BigDecimal convertToNumber(java.lang.Object)>(r4);

        if r1 != null goto label5;

     label4:
        return 0;

     label5:
        $b1 = virtualinvoke r1.<java.lang.Number: byte byteValue()>();

     label6:
        return $b1;

     label7:
        $r2 := @caughtexception;

        $r3 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Unable to convert to byte", $r2);

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public boolean getBoolean(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.lang.Boolean r1;
        boolean $z0;
        java.lang.Exception $r2;
        java.sql.SQLException $r3;
        java.lang.String $r4;
        java.lang.Object r5;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

     label1:
        r5 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int)>(i0);

        r1 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.lang.Boolean convertToBoolean(java.lang.Object)>(r5);

        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.sql.SQLException;

        $r4 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public short getShort(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.math.BigDecimal r1;
        short $s1;
        java.lang.Exception $r2;
        ORG.as220.tinySQL.tinySQLException $r3;
        java.lang.Object r4;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

     label1:
        r4 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int)>(i0);

        if r4 != null goto label3;

     label2:
        return 0;

     label3:
        r1 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.math.BigDecimal convertToNumber(java.lang.Object)>(r4);

        if r1 != null goto label5;

     label4:
        return 0;

     label5:
        $s1 = virtualinvoke r1.<java.lang.Number: short shortValue()>();

     label6:
        return $s1;

     label7:
        $r2 := @caughtexception;

        $r3 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Unable to convert to short", $r2);

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public int getInt(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0, $i1;
        java.math.BigDecimal r1;
        java.lang.Exception $r2;
        ORG.as220.tinySQL.tinySQLException $r3;
        java.lang.Object r4;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

     label1:
        r4 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int)>(i0);

        if r4 != null goto label3;

     label2:
        return 0;

     label3:
        r1 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.math.BigDecimal convertToNumber(java.lang.Object)>(r4);

        if r1 != null goto label5;

     label4:
        return 0;

     label5:
        $i1 = virtualinvoke r1.<java.lang.Number: int intValue()>();

     label6:
        return $i1;

     label7:
        $r2 := @caughtexception;

        $r3 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Unable to convert to integer", $r2);

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public long getLong(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.math.BigDecimal r1;
        long $l1;
        java.lang.Exception $r2;
        ORG.as220.tinySQL.tinySQLException $r3;
        java.lang.Object r4;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

     label1:
        r4 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int)>(i0);

        if r4 != null goto label3;

     label2:
        return 0L;

     label3:
        r1 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.math.BigDecimal convertToNumber(java.lang.Object)>(r4);

        if r1 != null goto label5;

     label4:
        return 0L;

     label5:
        $l1 = virtualinvoke r1.<java.lang.Number: long longValue()>();

     label6:
        return $l1;

     label7:
        $r2 := @caughtexception;

        $r3 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Unable to convert to long", $r2);

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public float getFloat(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.math.BigDecimal r1;
        float $f0;
        java.lang.Exception $r2;
        ORG.as220.tinySQL.tinySQLException $r3;
        java.lang.Object r4;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

     label1:
        r4 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int)>(i0);

        if r4 != null goto label3;

     label2:
        return 0.0F;

     label3:
        r1 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.math.BigDecimal convertToNumber(java.lang.Object)>(r4);

        if r1 != null goto label5;

     label4:
        return 0.0F;

     label5:
        $f0 = virtualinvoke r1.<java.lang.Number: float floatValue()>();

     label6:
        return $f0;

     label7:
        $r2 := @caughtexception;

        $r3 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Unable to convert to float", $r2);

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public double getDouble(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.math.BigDecimal r1;
        double $d0;
        java.lang.Exception $r2;
        ORG.as220.tinySQL.tinySQLException $r3;
        java.lang.Object r4;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

     label1:
        r4 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int)>(i0);

        if r4 != null goto label3;

     label2:
        return 0.0;

     label3:
        r1 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.math.BigDecimal convertToNumber(java.lang.Object)>(r4);

        if r1 != null goto label5;

     label4:
        return 0.0;

     label5:
        $d0 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

     label6:
        return $d0;

     label7:
        $r2 := @caughtexception;

        $r3 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Unable to convert to double", $r2);

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public java.math.BigDecimal getBigDecimal(int, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0, i1;
        java.math.BigDecimal r1, $r2;
        java.lang.Exception $r3;
        ORG.as220.tinySQL.tinySQLException $r4;
        java.lang.Object r5;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        r5 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int)>(i0);

        if r5 != null goto label3;

     label2:
        return null;

     label3:
        r1 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.math.BigDecimal convertToNumber(java.lang.Object)>(r5);

        if r1 != null goto label5;

     label4:
        return null;

     label5:
        $r2 = virtualinvoke r1.<java.math.BigDecimal: java.math.BigDecimal setScale(int)>(i1);

     label6:
        return $r2;

     label7:
        $r3 := @caughtexception;

        $r4 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r4.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Unable to convert to BigDecimal", $r3);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public byte[] getBytes(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.lang.String r1;
        byte[] $r3;
        java.io.UnsupportedEncodingException $r4;
        ORG.as220.tinySQL.tinySQLException $r5;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.String getString(int)>(i0);

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>(r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r5.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Bad bytes!: ", $r4);

        throw $r5;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public java.sql.Date getDate(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.lang.Object r1;
        java.sql.Date r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int)>(i0);

        if r1 != null goto label1;

        return null;

     label1:
        r2 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.sql.Date convertToDate(java.lang.Object)>(r1);

        if r2 != null goto label2;

        return null;

     label2:
        return r2;
    }

    public java.sql.Time getTime(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.lang.Object r1;
        java.sql.Time r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int)>(i0);

        if r1 != null goto label1;

        return null;

     label1:
        r2 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.sql.Time convertToTime(java.lang.Object)>(r1);

        if r2 != null goto label2;

        return null;

     label2:
        return r2;
    }

    public java.sql.Timestamp getTimestamp(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.lang.Object r1;
        java.sql.Timestamp r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int)>(i0);

        if r1 != null goto label1;

        return null;

     label1:
        r2 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.sql.Timestamp convertToTimestamp(java.lang.Object)>(r1);

        if r2 != null goto label2;

        return null;

     label2:
        return r2;
    }

    public java.io.InputStream getAsciiStream(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        return null;
    }

    public java.io.InputStream getUnicodeStream(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        return null;
    }

    public java.io.InputStream getBinaryStream(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getCursorName() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return "";
    }

    public java.sql.ResultSetMetaData getMetaData() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        ORG.as220.tinySQL.tinySQLResultSetMetaData $r1, $r2, $r3;
        ORG.as220.tinySQL.tsResultSet $r4;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tinySQLResultSetMetaData meta>;

        if $r1 != null goto label1;

        $r3 = new ORG.as220.tinySQL.tinySQLResultSetMetaData;

        $r4 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tsResultSet result>;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLResultSetMetaData: void <init>(ORG.as220.tinySQL.tsResultSet)>($r4);

        r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tinySQLResultSetMetaData meta> = $r3;

     label1:
        $r2 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tinySQLResultSetMetaData meta>;

        return $r2;
    }

    public java.lang.Object getObject(int, int, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0, i1, i2, $i4, $i6;
        java.sql.Timestamp $r1;
        java.sql.Time $r2;
        java.sql.Date $r3;
        java.lang.String $r4, $r12, $r13;
        java.lang.Double $r5;
        double $d0;
        java.lang.Float $r6, $r7;
        float $f0, $f1;
        java.lang.Integer $r8, $r9;
        short $s3;
        java.math.BigDecimal $r10, $r11;
        byte[] $r14, $r15, $r16;
        java.lang.Long $r17;
        long $l5;
        java.lang.Character $r18;
        char $c7;
        java.lang.Boolean $r19;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        lookupswitch(i1)
        {
            case -7: goto label01;
            case -6: goto label02;
            case -5: goto label05;
            case -4: goto label19;
            case -3: goto label18;
            case -2: goto label17;
            case -1: goto label13;
            case 1: goto label11;
            case 2: goto label09;
            case 3: goto label10;
            case 4: goto label04;
            case 5: goto label03;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 12: goto label12;
            case 91: goto label14;
            case 92: goto label15;
            case 93: goto label16;
            default: goto label20;
        };

     label01:
        $r19 = new java.lang.Boolean;

        $z0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: boolean getBoolean(int)>(i0);

        specialinvoke $r19.<java.lang.Boolean: void <init>(boolean)>($z0);

        return $r19;

     label02:
        $r18 = new java.lang.Character;

        $i6 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int getInt(int)>(i0);

        $c7 = (char) $i6;

        specialinvoke $r18.<java.lang.Character: void <init>(char)>($c7);

        return $r18;

     label03:
        $r8 = new java.lang.Integer;

        $s3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: short getShort(int)>(i0);

        specialinvoke $r8.<java.lang.Integer: void <init>(int)>($s3);

        return $r8;

     label04:
        $r9 = new java.lang.Integer;

        $i4 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int getInt(int)>(i0);

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i4);

        return $r9;

     label05:
        $r17 = new java.lang.Long;

        $l5 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: long getLong(int)>(i0);

        specialinvoke $r17.<java.lang.Long: void <init>(long)>($l5);

        return $r17;

     label06:
        $r7 = new java.lang.Float;

        $f1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: float getFloat(int)>(i0);

        specialinvoke $r7.<java.lang.Float: void <init>(float)>($f1);

        return $r7;

     label07:
        $r6 = new java.lang.Float;

        $f0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: float getFloat(int)>(i0);

        specialinvoke $r6.<java.lang.Float: void <init>(float)>($f0);

        return $r6;

     label08:
        $r5 = new java.lang.Double;

        $d0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: double getDouble(int)>(i0);

        specialinvoke $r5.<java.lang.Double: void <init>(double)>($d0);

        return $r5;

     label09:
        $r11 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.math.BigDecimal getBigDecimal(int,int)>(i0, i2);

        return $r11;

     label10:
        $r10 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.math.BigDecimal getBigDecimal(int,int)>(i0, i2);

        return $r10;

     label11:
        $r12 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.String getString(int)>(i0);

        return $r12;

     label12:
        $r4 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.String getString(int)>(i0);

        return $r4;

     label13:
        $r13 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.String getString(int)>(i0);

        return $r13;

     label14:
        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.sql.Date getDate(int)>(i0);

        return $r3;

     label15:
        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.sql.Time getTime(int)>(i0);

        return $r2;

     label16:
        $r1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.sql.Timestamp getTimestamp(int)>(i0);

        return $r1;

     label17:
        $r14 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: byte[] getBytes(int)>(i0);

        return $r14;

     label18:
        $r15 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: byte[] getBytes(int)>(i0);

        return $r15;

     label19:
        $r16 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: byte[] getBytes(int)>(i0);

        return $r16;

     label20:
        return null;
    }

    public java.lang.Object getObject(int, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0, i1;
        java.lang.Object $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int,int,int)>(i0, i1, 0);

        return $r1;
    }

    public java.lang.Object getObject(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0, $i1;
        ORG.as220.tinySQL.tsResultRow $r1;
        java.lang.Object $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tsResultRow current_row>;

        $i1 = i0 - 1;

        $r2 = virtualinvoke $r1.<ORG.as220.tinySQL.tsResultRow: java.lang.Object get(int)>($i1);

        return $r2;
    }

    public java.lang.String getString(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1, r2;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        r2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.String getString(int)>($i0);

        return r2;
    }

    public byte getByte(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0;
        byte $b1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $b1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: byte getByte(int)>($i0);

        return $b1;
    }

    public boolean getBoolean(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $z0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: boolean getBoolean(int)>($i0);

        return $z0;
    }

    public short getShort(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0;
        short $s1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $s1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: short getShort(int)>($i0);

        return $s1;
    }

    public int getInt(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0, $i1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $i1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int getInt(int)>($i0);

        return $i1;
    }

    public long getLong(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0;
        long $l1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $l1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: long getLong(int)>($i0);

        return $l1;
    }

    public float getFloat(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0;
        float $f0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $f0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: float getFloat(int)>($i0);

        return $f0;
    }

    public double getDouble(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0;
        double $d0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $d0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: double getDouble(int)>($i0);

        return $d0;
    }

    public java.math.BigDecimal getBigDecimal(java.lang.String, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int i0, $i1;
        java.math.BigDecimal $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.math.BigDecimal getBigDecimal(int,int)>($i1, i0);

        return $r2;
    }

    public byte[] getBytes(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0;
        byte[] $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: byte[] getBytes(int)>($i0);

        return $r2;
    }

    public java.sql.Date getDate(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0;
        java.sql.Date $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.sql.Date getDate(int)>($i0);

        return $r2;
    }

    public java.sql.Time getTime(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0;
        java.sql.Time $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.sql.Time getTime(int)>($i0);

        return $r2;
    }

    public java.sql.Timestamp getTimestamp(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0;
        java.sql.Timestamp $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.sql.Timestamp getTimestamp(int)>($i0);

        return $r2;
    }

    public java.io.InputStream getAsciiStream(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0;
        java.io.InputStream $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.io.InputStream getAsciiStream(int)>($i0);

        return $r2;
    }

    public java.io.InputStream getUnicodeStream(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0;
        java.io.InputStream $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.io.InputStream getUnicodeStream(int)>($i0);

        return $r2;
    }

    public java.io.InputStream getBinaryStream(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0;
        java.io.InputStream $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.io.InputStream getBinaryStream(int)>($i0);

        return $r2;
    }

    public java.lang.Object getObject(java.lang.String, int, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int i0, i1, $i2;
        java.lang.Object $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int,int,int)>($i2, i0, i1);

        return $r2;
    }

    public java.lang.Object getObject(java.lang.String, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int i0, $i1;
        java.lang.Object $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int,int,int)>($i1, i0, 0);

        return $r2;
    }

    public java.lang.Object getObject(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int)>($i0);

        return $r2;
    }

    public int findColumn(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        ORG.as220.tinySQL.tsResultSet $r2;
        int $i0, $i1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tsResultSet result>;

        $i0 = virtualinvoke $r2.<ORG.as220.tinySQL.tsResultSet: int findColumn(java.lang.String)>(r1);

        $i1 = $i0 + 1;

        return $i1;
    }

    public java.sql.SQLWarning getWarnings() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return null;
    }

    public void clearWarnings() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return;
    }

    public java.io.Reader getCharacterStream(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        return null;
    }

    public java.io.Reader getCharacterStream(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.math.BigDecimal getBigDecimal(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.math.BigDecimal r1;
        java.lang.Exception $r2;
        ORG.as220.tinySQL.tinySQLException $r3;
        java.lang.Object r4;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

     label1:
        r4 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.lang.Object getObject(int)>(i0);

        if r4 != null goto label3;

     label2:
        return null;

     label3:
        r1 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.math.BigDecimal convertToNumber(java.lang.Object)>(r4);

        if r1 != null goto label5;

     label4:
        return null;

     label5:
        return r1;

     label6:
        $r2 := @caughtexception;

        $r3 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Unable to convert to BigDecimal", $r2);

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Exception from label3 to label4 with label6;
    }

    public java.math.BigDecimal getBigDecimal(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int $i0;
        java.math.BigDecimal $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: int findColumn(java.lang.String)>(r1);

        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLResultSet: java.math.BigDecimal getBigDecimal(int)>($i0);

        return $r2;
    }

    public boolean isBeforeFirst() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        $i0 = r0.<ORG.as220.tinySQL.tinySQLResultSet: int current_row_index>;

        if $i0 != -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isAfterLast() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int $i0, $i1, $i2;
        ORG.as220.tinySQL.tsResultSet $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        $i0 = r0.<ORG.as220.tinySQL.tinySQLResultSet: int current_row_index>;

        if $i0 >= 0 goto label1;

        return 0;

     label1:
        $i1 = r0.<ORG.as220.tinySQL.tinySQLResultSet: int current_row_index>;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tsResultSet result>;

        $i2 = virtualinvoke $r1.<ORG.as220.tinySQL.tsResultSet: int getResultSize()>();

        if $i1 != $i2 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean isFirst() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int $i0, $i1, $i2;
        ORG.as220.tinySQL.tsResultSet $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        $i0 = r0.<ORG.as220.tinySQL.tinySQLResultSet: int current_row_index>;

        if $i0 >= 0 goto label1;

        return 0;

     label1:
        $i1 = r0.<ORG.as220.tinySQL.tinySQLResultSet: int current_row_index>;

        if $i1 != 0 goto label2;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tsResultSet result>;

        $i2 = virtualinvoke $r1.<ORG.as220.tinySQL.tsResultSet: int getResultSize()>();

        if $i2 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean isLast() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return 0;
    }

    public void beforeFirst() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return;
    }

    public void afterLast() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return;
    }

    public boolean first() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return 0;
    }

    public boolean last() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return 0;
    }

    public int getRow() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return 0;
    }

    public boolean absolute(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean relative(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean previous() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return 0;
    }

    public void setFetchDirection(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        return;
    }

    public int getFetchDirection() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return 1000;
    }

    public void setFetchSize(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        ORG.as220.tinySQL.tsResultSet $r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("Condition 0 <= rows <= this.getMaxRows() is not satisfied");

        throw $r2;

     label1:
        $r1 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tsResultSet result>;

        virtualinvoke $r1.<ORG.as220.tinySQL.tsResultSet: void setFetchSize(int)>(i0);

        return;
    }

    public int getFetchSize() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        ORG.as220.tinySQL.tsResultSet $r1;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tsResultSet result>;

        $i0 = virtualinvoke $r1.<ORG.as220.tinySQL.tsResultSet: int getFetchSize()>();

        return $i0;
    }

    public int getType() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        ORG.as220.tinySQL.tsResultSet $r1;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tsResultSet result>;

        $i0 = virtualinvoke $r1.<ORG.as220.tinySQL.tsResultSet: int getType()>();

        return $i0;
    }

    public int getConcurrency() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return 1007;
    }

    public boolean rowUpdated() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return 0;
    }

    public boolean rowInserted() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return 0;
    }

    public boolean rowDeleted() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return 0;
    }

    public void updateNull(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateNull.");

        throw $r1;
    }

    public void updateBoolean(int, boolean) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        boolean z0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateBoolean.");

        throw $r1;
    }

    public void updateByte(int, byte) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        byte b1;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        b1 := @parameter1: byte;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateByte.");

        throw $r1;
    }

    public void updateShort(int, short) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        short s1;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        s1 := @parameter1: short;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateShort.");

        throw $r1;
    }

    public void updateInt(int, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0, i1;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateInt.");

        throw $r1;
    }

    public void updateLong(int, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        long l1;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateLong.");

        throw $r1;
    }

    public void updateFloat(int, float) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        float f0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateFloat.");

        throw $r1;
    }

    public void updateDouble(int, double) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        double d0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateDouble.");

        throw $r1;
    }

    public void updateBigDecimal(int, java.math.BigDecimal) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.math.BigDecimal r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.math.BigDecimal;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateBigDecimal.");

        throw $r2;
    }

    public void updateString(int, java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.lang.String r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateString.");

        throw $r2;
    }

    public void updateBytes(int, byte[]) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        byte[] r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateBytes.");

        throw $r2;
    }

    public void updateDate(int, java.sql.Date) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.sql.Date r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.sql.Date;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateDate.");

        throw $r2;
    }

    public void updateTime(int, java.sql.Time) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.sql.Time r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.sql.Time;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateTime.");

        throw $r2;
    }

    public void updateTimestamp(int, java.sql.Timestamp) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.sql.Timestamp r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.sql.Timestamp;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateTimestamp.");

        throw $r2;
    }

    public void updateAsciiStream(int, java.io.InputStream, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0, i1;
        java.io.InputStream r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.InputStream;

        i1 := @parameter2: int;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateAsciiStream.");

        throw $r2;
    }

    public void updateBinaryStream(int, java.io.InputStream, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0, i1;
        java.io.InputStream r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.InputStream;

        i1 := @parameter2: int;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateBinaryStream.");

        throw $r2;
    }

    public void updateCharacterStream(int, java.io.Reader, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0, i1;
        java.io.Reader r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.Reader;

        i1 := @parameter2: int;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateCharacterStream.");

        throw $r2;
    }

    public void updateObject(int, java.lang.Object, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0, i1;
        java.lang.Object r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        i1 := @parameter2: int;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateObject.");

        throw $r2;
    }

    public void updateObject(int, java.lang.Object) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.lang.Object r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateObject.");

        throw $r2;
    }

    public void updateNull(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateNull.");

        throw $r2;
    }

    public void updateBoolean(java.lang.String, boolean) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        boolean z0;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateBoolean.");

        throw $r2;
    }

    public void updateByte(java.lang.String, byte) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        byte b0;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        b0 := @parameter1: byte;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateByte.");

        throw $r2;
    }

    public void updateShort(java.lang.String, short) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        short s0;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        s0 := @parameter1: short;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateShort.");

        throw $r2;
    }

    public void updateInt(java.lang.String, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        int i0;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateInt.");

        throw $r2;
    }

    public void updateLong(java.lang.String, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        long l0;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateLong.");

        throw $r2;
    }

    public void updateFloat(java.lang.String, float) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        float f0;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateFloat.");

        throw $r2;
    }

    public void updateDouble(java.lang.String, double) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        double d0;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateDouble.");

        throw $r2;
    }

    public void updateBigDecimal(java.lang.String, java.math.BigDecimal) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.math.BigDecimal r2;
        java.sql.SQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.math.BigDecimal;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateDecimal.");

        throw $r3;
    }

    public void updateString(java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1, r2;
        java.sql.SQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateString.");

        throw $r3;
    }

    public void updateBytes(java.lang.String, byte[]) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        byte[] r2;
        java.sql.SQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateBytes.");

        throw $r3;
    }

    public void updateDate(java.lang.String, java.sql.Date) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.sql.Date r2;
        java.sql.SQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.sql.Date;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateDate.");

        throw $r3;
    }

    public void updateTime(java.lang.String, java.sql.Time) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.sql.Time r2;
        java.sql.SQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.sql.Time;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateTime.");

        throw $r3;
    }

    public void updateTimestamp(java.lang.String, java.sql.Timestamp) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.sql.Timestamp r2;
        java.sql.SQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.sql.Timestamp;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateTimestamp.");

        throw $r3;
    }

    public void updateAsciiStream(java.lang.String, java.io.InputStream, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.InputStream r2;
        int i0;
        java.sql.SQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.InputStream;

        i0 := @parameter2: int;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateAsciiStream.");

        throw $r3;
    }

    public void updateBinaryStream(java.lang.String, java.io.InputStream, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.InputStream r2;
        int i0;
        java.sql.SQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.InputStream;

        i0 := @parameter2: int;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateBinaryStream.");

        throw $r3;
    }

    public void updateCharacterStream(java.lang.String, java.io.Reader, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.Reader r2;
        int i0;
        java.sql.SQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        i0 := @parameter2: int;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateCharacter.");

        throw $r3;
    }

    public void updateObject(java.lang.String, java.lang.Object, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.lang.Object r2;
        int i0;
        java.sql.SQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateObject.");

        throw $r3;
    }

    public void updateObject(java.lang.String, java.lang.Object) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.sql.SQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateObject.");

        throw $r3;
    }

    public void insertRow() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support insertRow.");

        throw $r1;
    }

    public void updateRow() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support updateRow.");

        throw $r1;
    }

    public void deleteRow() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support deleteRow.");

        throw $r1;
    }

    public void refreshRow() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support RefreshRow.");

        throw $r1;
    }

    public void cancelRowUpdates() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support cancelRowUpdate.");

        throw $r1;
    }

    public void moveToInsertRow() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support moveToInsertRow.");

        throw $r1;
    }

    public void moveToCurrentRow() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support moveToCurrentRow.");

        throw $r1;
    }

    public java.sql.Statement getStatement() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        ORG.as220.tinySQL.tinySQLStatement $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLResultSet: ORG.as220.tinySQL.tinySQLStatement statement>;

        return $r1;
    }

    public java.lang.Object getObject(int, java.util.Map) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.util.Map r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Map;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getObject.");

        throw $r2;
    }

    public java.sql.Ref getRef(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getRef.");

        throw $r1;
    }

    public java.sql.Blob getBlob(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getBlob.");

        throw $r1;
    }

    public java.sql.Clob getClob(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getClob.");

        throw $r1;
    }

    public java.sql.Array getArray(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getArray.");

        throw $r1;
    }

    public java.lang.Object getObject(java.lang.String, java.util.Map) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.util.Map r2;
        java.sql.SQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getObject.");

        throw $r3;
    }

    public java.sql.Ref getRef(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getRef.");

        throw $r2;
    }

    public java.sql.Blob getBlob(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getBlob.");

        throw $r2;
    }

    public java.sql.Clob getClob(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getClob.");

        throw $r2;
    }

    public java.sql.Array getArray(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getArray.");

        throw $r2;
    }

    public java.sql.Date getDate(int, java.util.Calendar) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.util.Calendar r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Calendar;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getDate.");

        throw $r2;
    }

    public java.sql.Date getDate(java.lang.String, java.util.Calendar) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.util.Calendar r2;
        java.sql.SQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Calendar;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getDate.");

        throw $r3;
    }

    public java.sql.Time getTime(int, java.util.Calendar) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.util.Calendar r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Calendar;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getTime.");

        throw $r2;
    }

    public java.sql.Time getTime(java.lang.String, java.util.Calendar) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.util.Calendar r2;
        java.sql.SQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Calendar;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getTime.");

        throw $r3;
    }

    public java.sql.Timestamp getTimestamp(int, java.util.Calendar) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.util.Calendar r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Calendar;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getTimestamp.");

        throw $r2;
    }

    public java.sql.Timestamp getTimestamp(java.lang.String, java.util.Calendar) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.util.Calendar r2;
        java.sql.SQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Calendar;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getTimestamp.");

        throw $r3;
    }

    public boolean isWrapperFor(java.lang.Class) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.Class r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.Class;

        return 0;
    }

    public java.lang.Object unwrap(java.lang.Class) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.Class r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.Class;

        return null;
    }

    public int getHoldability() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return 0;
    }

    public java.io.Reader getNCharacterStream(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        return null;
    }

    public java.io.Reader getNCharacterStream(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.sql.NClob getNClob(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        return null;
    }

    public java.sql.NClob getNClob(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.lang.String getNString(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getNString(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.sql.RowId getRowId(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        return null;
    }

    public java.sql.RowId getRowId(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.sql.SQLXML getSQLXML(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        return null;
    }

    public java.sql.SQLXML getSQLXML(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.net.URL getURL(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        return null;
    }

    public java.net.URL getURL(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public boolean isClosed() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        return 0;
    }

    public void updateArray(int, java.sql.Array) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.sql.Array r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.sql.Array;

        return;
    }

    public void updateArray(java.lang.String, java.sql.Array) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.sql.Array r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.sql.Array;

        return;
    }

    public void updateAsciiStream(int, java.io.InputStream) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.io.InputStream r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.InputStream;

        return;
    }

    public void updateAsciiStream(java.lang.String, java.io.InputStream) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.InputStream r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.InputStream;

        return;
    }

    public void updateAsciiStream(int, java.io.InputStream, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.io.InputStream r1;
        long l1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.InputStream;

        l1 := @parameter2: long;

        return;
    }

    public void updateAsciiStream(java.lang.String, java.io.InputStream, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.InputStream r2;
        long l0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.InputStream;

        l0 := @parameter2: long;

        return;
    }

    public void updateBinaryStream(int, java.io.InputStream) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.io.InputStream r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.InputStream;

        return;
    }

    public void updateBinaryStream(java.lang.String, java.io.InputStream) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.InputStream r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.InputStream;

        return;
    }

    public void updateBinaryStream(int, java.io.InputStream, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.io.InputStream r1;
        long l1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.InputStream;

        l1 := @parameter2: long;

        return;
    }

    public void updateBinaryStream(java.lang.String, java.io.InputStream, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.InputStream r2;
        long l0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.InputStream;

        l0 := @parameter2: long;

        return;
    }

    public void updateBlob(int, java.sql.Blob) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.sql.Blob r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.sql.Blob;

        return;
    }

    public void updateBlob(java.lang.String, java.sql.Blob) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.sql.Blob r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.sql.Blob;

        return;
    }

    public void updateBlob(int, java.io.InputStream) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.io.InputStream r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.InputStream;

        return;
    }

    public void updateBlob(java.lang.String, java.io.InputStream) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.InputStream r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.InputStream;

        return;
    }

    public void updateBlob(int, java.io.InputStream, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.io.InputStream r1;
        long l1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.InputStream;

        l1 := @parameter2: long;

        return;
    }

    public void updateBlob(java.lang.String, java.io.InputStream, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.InputStream r2;
        long l0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.InputStream;

        l0 := @parameter2: long;

        return;
    }

    public void updateCharacterStream(int, java.io.Reader) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.io.Reader r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.Reader;

        return;
    }

    public void updateCharacterStream(java.lang.String, java.io.Reader) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.Reader r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        return;
    }

    public void updateCharacterStream(int, java.io.Reader, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.io.Reader r1;
        long l1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.Reader;

        l1 := @parameter2: long;

        return;
    }

    public void updateCharacterStream(java.lang.String, java.io.Reader, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.Reader r2;
        long l0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        l0 := @parameter2: long;

        return;
    }

    public void updateClob(int, java.sql.Clob) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.sql.Clob r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.sql.Clob;

        return;
    }

    public void updateClob(java.lang.String, java.sql.Clob) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.sql.Clob r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.sql.Clob;

        return;
    }

    public void updateClob(int, java.io.Reader) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.io.Reader r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.Reader;

        return;
    }

    public void updateClob(java.lang.String, java.io.Reader) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.Reader r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        return;
    }

    public void updateClob(int, java.io.Reader, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.io.Reader r1;
        long l1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.Reader;

        l1 := @parameter2: long;

        return;
    }

    public void updateClob(java.lang.String, java.io.Reader, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.Reader r2;
        long l0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        l0 := @parameter2: long;

        return;
    }

    public void updateNCharacterStream(int, java.io.Reader) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.io.Reader r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.Reader;

        return;
    }

    public void updateNCharacterStream(java.lang.String, java.io.Reader) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.Reader r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        return;
    }

    public void updateNCharacterStream(int, java.io.Reader, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.io.Reader r1;
        long l1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.Reader;

        l1 := @parameter2: long;

        return;
    }

    public void updateNCharacterStream(java.lang.String, java.io.Reader, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.Reader r2;
        long l0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        l0 := @parameter2: long;

        return;
    }

    public void updateNClob(int, java.sql.NClob) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.sql.NClob r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.sql.NClob;

        return;
    }

    public void updateNClob(java.lang.String, java.sql.NClob) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.sql.NClob r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.sql.NClob;

        return;
    }

    public void updateNClob(int, java.io.Reader) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.io.Reader r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.Reader;

        return;
    }

    public void updateNClob(java.lang.String, java.io.Reader) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.Reader r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        return;
    }

    public void updateNClob(int, java.io.Reader, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.io.Reader r1;
        long l1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.Reader;

        l1 := @parameter2: long;

        return;
    }

    public void updateNClob(java.lang.String, java.io.Reader, long) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.io.Reader r2;
        long l0;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.Reader;

        l0 := @parameter2: long;

        return;
    }

    public void updateNString(int, java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.lang.String r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        return;
    }

    public void updateNString(java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1, r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void updateRef(int, java.sql.Ref) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.sql.Ref r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.sql.Ref;

        return;
    }

    public void updateRef(java.lang.String, java.sql.Ref) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.sql.Ref r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.sql.Ref;

        return;
    }

    public void updateRowId(int, java.sql.RowId) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.sql.RowId r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.sql.RowId;

        return;
    }

    public void updateRowId(java.lang.String, java.sql.RowId) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.sql.RowId r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.sql.RowId;

        return;
    }

    public void updateSQLXML(int, java.sql.SQLXML) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.sql.SQLXML r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.sql.SQLXML;

        return;
    }

    public void updateSQLXML(java.lang.String, java.sql.SQLXML) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.sql.SQLXML r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.sql.SQLXML;

        return;
    }

    public java.lang.Object getObject(int, java.lang.Class) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        int i0;
        java.lang.Class r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Class;

        return null;
    }

    public java.lang.Object getObject(java.lang.String, java.lang.Class) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLResultSet r0;
        java.lang.String r1;
        java.lang.Class r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLResultSet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        return null;
    }
}
