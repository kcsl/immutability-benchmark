public class ORG.as220.tinySQL.tinySQLException extends java.sql.SQLException
{
    private java.lang.Exception inner;

    public void <init>(java.lang.String)
    {
        ORG.as220.tinySQL.tinySQLException r0;
        java.lang.String r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLException;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.sql.SQLException: void <init>(java.lang.String)>(r1);

        return;
    }

    public void <init>()
    {
        ORG.as220.tinySQL.tinySQLException r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLException;

        specialinvoke r0.<java.sql.SQLException: void <init>()>();

        return;
    }

    public void <init>(java.lang.Exception)
    {
        ORG.as220.tinySQL.tinySQLException r0;
        java.lang.Exception r1;
        java.lang.String $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLException;

        r1 := @parameter0: java.lang.Exception;

        $r2 = virtualinvoke r1.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke r0.<java.sql.SQLException: void <init>(java.lang.String)>($r2);

        r0.<ORG.as220.tinySQL.tinySQLException: java.lang.Exception inner> = r1;

        return;
    }

    public void <init>(java.lang.String, java.lang.Exception)
    {
        ORG.as220.tinySQL.tinySQLException r0;
        java.lang.String r1;
        java.lang.Exception r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLException;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Exception;

        specialinvoke r0.<java.sql.SQLException: void <init>(java.lang.String)>(r1);

        r0.<ORG.as220.tinySQL.tinySQLException: java.lang.Exception inner> = r2;

        return;
    }

    public void printStackTrace()
    {
        ORG.as220.tinySQL.tinySQLException r0;
        java.lang.Exception $r1, $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLException;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLException: java.lang.Exception inner>;

        if $r1 == null goto label1;

        $r2 = r0.<ORG.as220.tinySQL.tinySQLException: java.lang.Exception inner>;

        virtualinvoke $r2.<java.lang.Exception: void printStackTrace()>();

        goto label2;

     label1:
        specialinvoke r0.<java.sql.SQLException: void printStackTrace()>();

     label2:
        return;
    }

    public void printStackTrace(java.io.PrintStream)
    {
        ORG.as220.tinySQL.tinySQLException r0;
        java.io.PrintStream r1;
        java.lang.Exception $r2, $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLException;

        r1 := @parameter0: java.io.PrintStream;

        $r2 = r0.<ORG.as220.tinySQL.tinySQLException: java.lang.Exception inner>;

        if $r2 == null goto label1;

        $r3 = r0.<ORG.as220.tinySQL.tinySQLException: java.lang.Exception inner>;

        virtualinvoke $r3.<java.lang.Exception: void printStackTrace(java.io.PrintStream)>(r1);

        goto label2;

     label1:
        specialinvoke r0.<java.sql.SQLException: void printStackTrace(java.io.PrintStream)>(r1);

     label2:
        return;
    }

    public void printStackTrace(java.io.PrintWriter)
    {
        ORG.as220.tinySQL.tinySQLException r0;
        java.io.PrintWriter r1;
        java.lang.Exception $r2, $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLException;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<ORG.as220.tinySQL.tinySQLException: java.lang.Exception inner>;

        if $r2 == null goto label1;

        $r3 = r0.<ORG.as220.tinySQL.tinySQLException: java.lang.Exception inner>;

        virtualinvoke $r3.<java.lang.Exception: void printStackTrace(java.io.PrintWriter)>(r1);

        goto label2;

     label1:
        specialinvoke r0.<java.sql.SQLException: void printStackTrace(java.io.PrintWriter)>(r1);

     label2:
        return;
    }
}
