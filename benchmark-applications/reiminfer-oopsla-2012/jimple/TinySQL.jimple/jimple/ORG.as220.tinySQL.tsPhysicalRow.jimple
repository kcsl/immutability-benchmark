public class ORG.as220.tinySQL.tsPhysicalRow extends ORG.as220.tinySQL.tsRow
{
    private java.lang.Object[] data;
    private ORG.as220.tinySQL.tsColumn[] coldefs;

    public void <init>(java.util.Vector)
    {
        ORG.as220.tinySQL.tsPhysicalRow r0;
        java.util.Vector r1;
        int i0, $i1, $i2, i3;
        ORG.as220.tinySQL.tsColumn r2;
        ORG.as220.tinySQL.tsColumn[] $r3, $r8;
        java.lang.Object[] $r4, $r6;
        java.lang.Object $r5, $r7;

        r0 := @this: ORG.as220.tinySQL.tsPhysicalRow;

        r1 := @parameter0: java.util.Vector;

        specialinvoke r0.<ORG.as220.tinySQL.tsRow: void <init>()>();

        $i1 = virtualinvoke r1.<java.util.Vector: int size()>();

        $r3 = newarray (ORG.as220.tinySQL.tsColumn)[$i1];

        r0.<ORG.as220.tinySQL.tsPhysicalRow: ORG.as220.tinySQL.tsColumn[] coldefs> = $r3;

        $i2 = virtualinvoke r1.<java.util.Vector: int size()>();

        $r4 = newarray (java.lang.Object)[$i2];

        r0.<ORG.as220.tinySQL.tsPhysicalRow: java.lang.Object[] data> = $r4;

        i0 = virtualinvoke r1.<java.util.Vector: int size()>();

        i3 = 0;

        goto label2;

     label1:
        $r5 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r2 = (ORG.as220.tinySQL.tsColumn) $r5;

        virtualinvoke r2.<ORG.as220.tinySQL.tsColumn: void setResultPosition(int)>(i3);

        $r6 = r0.<ORG.as220.tinySQL.tsPhysicalRow: java.lang.Object[] data>;

        $r7 = virtualinvoke r2.<ORG.as220.tinySQL.tsColumn: java.lang.Object getDefaultValue()>();

        $r6[i3] = $r7;

        $r8 = r0.<ORG.as220.tinySQL.tsPhysicalRow: ORG.as220.tinySQL.tsColumn[] coldefs>;

        $r8[i3] = r2;

        i3 = i3 + 1;

     label2:
        if i3 < i0 goto label1;

        return;
    }

    public void <init>(ORG.as220.tinySQL.tsPhysicalRow)
    {
        ORG.as220.tinySQL.tsPhysicalRow r0, r1;
        java.lang.Object[] $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1;
        ORG.as220.tinySQL.tsColumn[] $r7;

        r0 := @this: ORG.as220.tinySQL.tsPhysicalRow;

        r1 := @parameter0: ORG.as220.tinySQL.tsPhysicalRow;

        specialinvoke r0.<ORG.as220.tinySQL.tsRow: void <init>(ORG.as220.tinySQL.tsRow)>(r1);

        $r2 = r1.<ORG.as220.tinySQL.tsPhysicalRow: java.lang.Object[] data>;

        $i0 = lengthof $r2;

        $r3 = newarray (java.lang.Object)[$i0];

        r0.<ORG.as220.tinySQL.tsPhysicalRow: java.lang.Object[] data> = $r3;

        $r6 = r1.<ORG.as220.tinySQL.tsPhysicalRow: java.lang.Object[] data>;

        $r5 = r0.<ORG.as220.tinySQL.tsPhysicalRow: java.lang.Object[] data>;

        $r4 = r0.<ORG.as220.tinySQL.tsPhysicalRow: java.lang.Object[] data>;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, 0, $i1);

        $r7 = r1.<ORG.as220.tinySQL.tsPhysicalRow: ORG.as220.tinySQL.tsColumn[] coldefs>;

        r0.<ORG.as220.tinySQL.tsPhysicalRow: ORG.as220.tinySQL.tsColumn[] coldefs> = $r7;

        return;
    }

    public java.lang.Object get(int) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tsPhysicalRow r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: ORG.as220.tinySQL.tsPhysicalRow;

        i0 := @parameter0: int;

        $r1 = r0.<ORG.as220.tinySQL.tsPhysicalRow: java.lang.Object[] data>;

        $r2 = $r1[i0];

        return $r2;
    }

    public void put(int, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tsPhysicalRow r0;
        int i0;
        java.lang.Object r1;
        java.lang.Object[] $r2;

        r0 := @this: ORG.as220.tinySQL.tsPhysicalRow;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<ORG.as220.tinySQL.tsPhysicalRow: java.lang.Object[] data>;

        $r2[i0] = r1;

        return;
    }

    public ORG.as220.tinySQL.tsColumn getColumnDefinition(int)
    {
        ORG.as220.tinySQL.tsPhysicalRow r0;
        int i0;
        ORG.as220.tinySQL.tsColumn[] $r1;
        ORG.as220.tinySQL.tsColumn $r2;

        r0 := @this: ORG.as220.tinySQL.tsPhysicalRow;

        i0 := @parameter0: int;

        $r1 = r0.<ORG.as220.tinySQL.tsPhysicalRow: ORG.as220.tinySQL.tsColumn[] coldefs>;

        $r2 = $r1[i0];

        return $r2;
    }

    public java.util.Enumeration getAllDefinitions()
    {
        ORG.as220.tinySQL.tsPhysicalRow r0;
        ORG.as220.tinySQL.util.ArrayEnumeration $r1;
        ORG.as220.tinySQL.tsColumn[] $r2;

        r0 := @this: ORG.as220.tinySQL.tsPhysicalRow;

        $r1 = new ORG.as220.tinySQL.util.ArrayEnumeration;

        $r2 = r0.<ORG.as220.tinySQL.tsPhysicalRow: ORG.as220.tinySQL.tsColumn[] coldefs>;

        specialinvoke $r1.<ORG.as220.tinySQL.util.ArrayEnumeration: void <init>(java.lang.Object[])>($r2);

        return $r1;
    }

    public int size()
    {
        ORG.as220.tinySQL.tsPhysicalRow r0;
        java.lang.Object[] $r1;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tsPhysicalRow;

        $r1 = r0.<ORG.as220.tinySQL.tsPhysicalRow: java.lang.Object[] data>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public java.lang.String toString()
    {
        ORG.as220.tinySQL.tsPhysicalRow r0;
        java.lang.StringBuffer $r2;
        java.lang.Object[] $r4, $r10;
        java.lang.Object $r5;
        java.lang.String $r9;
        int i0, $i1;

        r0 := @this: ORG.as220.tinySQL.tsPhysicalRow;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[tsPhysicalRow=(");

        i0 = 0;

        goto label3;

     label1:
        if i0 == 0 goto label2;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        $r4 = r0.<ORG.as220.tinySQL.tsPhysicalRow: java.lang.Object[] data>;

        $r5 = $r4[i0];

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        i0 = i0 + 1;

     label3:
        $r10 = r0.<ORG.as220.tinySQL.tsPhysicalRow: java.lang.Object[] data>;

        $i1 = lengthof $r10;

        if i0 < $i1 goto label1;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")]");

        $r9 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    public void refresh() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tsPhysicalRow r0;
        int i0, $i1, $i2, i3;
        ORG.as220.tinySQL.tsColumn r1;
        ORG.as220.tinySQL.tinySQLTableView r2;
        java.lang.Object r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: ORG.as220.tinySQL.tsPhysicalRow;

        i0 = virtualinvoke r0.<ORG.as220.tinySQL.tsPhysicalRow: int size()>();

        i3 = 0;

        goto label4;

     label1:
        r1 = virtualinvoke r0.<ORG.as220.tinySQL.tsPhysicalRow: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i3);

        $i1 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getColumnType()>();

        if $i1 != 0 goto label2;

        r2 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView getTable()>();

        $i2 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getTablePosition()>();

        r3 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: java.lang.Object getColumn(int)>($i2);

        virtualinvoke r0.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>(i3, r3);

        goto label3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Refresh: Ignoring row:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - not a data row");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void debug(java.lang.String)>($r7);

     label3:
        i3 = i3 + 1;

     label4:
        if i3 < i0 goto label1;

        return;
    }
}
