public class ORG.as220.tinySQL.sqlparser.Operator extends java.lang.Object
{
    public static ORG.as220.tinySQL.sqlparser.Operator AND;
    public static ORG.as220.tinySQL.sqlparser.Operator OR;
    public static ORG.as220.tinySQL.sqlparser.Operator ADD;
    public static ORG.as220.tinySQL.sqlparser.Operator SUB;
    public static ORG.as220.tinySQL.sqlparser.Operator MULT;
    public static ORG.as220.tinySQL.sqlparser.Operator DIV;
    public static ORG.as220.tinySQL.sqlparser.Operator EQUAL;
    public static ORG.as220.tinySQL.sqlparser.Operator NEQUAL;
    public static ORG.as220.tinySQL.sqlparser.Operator LEQUAL;
    public static ORG.as220.tinySQL.sqlparser.Operator GEQUAL;
    public static ORG.as220.tinySQL.sqlparser.Operator GREATER;
    public static ORG.as220.tinySQL.sqlparser.Operator LESSER;
    public static ORG.as220.tinySQL.sqlparser.Operator BETWEEN;
    public static ORG.as220.tinySQL.sqlparser.Operator NBETWEEN;
    public static ORG.as220.tinySQL.sqlparser.Operator LIKE;
    public static ORG.as220.tinySQL.sqlparser.Operator IN;

    static void <clinit>()
    {
        staticinvoke <ORG.as220.tinySQL.sqlparser.Operator: void init()>();

        return;
    }

    private void <init>()
    {
        ORG.as220.tinySQL.sqlparser.Operator r0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Operator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void init()
    {
        ORG.as220.tinySQL.sqlparser.Operator$AndOperator $r0;
        ORG.as220.tinySQL.sqlparser.Operator$OrOperator $r1;
        ORG.as220.tinySQL.sqlparser.Operator$AddOperator $r2;
        ORG.as220.tinySQL.sqlparser.Operator$SubtractOperator $r3;
        ORG.as220.tinySQL.sqlparser.Operator$MultiplyOperator $r4;
        ORG.as220.tinySQL.sqlparser.Operator$DivideOperator $r5;
        ORG.as220.tinySQL.sqlparser.Operator$EqualOperator $r6;
        ORG.as220.tinySQL.sqlparser.Operator$NotEqualOperator $r7;
        ORG.as220.tinySQL.sqlparser.Operator$LesserEqualOperator $r8;
        ORG.as220.tinySQL.sqlparser.Operator$GreaterEqualOperator $r9;
        ORG.as220.tinySQL.sqlparser.Operator$LesserOperator $r10;
        ORG.as220.tinySQL.sqlparser.Operator$GreaterOperator $r11;
        ORG.as220.tinySQL.sqlparser.Operator$BetweenOperator $r12;
        ORG.as220.tinySQL.sqlparser.Operator$NotBetweenOperator $r13;
        ORG.as220.tinySQL.sqlparser.Operator$LikeOperator $r14;
        ORG.as220.tinySQL.sqlparser.Operator$InOperator $r15;

        $r0 = new ORG.as220.tinySQL.sqlparser.Operator$AndOperator;

        specialinvoke $r0.<ORG.as220.tinySQL.sqlparser.Operator$AndOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$AndOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator AND> = $r0;

        $r1 = new ORG.as220.tinySQL.sqlparser.Operator$OrOperator;

        specialinvoke $r1.<ORG.as220.tinySQL.sqlparser.Operator$OrOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$OrOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator OR> = $r1;

        $r2 = new ORG.as220.tinySQL.sqlparser.Operator$AddOperator;

        specialinvoke $r2.<ORG.as220.tinySQL.sqlparser.Operator$AddOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$AddOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator ADD> = $r2;

        $r3 = new ORG.as220.tinySQL.sqlparser.Operator$SubtractOperator;

        specialinvoke $r3.<ORG.as220.tinySQL.sqlparser.Operator$SubtractOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$SubtractOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator SUB> = $r3;

        $r4 = new ORG.as220.tinySQL.sqlparser.Operator$MultiplyOperator;

        specialinvoke $r4.<ORG.as220.tinySQL.sqlparser.Operator$MultiplyOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$MultiplyOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator MULT> = $r4;

        $r5 = new ORG.as220.tinySQL.sqlparser.Operator$DivideOperator;

        specialinvoke $r5.<ORG.as220.tinySQL.sqlparser.Operator$DivideOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$DivideOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator DIV> = $r5;

        $r6 = new ORG.as220.tinySQL.sqlparser.Operator$EqualOperator;

        specialinvoke $r6.<ORG.as220.tinySQL.sqlparser.Operator$EqualOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$EqualOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator EQUAL> = $r6;

        $r7 = new ORG.as220.tinySQL.sqlparser.Operator$NotEqualOperator;

        specialinvoke $r7.<ORG.as220.tinySQL.sqlparser.Operator$NotEqualOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$NotEqualOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator NEQUAL> = $r7;

        $r8 = new ORG.as220.tinySQL.sqlparser.Operator$LesserEqualOperator;

        specialinvoke $r8.<ORG.as220.tinySQL.sqlparser.Operator$LesserEqualOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$LesserEqualOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator LEQUAL> = $r8;

        $r9 = new ORG.as220.tinySQL.sqlparser.Operator$GreaterEqualOperator;

        specialinvoke $r9.<ORG.as220.tinySQL.sqlparser.Operator$GreaterEqualOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$GreaterEqualOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator GEQUAL> = $r9;

        $r10 = new ORG.as220.tinySQL.sqlparser.Operator$LesserOperator;

        specialinvoke $r10.<ORG.as220.tinySQL.sqlparser.Operator$LesserOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$LesserOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator LESSER> = $r10;

        $r11 = new ORG.as220.tinySQL.sqlparser.Operator$GreaterOperator;

        specialinvoke $r11.<ORG.as220.tinySQL.sqlparser.Operator$GreaterOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$GreaterOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator GREATER> = $r11;

        $r12 = new ORG.as220.tinySQL.sqlparser.Operator$BetweenOperator;

        specialinvoke $r12.<ORG.as220.tinySQL.sqlparser.Operator$BetweenOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$BetweenOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator BETWEEN> = $r12;

        $r13 = new ORG.as220.tinySQL.sqlparser.Operator$NotBetweenOperator;

        specialinvoke $r13.<ORG.as220.tinySQL.sqlparser.Operator$NotBetweenOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$NotBetweenOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator NBETWEEN> = $r13;

        $r14 = new ORG.as220.tinySQL.sqlparser.Operator$LikeOperator;

        specialinvoke $r14.<ORG.as220.tinySQL.sqlparser.Operator$LikeOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$LikeOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator LIKE> = $r14;

        $r15 = new ORG.as220.tinySQL.sqlparser.Operator$InOperator;

        specialinvoke $r15.<ORG.as220.tinySQL.sqlparser.Operator$InOperator: void <init>(ORG.as220.tinySQL.sqlparser.Operator$InOperator)>(null);

        <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator IN> = $r15;

        return;
    }

    public java.lang.Object evaluate(java.lang.Object, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.Operator r0;
        java.lang.Object r1, r2;
        ORG.as220.tinySQL.tinySQLException $r3;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Operator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("This operator does not implement the evaluate method");

        throw $r3;
    }

    public final int compareTo(java.lang.Object, java.lang.Object)
    {
        ORG.as220.tinySQL.sqlparser.Operator r0;
        java.lang.Object r1, r2;
        java.lang.Comparable r3, r14;
        java.lang.String r4, $r6, $r8, r12, $r17, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.math.BigDecimal $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Exception $r9, $r10, $r11;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Operator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label01;

        if r2 != null goto label01;

        return 0;

     label01:
        if r1 != null goto label02;

        return -1;

     label02:
        if r2 != null goto label03;

        return 1;

     label03:
        $z0 = r1 instanceof java.lang.Comparable;

        if $z0 == 0 goto label15;

        $z1 = r2 instanceof java.lang.Comparable;

        if $z1 == 0 goto label15;

        r3 = (java.lang.Comparable) r1;

        $z2 = r1 instanceof java.lang.Number;

        if $z2 == 0 goto label04;

        $z6 = r2 instanceof java.lang.Number;

        if $z6 == 0 goto label04;

        $i2 = interfaceinvoke r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r2);

        return $i2;

     label04:
        $z3 = r1 instanceof java.lang.Number;

        if $z3 == 0 goto label08;

        $z5 = r2 instanceof java.lang.String;

        if $z5 == 0 goto label08;

     label05:
        r12 = (java.lang.String) r2;

        $r7 = new java.math.BigDecimal;

        $r8 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>();

        specialinvoke $r7.<java.math.BigDecimal: void <init>(java.lang.String)>($r8);

        $i1 = interfaceinvoke r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

     label06:
        return $i1;

     label07:
        $r11 := @caughtexception;

     label08:
        $z7 = r1 instanceof java.lang.String;

        if $z7 == 0 goto label12;

        $z4 = r2 instanceof java.lang.Number;

        if $z4 == 0 goto label12;

     label09:
        r14 = (java.lang.Comparable) r2;

        r4 = (java.lang.String) r1;

        $r5 = new java.math.BigDecimal;

        $r6 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        specialinvoke $r5.<java.math.BigDecimal: void <init>(java.lang.String)>($r6);

        $i0 = interfaceinvoke r14.<java.lang.Comparable: int compareTo(java.lang.Object)>($r5);

     label10:
        return $i0;

     label11:
        $r10 := @caughtexception;

     label12:
        $i3 = interfaceinvoke r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r2);

     label13:
        return $i3;

     label14:
        $r9 := @caughtexception;

     label15:
        $r17 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r18 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $i4 = virtualinvoke $r17.<java.lang.String: int compareTo(java.lang.String)>($r18);

        return $i4;

        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label12 to label13 with label14;
    }

    public int getLevel()
    {
        ORG.as220.tinySQL.sqlparser.Operator r0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Operator;

        return 0;
    }

    void <init>(ORG.as220.tinySQL.sqlparser.Operator)
    {
        ORG.as220.tinySQL.sqlparser.Operator r0, r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Operator;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.Operator;

        specialinvoke r0.<ORG.as220.tinySQL.sqlparser.Operator: void <init>()>();

        return;
    }
}
