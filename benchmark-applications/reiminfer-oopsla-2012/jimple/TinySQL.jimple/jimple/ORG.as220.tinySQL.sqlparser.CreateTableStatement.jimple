public class ORG.as220.tinySQL.sqlparser.CreateTableStatement extends java.lang.Object implements ORG.as220.tinySQL.sqlparser.SQLStatement
{
    private ORG.as220.tinySQL.tinySQL db;
    private java.lang.String table;
    private java.util.Vector columnDefinitions;

    public void <init>(ORG.as220.tinySQL.tinySQLStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.CreateTableStatement r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        java.sql.Connection $r2;
        ORG.as220.tinySQL.tinySQL $r3;
        java.util.Vector $r4;
        java.sql.SQLException $r5;
        ORG.as220.tinySQL.tinySQLException $r6;
        ORG.as220.tinySQL.tinySQLConnection r7;

        r0 := @this: ORG.as220.tinySQL.sqlparser.CreateTableStatement;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r2 = virtualinvoke r1.<ORG.as220.tinySQL.tinySQLStatement: java.sql.Connection getConnection()>();

        r7 = (ORG.as220.tinySQL.tinySQLConnection) $r2;

        $r3 = virtualinvoke r7.<ORG.as220.tinySQL.tinySQLConnection: ORG.as220.tinySQL.tinySQL getTinySqlHandle()>();

        r0.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: ORG.as220.tinySQL.tinySQL db> = $r3;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r6.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Unable to resolve connection", $r5);

        throw $r6;

     label4:
        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: java.util.Vector columnDefinitions> = $r4;

        return;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public java.lang.String getTable()
    {
        ORG.as220.tinySQL.sqlparser.CreateTableStatement r0;
        java.lang.String $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.CreateTableStatement;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: java.lang.String table>;

        return $r1;
    }

    public void setTable(java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.CreateTableStatement r0;
        java.lang.String r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.CreateTableStatement;

        r1 := @parameter0: java.lang.String;

        r0.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: java.lang.String table> = r1;

        return;
    }

    public void addColumnDefinition(ORG.as220.tinySQL.sqlparser.ColumnDefinition) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.CreateTableStatement r0;
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r1;
        java.util.Vector $r2;

        r0 := @this: ORG.as220.tinySQL.sqlparser.CreateTableStatement;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        $r2 = r0.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: java.util.Vector columnDefinitions>;

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.Vector getColumnDefinitions()
    {
        ORG.as220.tinySQL.sqlparser.CreateTableStatement r0;
        java.util.Vector $r1, $r2;

        r0 := @this: ORG.as220.tinySQL.sqlparser.CreateTableStatement;

        $r1 = new java.util.Vector;

        $r2 = r0.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: java.util.Vector columnDefinitions>;

        specialinvoke $r1.<java.util.Vector: void <init>(java.util.Collection)>($r2);

        return $r1;
    }

    public ORG.as220.tinySQL.tinySQL getDatabase() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.CreateTableStatement r0;
        ORG.as220.tinySQL.tinySQL $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.CreateTableStatement;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: ORG.as220.tinySQL.tinySQL db>;

        return $r1;
    }

    public boolean execute() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.CreateTableStatement r0;
        ORG.as220.tinySQL.tinySQL $r1;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.CreateTableStatement;

        $r1 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: ORG.as220.tinySQL.tinySQL getDatabase()>();

        $z0 = virtualinvoke $r1.<ORG.as220.tinySQL.tinySQL: boolean CreateTable(ORG.as220.tinySQL.sqlparser.CreateTableStatement)>(r0);

        return $z0;
    }

    public int getUpdateCount() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.CreateTableStatement r0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.CreateTableStatement;

        return 0;
    }

    public ORG.as220.tinySQL.tinySQLResultSet getResultSet() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.CreateTableStatement r0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.CreateTableStatement;

        return null;
    }

    public boolean getMoreResults() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.CreateTableStatement r0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.CreateTableStatement;

        return 0;
    }

    public java.lang.String toString()
    {
        ORG.as220.tinySQL.sqlparser.CreateTableStatement r0;
        java.lang.StringBuffer $r2;
        java.lang.String $r4, $r12;
        java.util.Vector $r7, $r13;
        java.lang.Object $r8;
        int i0, $i1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.CreateTableStatement;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CREATE TABLE ");

        $r4 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: java.lang.String getTable()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        i0 = 0;

        goto label3;

     label1:
        if i0 == 0 goto label2;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        $r7 = r0.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: java.util.Vector columnDefinitions>;

        $r8 = virtualinvoke $r7.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        i0 = i0 + 1;

     label3:
        $r13 = r0.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: java.util.Vector columnDefinitions>;

        $i1 = virtualinvoke $r13.<java.util.Vector: int size()>();

        if i0 < $i1 goto label1;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r12 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;
    }

    public java.util.Vector getParameters()
    {
        ORG.as220.tinySQL.sqlparser.CreateTableStatement r0;
        java.util.Vector $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.CreateTableStatement;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        return $r1;
    }
}
