public class ORG.as220.tinySQL.DBFHeader extends java.lang.Object
{
    public static final short TYPE_DB2;
    public static final short TYPE_DB3;
    public static final short TYPE_VISUAL_FOXPRO;
    public static final short TYPE_DB4_SQLTABLE_NOMEMO;
    public static final short TYPE_DB4_SQLSYSTEM_NOMEMO;
    public static final short TYPE_DB3_MEMO;
    public static final short TYPE_DB4_MEMO;
    public static final short TYPE_DB4_SQLTABLE_MEMO;
    public static final short TYPE_FOXPRO2;
    public static final short TYPE_FOXBASE;
    private short file_update_year;
    private short file_update_month;
    private short file_update_day;
    private int numFields;
    private int numRecords;
    private int headerLength;
    private int recordLength;
    private java.lang.String encoding;
    private boolean readOnly;
    private static final int BULK_SIZE;
    private static final int FLAG_INDEX;
    private static final int DATE_INDEX;
    private static final int NUMBER_OF_REC_INDEX;
    private static final int LENGTH_OF_HEADER_INDEX;
    private static final int LENGTH_OF_REC_INDEX;
    private static final int RESERVED_INDEX;
    private static final int TABLE_FLAGS;
    private static final int ENCODING_INDEX;
    private static final int DBF_HEADER_SIZE;
    public static final int TABLE_HAS_STRUCTURE_CDX;
    public static final int TABLE_HAS_MEMO_FIELD;
    public static final int TABLE_IS_DATABASE;
    private static final int DBF_COLDEF_SIZE;
    private static final int FIELD_NAME_INDEX;
    private static final int FIELD_TYPE_INDEX;
    private static final int IMU_INDEX;
    private static final int FIELD_LENGTH_INDEX;
    private static final int DECIMAL_COUNT_INDEX;
    private static final int FIELD_FLAGS_INDEX;
    private static final int FIELD_RESERVED_INDEX;
    public static final int FIELD_FLAG_SYSTEM_COLUMN;
    public static final int FIELD_FLAG_IS_NULLABLE;
    public static final int FIELD_FLAG_IS_BINARY;
    private static final int BACKLINK_STRUCTURE_SIZE;
    private byte[] fileHeader;
    private byte[] colHeader;
    private java.util.Vector coldefsSorted;
    private java.io.RandomAccessFile ff;
    private short type;
    private boolean autoEncoding;

    public void <init>(java.lang.String, boolean) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        java.lang.String r1;
        boolean z0;
        byte[] $r2;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ORG.as220.tinySQL.DBFHeader: short file_update_year> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: short file_update_month> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: short file_update_day> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: int numFields> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: int numRecords> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: int headerLength> = -1;

        r0.<ORG.as220.tinySQL.DBFHeader: int recordLength> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: java.lang.String encoding> = r1;

        r0.<ORG.as220.tinySQL.DBFHeader: boolean autoEncoding> = z0;

        $r2 = newarray (byte)[32];

        r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader> = $r2;

        return;
    }

    public void initializeHeader(java.io.RandomAccessFile) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        java.io.RandomAccessFile r1;
        java.io.IOException $r3;
        ORG.as220.tinySQL.tinySQLException $r4;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 := @parameter0: java.io.RandomAccessFile;

     label1:
        virtualinvoke r0.<ORG.as220.tinySQL.DBFHeader: void readFileHeader(java.io.RandomAccessFile)>(r1);

        virtualinvoke r0.<ORG.as220.tinySQL.DBFHeader: void readColHeader(java.io.RandomAccessFile)>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r4.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Error reading the header of the table", $r3);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void <init>(ORG.as220.tinySQL.DBFHeader, int, java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.DBFHeader r0, r1;
        int i0, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r2;
        byte[] $r3, $r4, $r5, $r6, $r7;
        short $s1;
        java.lang.NullPointerException $r8;
        ORG.as220.tinySQL.tinySQLException $r9, $r10;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 := @parameter0: ORG.as220.tinySQL.DBFHeader;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ORG.as220.tinySQL.DBFHeader: short file_update_year> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: short file_update_month> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: short file_update_day> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: int numFields> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: int numRecords> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: int headerLength> = -1;

        r0.<ORG.as220.tinySQL.DBFHeader: int recordLength> = 0;

        if i0 <= 255 goto label1;

        $r10 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r10.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("There are not more than 255 columns per table supported");

        throw $r10;

     label1:
        if i0 >= 0 goto label2;

        $r9 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r9.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Negative column count is invalid.");

        throw $r9;

     label2:
        r0.<ORG.as220.tinySQL.DBFHeader: java.lang.String encoding> = r2;

        if r2 != null goto label3;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Auto-Mode encoding is not applicable to created tables");

        throw $r8;

     label3:
        $r3 = newarray (byte)[32];

        r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader> = $r3;

        $r5 = r1.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $r4 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 0, 32);

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void applyFileHeader()>();

        $s1 = r1.<ORG.as220.tinySQL.DBFHeader: short type>;

        if $s1 != 48 goto label4;

        $i4 = i0 * 32;

        $i5 = $i4 + 1;

        $i6 = $i5 + 263;

        $r7 = newarray (byte)[$i6];

        r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader> = $r7;

        goto label5;

     label4:
        $i2 = i0 * 32;

        $i3 = $i2 + 1;

        $r6 = newarray (byte)[$i3];

        r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader> = $r6;

     label5:
        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void setTimestamp()>();

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void setNumberOfFields(int)>(i0);

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void setRecordLength(int)>(-1);

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void setNumRecords(int)>(0);

        return;
    }

    public void <init>(int, short, java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        int i0, $i2, $i3;
        short s1;
        java.lang.String r1;
        byte[] $r2, $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        i0 := @parameter0: int;

        s1 := @parameter1: short;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ORG.as220.tinySQL.DBFHeader: short file_update_year> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: short file_update_month> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: short file_update_day> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: int numFields> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: int numRecords> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: int headerLength> = -1;

        r0.<ORG.as220.tinySQL.DBFHeader: int recordLength> = 0;

        r0.<ORG.as220.tinySQL.DBFHeader: java.lang.String encoding> = r1;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Auto-Mode encoding is not applicable to created tables");

        throw $r4;

     label1:
        $r2 = newarray (byte)[32];

        r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader> = $r2;

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void setTimestamp()>();

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void setType(short)>(s1);

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void setNumberOfFields(int)>(i0);

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void setRecordLength(int)>(-1);

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void setNumRecords(int)>(0);

        $i2 = virtualinvoke r0.<ORG.as220.tinySQL.DBFHeader: int getHeaderLength()>();

        $i3 = $i2 - 32;

        $r3 = newarray (byte)[$i3];

        r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader> = $r3;

        return;
    }

    public void create(java.lang.String, java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        java.lang.String r1, r2, $r6, $r8, $r14;
        java.io.File $r4;
        java.lang.StringBuilder $r5, $r7, $r11, $r12, $r13;
        boolean $z0;
        java.io.RandomAccessFile $r9, $r18;
        ORG.as220.tinySQL.tinySQLException $r10, $r16;
        java.lang.Exception $r15, $r17;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void mkDataDirectory(java.lang.String)>(r1);

        $r4 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".DBF");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, $r8);

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $r10 = new ORG.as220.tinySQL.tinySQLException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Table ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exists.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label2:
        $r9 = new java.io.RandomAccessFile;

        specialinvoke $r9.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r4, "rw");

        r0.<ORG.as220.tinySQL.DBFHeader: java.io.RandomAccessFile ff> = $r9;

     label3:
        goto label9;

     label4:
        $r17 := @caughtexception;

     label5:
        $r18 = r0.<ORG.as220.tinySQL.DBFHeader: java.io.RandomAccessFile ff>;

        virtualinvoke $r18.<java.io.RandomAccessFile: void close()>();

     label6:
        goto label8;

     label7:
        $r15 := @caughtexception;

     label8:
        $r16 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r16.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r17);

        throw $r16;

     label9:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public void close() throws java.lang.IllegalStateException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        java.io.RandomAccessFile $r3, $r4, $r5, $r6, $r8, $r12;
        java.io.FileDescriptor $r7;
        java.lang.IllegalStateException $r9;
        java.lang.Exception $r10, $r11;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        $r3 = r0.<ORG.as220.tinySQL.DBFHeader: java.io.RandomAccessFile ff>;

        if $r3 != null goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This file is not created by create()");

        throw $r9;

     label1:
        $r4 = r0.<ORG.as220.tinySQL.DBFHeader: java.io.RandomAccessFile ff>;

        virtualinvoke r0.<ORG.as220.tinySQL.DBFHeader: void writeFileHeader(java.io.RandomAccessFile)>($r4);

        $r5 = r0.<ORG.as220.tinySQL.DBFHeader: java.io.RandomAccessFile ff>;

        virtualinvoke r0.<ORG.as220.tinySQL.DBFHeader: void writeColHeader(java.io.RandomAccessFile)>($r5);

        $r6 = r0.<ORG.as220.tinySQL.DBFHeader: java.io.RandomAccessFile ff>;

        $r7 = virtualinvoke $r6.<java.io.RandomAccessFile: java.io.FileDescriptor getFD()>();

        virtualinvoke $r7.<java.io.FileDescriptor: void sync()>();

        $r8 = r0.<ORG.as220.tinySQL.DBFHeader: java.io.RandomAccessFile ff>;

        virtualinvoke $r8.<java.io.RandomAccessFile: void close()>();

        r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader> = null;

        r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader> = null;

     label2:
        goto label8;

     label3:
        $r11 := @caughtexception;

     label4:
        $r12 = r0.<ORG.as220.tinySQL.DBFHeader: java.io.RandomAccessFile ff>;

        virtualinvoke $r12.<java.io.RandomAccessFile: void close()>();

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

     label7:
        staticinvoke <ORG.as220.tinySQL.util.Log: void error(java.lang.String,java.lang.Exception)>("Failed to write the header.", $r11);

     label8:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public int getNumberOfRecords()
    {
        ORG.as220.tinySQL.DBFHeader r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        $i0 = r0.<ORG.as220.tinySQL.DBFHeader: int numRecords>;

        return $i0;
    }

    public int getNumberOfFields()
    {
        ORG.as220.tinySQL.DBFHeader r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        $i0 = r0.<ORG.as220.tinySQL.DBFHeader: int numFields>;

        return $i0;
    }

    public int getRecordLength()
    {
        ORG.as220.tinySQL.DBFHeader r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        $i0 = r0.<ORG.as220.tinySQL.DBFHeader: int recordLength>;

        return $i0;
    }

    public int getHeaderLength()
    {
        ORG.as220.tinySQL.DBFHeader r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        $i0 = r0.<ORG.as220.tinySQL.DBFHeader: int headerLength>;

        return $i0;
    }

    public int getType()
    {
        ORG.as220.tinySQL.DBFHeader r0;
        short $s0;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        $s0 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        return $s0;
    }

    private void setType(short)
    {
        ORG.as220.tinySQL.DBFHeader r0;
        short s0;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        s0 := @parameter0: short;

        r0.<ORG.as220.tinySQL.DBFHeader: short type> = s0;

        return;
    }

    public java.util.Vector getFields()
    {
        ORG.as220.tinySQL.DBFHeader r0;
        java.util.Enumeration r2;
        java.util.Vector $r4, $r5, $r6;
        int $i0;
        boolean $z0;
        ORG.as220.tinySQL.tsColumn $r7, $r9;
        java.lang.Object $r8;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        $r4 = new java.util.Vector;

        $r5 = r0.<ORG.as220.tinySQL.DBFHeader: java.util.Vector coldefsSorted>;

        $i0 = virtualinvoke $r5.<java.util.Vector: int size()>();

        specialinvoke $r4.<java.util.Vector: void <init>(int)>($i0);

        $r6 = r0.<ORG.as220.tinySQL.DBFHeader: java.util.Vector coldefsSorted>;

        r2 = virtualinvoke $r6.<java.util.Vector: java.util.Enumeration elements()>();

        goto label2;

     label1:
        $r7 = new ORG.as220.tinySQL.tsColumn;

        $r8 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r9 = (ORG.as220.tinySQL.tsColumn) $r8;

        specialinvoke $r7.<ORG.as220.tinySQL.tsColumn: void <init>(ORG.as220.tinySQL.tsColumn)>($r9);

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>($r7);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        return $r4;
    }

    public ORG.as220.tinySQL.tsColumn getColumnDefinition(int)
    {
        ORG.as220.tinySQL.DBFHeader r0;
        int i0;
        ORG.as220.tinySQL.tsColumn r1;
        java.util.Vector $r2;
        java.lang.Object $r3;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        i0 := @parameter0: int;

        $r2 = r0.<ORG.as220.tinySQL.DBFHeader: java.util.Vector coldefsSorted>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        r1 = (ORG.as220.tinySQL.tsColumn) $r3;

        return r1;
    }

    public void writeFileHeader(java.io.RandomAccessFile) throws java.io.IOException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        java.io.RandomAccessFile r1;
        short $s0;
        byte $b1, $b3;
        byte[] $r2, $r4, $r5;
        java.lang.String $r3;
        int $i2;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 := @parameter0: java.io.RandomAccessFile;

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void setTimestamp()>();

        $r2 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $s0 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        $b1 = (byte) $s0;

        $r2[0] = $b1;

        $r4 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $r3 = r0.<ORG.as220.tinySQL.DBFHeader: java.lang.String encoding>;

        $i2 = virtualinvoke r0.<ORG.as220.tinySQL.DBFHeader: int transformEncoding(java.lang.String)>($r3);

        $b3 = (byte) $i2;

        $r4[29] = $b3;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>(0L);

        $r5 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        virtualinvoke r1.<java.io.RandomAccessFile: void write(byte[])>($r5);

        return;
    }

    public void readFileHeader(java.io.RandomAccessFile) throws java.io.IOException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        java.io.RandomAccessFile r1;
        byte[] $r2;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 := @parameter0: java.io.RandomAccessFile;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>(0L);

        $r2 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        virtualinvoke r1.<java.io.RandomAccessFile: void readFully(byte[])>($r2);

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void applyFileHeader()>();

        return;
    }

    private void applyFileHeader()
    {
        ORG.as220.tinySQL.DBFHeader r0;
        java.lang.String r1, $r15, $r17, $r19, $r23, $r26, $r29, $r31, $r33;
        byte[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, r34, r35, $r36;
        byte $b0, $b2, $b4, $b6, $b8, $b9, $b10, $b11, $b13, $b14, $b16, $b17, $b19;
        short $s1, $s3, $s5, $s7, $s20;
        double $d0;
        int $i12, $i15, $i18, $i21, $i22;
        boolean $z0, $z1;
        java.lang.StringBuilder $r16, $r18, $r20, $r21, $r22, $r24, $r25, $r27, $r28, $r30, $r32;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        $r2 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b0 = $r2[0];

        $s1 = staticinvoke <ORG.as220.tinySQL.Utils: short fixByte(byte)>($b0);

        r0.<ORG.as220.tinySQL.DBFHeader: short type> = $s1;

        $r3 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b2 = $r3[1];

        $s3 = staticinvoke <ORG.as220.tinySQL.Utils: short fixByte(byte)>($b2);

        r0.<ORG.as220.tinySQL.DBFHeader: short file_update_year> = $s3;

        $r4 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b4 = $r4[2];

        $s5 = staticinvoke <ORG.as220.tinySQL.Utils: short fixByte(byte)>($b4);

        r0.<ORG.as220.tinySQL.DBFHeader: short file_update_month> = $s5;

        $r5 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b6 = $r5[3];

        $s7 = staticinvoke <ORG.as220.tinySQL.Utils: short fixByte(byte)>($b6);

        r0.<ORG.as220.tinySQL.DBFHeader: short file_update_day> = $s7;

        r34 = newarray (byte)[4];

        $r6 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b8 = $r6[4];

        r34[0] = $b8;

        $r7 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b9 = $r7[5];

        r34[1] = $b9;

        $r8 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b10 = $r8[6];

        r34[2] = $b10;

        $r9 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b11 = $r9[7];

        r34[3] = $b11;

        $d0 = staticinvoke <ORG.as220.tinySQL.Utils: double vax_to_long(byte[])>(r34);

        $i12 = (int) $d0;

        r0.<ORG.as220.tinySQL.DBFHeader: int numRecords> = $i12;

        r35 = newarray (byte)[2];

        $r10 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b13 = $r10[8];

        r35[0] = $b13;

        $r11 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b14 = $r11[9];

        r35[1] = $b14;

        $i15 = staticinvoke <ORG.as220.tinySQL.Utils: int vax_to_short(byte[])>(r35);

        r0.<ORG.as220.tinySQL.DBFHeader: int headerLength> = $i15;

        $r12 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b16 = $r12[10];

        r35[0] = $b16;

        $r13 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b17 = $r13[11];

        r35[1] = $b17;

        $i18 = staticinvoke <ORG.as220.tinySQL.Utils: int vax_to_short(byte[])>(r35);

        r0.<ORG.as220.tinySQL.DBFHeader: int recordLength> = $i18;

        $r14 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b19 = $r14[29];

        $s20 = staticinvoke <ORG.as220.tinySQL.Utils: short fixByte(byte)>($b19);

        r1 = specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: java.lang.String resolveEncoding(int)>($s20);

        if r1 != null goto label1;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to determine table codepage, using default: ");

        $r31 = r0.<ORG.as220.tinySQL.DBFHeader: java.lang.String encoding>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void info(java.lang.String)>($r33);

        goto label4;

     label1:
        $z0 = r0.<ORG.as220.tinySQL.DBFHeader: boolean autoEncoding>;

        if $z0 == 0 goto label2;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("Table encoding set to : ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void info(java.lang.String)>($r29);

        r0.<ORG.as220.tinySQL.DBFHeader: java.lang.String encoding> = r1;

        goto label4;

     label2:
        $r15 = r0.<ORG.as220.tinySQL.DBFHeader: java.lang.String encoding>;

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label3;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Table encoding of \'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not match specified encoding of \'");

        $r23 = r0.<ORG.as220.tinySQL.DBFHeader: java.lang.String encoding>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void warn(java.lang.String)>($r26);

        goto label4;

     label3:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Table uses encoding of ");

        $r17 = r0.<ORG.as220.tinySQL.DBFHeader: java.lang.String encoding>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void info(java.lang.String)>($r19);

     label4:
        $i21 = r0.<ORG.as220.tinySQL.DBFHeader: int headerLength>;

        $i22 = $i21 - 32;

        $r36 = newarray (byte)[$i22];

        r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader> = $r36;

        return;
    }

    public java.lang.String getEncoding()
    {
        ORG.as220.tinySQL.DBFHeader r0;
        java.lang.String $r1;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        $r1 = r0.<ORG.as220.tinySQL.DBFHeader: java.lang.String encoding>;

        return $r1;
    }

    private java.lang.String resolveEncoding(int)
    {
        ORG.as220.tinySQL.DBFHeader r0;
        int i0;
        java.lang.String r1;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        i0 := @parameter0: int;

        r1 = r0.<ORG.as220.tinySQL.DBFHeader: java.lang.String encoding>;

        lookupswitch(i0)
        {
            case 1: goto label02;
            case 2: goto label05;
            case 3: goto label19;
            case 4: goto label24;
            case 15: goto label01;
            case 100: goto label06;
            case 101: goto label10;
            case 102: goto label09;
            case 103: goto label08;
            case 104: goto label12;
            case 105: goto label03;
            case 106: goto label04;
            case 107: goto label07;
            case 120: goto label16;
            case 121: goto label15;
            case 122: goto label14;
            case 123: goto label13;
            case 124: goto label11;
            case 125: goto label22;
            case 126: goto label23;
            case 150: goto label26;
            case 151: goto label27;
            case 152: goto label25;
            case 200: goto label17;
            case 201: goto label18;
            case 202: goto label21;
            case 203: goto label20;
            default: goto label28;
        };

     label01:
        r1 = "Cp850";

        goto label28;

     label02:
        r1 = "Cp437";

        goto label28;

     label03:
        r1 = "Cp620";

        goto label28;

     label04:
        r1 = "Cp737";

        goto label28;

     label05:
        r1 = "Cp850";

        goto label28;

     label06:
        r1 = "Cp852";

        goto label28;

     label07:
        r1 = "Cp857";

        goto label28;

     label08:
        r1 = "Cp861";

        goto label28;

     label09:
        r1 = "Cp865";

        goto label28;

     label10:
        r1 = "Cp866";

        goto label28;

     label11:
        r1 = "Cp874";

        goto label28;

     label12:
        r1 = "Cp895";

        goto label28;

     label13:
        r1 = "Cp932";

        goto label28;

     label14:
        r1 = "Cp936";

        goto label28;

     label15:
        r1 = "Cp949";

        goto label28;

     label16:
        r1 = "Cp950";

        goto label28;

     label17:
        r1 = "Cp1250";

        goto label28;

     label18:
        r1 = "Cp1251";

        goto label28;

     label19:
        r1 = "Cp1252";

        goto label28;

     label20:
        r1 = "Cp1253";

        goto label28;

     label21:
        r1 = "Cp1254";

        goto label28;

     label22:
        r1 = "Cp1255";

        goto label28;

     label23:
        r1 = "Cp1256";

        goto label28;

     label24:
        r1 = "Cp10000";

        goto label28;

     label25:
        r1 = "Cp10006";

        goto label28;

     label26:
        r1 = "Cp10007";

        goto label28;

     label27:
        r1 = "Cp10029";

     label28:
        return r1;
    }

    public int transformEncoding(java.lang.String)
    {
        ORG.as220.tinySQL.DBFHeader r0;
        java.lang.String r1, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp437");

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp620");

        if $z1 == 0 goto label02;

        return 105;

     label02:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp737");

        if $z2 == 0 goto label03;

        return 106;

     label03:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp850");

        if $z3 == 0 goto label04;

        return 2;

     label04:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp852");

        if $z4 == 0 goto label05;

        return 100;

     label05:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp857");

        if $z5 == 0 goto label06;

        return 107;

     label06:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp861");

        if $z6 == 0 goto label07;

        return 103;

     label07:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp865");

        if $z7 == 0 goto label08;

        return 102;

     label08:
        $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp866");

        if $z8 == 0 goto label09;

        return 101;

     label09:
        $z9 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp874");

        if $z9 == 0 goto label10;

        return 124;

     label10:
        $z10 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp895");

        if $z10 == 0 goto label11;

        return 104;

     label11:
        $z11 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp932");

        if $z11 == 0 goto label12;

        return 123;

     label12:
        $z12 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp936");

        if $z12 == 0 goto label13;

        return 122;

     label13:
        $z13 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp949");

        if $z13 == 0 goto label14;

        return 121;

     label14:
        $z14 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp950");

        if $z14 == 0 goto label15;

        return 120;

     label15:
        $z15 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp1250");

        if $z15 == 0 goto label16;

        return 200;

     label16:
        $z16 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp1251");

        if $z16 == 0 goto label17;

        return 201;

     label17:
        $z17 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp1252");

        if $z17 == 0 goto label18;

        return 3;

     label18:
        $z18 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp1253");

        if $z18 == 0 goto label19;

        return 203;

     label19:
        $z19 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp1254");

        if $z19 == 0 goto label20;

        return 202;

     label20:
        $z20 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp1255");

        if $z20 == 0 goto label21;

        return 125;

     label21:
        $z21 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp1256");

        if $z21 == 0 goto label22;

        return 126;

     label22:
        $z22 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp10000");

        if $z22 == 0 goto label23;

        return 4;

     label23:
        $z23 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp10006");

        if $z23 == 0 goto label24;

        return 152;

     label24:
        $z24 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp10007");

        if $z24 == 0 goto label25;

        return 150;

     label25:
        $z25 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("Cp10029");

        if $z25 == 0 goto label26;

        return 151;

     label26:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Specified Encoding [");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not defined, using default: Cp1252");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void warn(java.lang.String)>($r5);

        return 3;
    }

    public void writeColHeader(java.io.RandomAccessFile) throws java.io.IOException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        java.io.RandomAccessFile r1;
        int $i0, $i1;
        byte[] $r2, $r3;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 := @parameter0: java.io.RandomAccessFile;

        $r2 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i0 = r0.<ORG.as220.tinySQL.DBFHeader: int numFields>;

        $i1 = $i0 * 32;

        $r2[$i1] = 13;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>(32L);

        $r3 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        virtualinvoke r1.<java.io.RandomAccessFile: void write(byte[])>($r3);

        return;
    }

    public void readColHeader(java.io.RandomAccessFile) throws java.io.IOException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        java.io.RandomAccessFile r1;
        int i0, $i1, $i2, $i4, $i5, i6, i7;
        ORG.as220.tinySQL.tsColumn r3;
        byte[] $r4, $r6, $r7;
        java.util.Vector $r5;
        byte $b3;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 := @parameter0: java.io.RandomAccessFile;

        virtualinvoke r1.<java.io.RandomAccessFile: void seek(long)>(32L);

        $r4 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        virtualinvoke r1.<java.io.RandomAccessFile: void readFully(byte[])>($r4);

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        i6 = 1;

        i7 = 0;

        $r6 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i1 = lengthof $r6;

        i0 = $i1 / 32;

        goto label2;

     label1:
        r3 = specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: ORG.as220.tinySQL.tsColumn extractColdef(int)>(i7);

        virtualinvoke r3.<ORG.as220.tinySQL.tsColumn: void setBytePosition(int)>(i6);

        virtualinvoke r3.<ORG.as220.tinySQL.tsColumn: void setTablePosition(int)>(i7);

        virtualinvoke $r5.<java.util.Vector: boolean add(java.lang.Object)>(r3);

        i7 = i7 + 1;

        $i5 = specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: int calculateSize(ORG.as220.tinySQL.tsColumn)>(r3);

        i6 = i6 + $i5;

     label2:
        $r7 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i2 = i7 * 32;

        $b3 = $r7[$i2];

        if $b3 == 13 goto label3;

        if i7 < i0 goto label1;

     label3:
        $i4 = virtualinvoke r0.<ORG.as220.tinySQL.DBFHeader: int getRecordLength()>();

        if i6 == $i4 goto label4;

        staticinvoke <ORG.as220.tinySQL.util.Log: void warn(java.lang.String)>("calcuated recordlength does not match defined record length");

     label4:
        r0.<ORG.as220.tinySQL.DBFHeader: int numFields> = i7;

        r0.<ORG.as220.tinySQL.DBFHeader: java.util.Vector coldefsSorted> = $r5;

        return;
    }

    private void mkDataDirectory(java.lang.String) throws java.lang.NullPointerException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        java.lang.String r1;
        java.io.File $r3;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r3.<java.io.File: boolean mkdir()>();

     label1:
        return;
    }

    private void setTimestamp()
    {
        ORG.as220.tinySQL.DBFHeader r0;
        java.util.Calendar r1;
        int i0, i1, $i2, i6, i7;
        java.util.Date $r2;
        byte $b3, $b4, $b5;
        byte[] $r3, $r4, $r5;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>()>();

        virtualinvoke r1.<java.util.Calendar: void setTime(java.util.Date)>($r2);

        i0 = virtualinvoke r1.<java.util.Calendar: int get(int)>(5);

        $i2 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        i1 = $i2 + 1;

        i6 = virtualinvoke r1.<java.util.Calendar: int get(int)>(1);

        i7 = i6 % 100;

        $r3 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b3 = (byte) i7;

        $r3[1] = $b3;

        $r4 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b4 = (byte) i1;

        $r4[2] = $b4;

        $r5 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b5 = (byte) i0;

        $r5[3] = $b5;

        return;
    }

    public void updateNumberOfRecords(int, java.io.RandomAccessFile) throws java.io.IOException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        int i0;
        java.io.RandomAccessFile r1;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.RandomAccessFile;

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void setNumRecords(int)>(i0);

        virtualinvoke r0.<ORG.as220.tinySQL.DBFHeader: void writeFileHeader(java.io.RandomAccessFile)>(r1);

        return;
    }

    private void setNumRecords(int)
    {
        ORG.as220.tinySQL.DBFHeader r0;
        int i0;
        byte[] r1, $r2, $r3, $r4, $r5;
        byte $b1, $b2, $b3, $b4;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        i0 := @parameter0: int;

        r0.<ORG.as220.tinySQL.DBFHeader: int numRecords> = i0;

        r1 = staticinvoke <ORG.as220.tinySQL.Utils: byte[] intToLittleEndian(int)>(i0);

        $r2 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b1 = r1[0];

        $r2[4] = $b1;

        $r3 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b2 = r1[1];

        $r3[5] = $b2;

        $r4 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b3 = r1[2];

        $r4[6] = $b3;

        $r5 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b4 = r1[3];

        $r5[7] = $b4;

        return;
    }

    private void setNumberOfFields(int) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        i0 := @parameter0: int;

        r0.<ORG.as220.tinySQL.DBFHeader: int numFields> = i0;

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void adjustHeaderLength()>();

        return;
    }

    private void adjustHeaderLength()
    {
        ORG.as220.tinySQL.DBFHeader r0;
        byte[] r1, $r2, $r3;
        short $s0, $s5;
        int $i1, $i2, $i3, $i4, $i8, $i9, $i10, $i11;
        byte $b6, $b7;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        $s0 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        if $s0 != 48 goto label1;

        $i8 = r0.<ORG.as220.tinySQL.DBFHeader: int numFields>;

        $i9 = $i8 * 32;

        $i10 = 33 + $i9;

        $i11 = $i10 + 263;

        r0.<ORG.as220.tinySQL.DBFHeader: int headerLength> = $i11;

        goto label2;

     label1:
        $i1 = r0.<ORG.as220.tinySQL.DBFHeader: int numFields>;

        $i2 = $i1 * 32;

        $i3 = 33 + $i2;

        r0.<ORG.as220.tinySQL.DBFHeader: int headerLength> = $i3;

     label2:
        $i4 = r0.<ORG.as220.tinySQL.DBFHeader: int headerLength>;

        $s5 = (short) $i4;

        r1 = staticinvoke <ORG.as220.tinySQL.Utils: byte[] shortToLittleEndian(short)>($s5);

        $r2 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b6 = r1[0];

        $r2[8] = $b6;

        $r3 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b7 = r1[1];

        $r3[9] = $b7;

        return;
    }

    private void setRecordLength(int)
    {
        ORG.as220.tinySQL.DBFHeader r0;
        int i0;
        byte[] r1, $r2, $r3, $r4, $r5;
        short $s1;
        byte $b2, $b3;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        i0 := @parameter0: int;

        r0.<ORG.as220.tinySQL.DBFHeader: int recordLength> = i0;

        if i0 >= 1 goto label1;

        $r4 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $r4[10] = 0;

        $r5 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $r5[11] = 0;

        goto label2;

     label1:
        $s1 = (short) i0;

        r1 = staticinvoke <ORG.as220.tinySQL.Utils: byte[] shortToLittleEndian(short)>($s1);

        $r2 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b2 = r1[0];

        $r2[10] = $b2;

        $r3 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b3 = r1[1];

        $r3[11] = $b3;

     label2:
        return;
    }

    private void setReserved() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        byte[] r1, $r2;
        int $i0, $i2, i3;
        byte $b1;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 = newarray (byte)[20];

        i3 = 0;

        goto label2;

     label1:
        $r2 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $i2 = 12 + i3;

        $b1 = r1[i3];

        $r2[$i2] = $b1;

        i3 = i3 + 1;

     label2:
        $i0 = lengthof r1;

        if i3 < $i0 goto label1;

        return;
    }

    public void setColDefinitions(java.util.Vector) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        java.util.Vector r1, $r4;
        ORG.as220.tinySQL.tsColumn r2;
        int $i0, $i1, $i2, $i3, i4, i5;
        java.lang.Object $r3;
        ORG.as220.tinySQL.tinySQLException $r5, $r7;
        java.lang.Exception $r6;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 := @parameter0: java.util.Vector;

        $i0 = virtualinvoke r1.<java.util.Vector: int size()>();

        $i1 = r0.<ORG.as220.tinySQL.DBFHeader: int numFields>;

        if $i0 == $i1 goto label1;

        $r5 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r5.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("the specified vector has not enough columndefs");

        throw $r5;

     label1:
        i4 = 1;

        i5 = 0;

        goto label3;

     label2:
        $r3 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i5);

        r2 = (ORG.as220.tinySQL.tsColumn) $r3;

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void setColdef(int,ORG.as220.tinySQL.tsColumn)>(i5, r2);

        virtualinvoke r2.<ORG.as220.tinySQL.tsColumn: void setBytePosition(int)>(i4);

        virtualinvoke r2.<ORG.as220.tinySQL.tsColumn: void setTablePosition(int)>(i5);

        $i3 = specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: int calculateSize(ORG.as220.tinySQL.tsColumn)>(r2);

        i4 = i4 + $i3;

        i5 = i5 + 1;

     label3:
        $i2 = virtualinvoke r1.<java.util.Vector: int size()>();

        if i5 < $i2 goto label2;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>(java.util.Collection)>(r1);

        r0.<ORG.as220.tinySQL.DBFHeader: java.util.Vector coldefsSorted> = $r4;

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void setRecordLength(int)>(i4);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r7.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r6);

        throw $r7;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    private int calculateSize(ORG.as220.tinySQL.tsColumn)
    {
        ORG.as220.tinySQL.DBFHeader r0;
        ORG.as220.tinySQL.tsColumn r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        $i0 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i0 == 2005 goto label1;

        $i1 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i1 != 2004 goto label2;

     label1:
        return 10;

     label2:
        $i2 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i2 != 91 goto label3;

        return 8;

     label3:
        $i3 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i3 != 93 goto label4;

        return 8;

     label4:
        $i4 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i4 != 4 goto label5;

        return 4;

     label5:
        $i5 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getSize()>();

        return $i5;
    }

    private void setColdef(int, ORG.as220.tinySQL.tsColumn) throws java.io.UnsupportedEncodingException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i8, $i9, $i11, $i12, $i14, $i16, $i17, $i19, $i20, $i23, $i25, $i26, i27, $i30, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, i40;
        ORG.as220.tinySQL.tsColumn r1;
        byte[] r2, $r6, $r8, $r9, $r10, $r12, $r13, $r14, $r26, $r27, $r28, $r29, $r30, r31, r32;
        java.lang.String $r3, $r4, $r5, $r11;
        byte $b6, $b10, $b13, $b15, $b18, $b22, $b24, b29, $b31;
        boolean $z0, $z1, $z2, $z3;
        ORG.as220.tinySQL.tinySQLException $r7, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        short $s21;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        i0 := @parameter0: int;

        r1 := @parameter1: ORG.as220.tinySQL.tsColumn;

        i1 = i0 * 32;

        $r3 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: java.lang.String getPhysicalName()>();

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i3 <= 10 goto label01;

        $r25 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r25.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("IllegalName: Name must have a length of 10 or lesser.");

        throw $r25;

     label01:
        $r4 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: java.lang.String getPhysicalName()>();

        $r5 = r0.<ORG.as220.tinySQL.DBFHeader: java.lang.String encoding>;

        r2 = staticinvoke <ORG.as220.tinySQL.Utils: byte[] forceToSize(java.lang.String,int,byte,java.lang.String)>($r4, 11, 0, $r5);

        i27 = 0;

        goto label03;

     label02:
        $r6 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i5 = i1 + 0;

        $i7 = $i5 + i27;

        $b6 = r2[i27];

        $r6[$i7] = $b6;

        i27 = i27 + 1;

     label03:
        $i4 = lengthof r2;

        if i27 < $i4 goto label02;

        i2 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        lookupswitch(i2)
        {
            case -7: goto label16;
            case -6: goto label07;
            case -5: goto label08;
            case -2: goto label04;
            case -1: goto label04;
            case 1: goto label04;
            case 2: goto label15;
            case 3: goto label15;
            case 4: goto label10;
            case 5: goto label09;
            case 6: goto label12;
            case 7: goto label14;
            case 8: goto label13;
            case 12: goto label04;
            case 91: goto label18;
            case 93: goto label19;
            case 2004: goto label05;
            case 2005: goto label05;
            default: goto label23;
        };

     label04:
        b29 = 67;

        goto label24;

     label05:
        $z0 = virtualinvoke r0.<ORG.as220.tinySQL.DBFHeader: boolean supportsMemos()>();

        if $z0 == 0 goto label06;

        b29 = 77;

        goto label24;

     label06:
        $r7 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r7.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("This table does not support MEMO");

        throw $r7;

     label07:
        $r22 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r22.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Inavlid type specified: TINYINT");

        throw $r22;

     label08:
        $r21 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r21.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Inavlid type specified: BIG INTEGER");

        throw $r21;

     label09:
        $r19 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r19.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Inavlid type specified: SMALL INT");

        throw $r19;

     label10:
        $z2 = virtualinvoke r0.<ORG.as220.tinySQL.DBFHeader: boolean supportsInteger()>();

        if $z2 == 0 goto label11;

        b29 = 73;

        virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: void setSize(int,int)>(4, 0);

        goto label24;

     label11:
        $r20 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r20.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("This table does not support INTEGER");

        throw $r20;

     label12:
        $r18 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r18.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Inavlid type specified: FLOAT");

        throw $r18;

     label13:
        $r16 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r16.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Inavlid type specified: DOUBLE");

        throw $r16;

     label14:
        $r17 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r17.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Inavlid type specified: REAL");

        throw $r17;

     label15:
        b29 = 78;

        goto label24;

     label16:
        $z3 = virtualinvoke r0.<ORG.as220.tinySQL.DBFHeader: boolean supportsLogical()>();

        if $z3 == 0 goto label17;

        b29 = 76;

        virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: void setSize(int,int)>(1, 0);

        goto label24;

     label17:
        $r23 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r23.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("This table does not support LOGICAL");

        throw $r23;

     label18:
        b29 = 68;

        virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: void setSize(int,int)>(8, 0);

        goto label24;

     label19:
        $z1 = virtualinvoke r0.<ORG.as220.tinySQL.DBFHeader: boolean supportsTimestamp()>();

        if $z1 != 0 goto label20;

        $r15 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r15.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("This table does not support TIMESTAMP");

        throw $r15;

     label20:
        $i26 = virtualinvoke r0.<ORG.as220.tinySQL.DBFHeader: int getType()>();

        if $i26 != 48 goto label21;

        b29 = 84;

        goto label22;

     label21:
        b29 = 64;

     label22:
        virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: void setSize(int,int)>(8, 4);

        goto label24;

     label23:
        $r24 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r24.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Inavlid type specified, unable to determine type");

        throw $r24;

     label24:
        $r26 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i30 = i1 + 11;

        $b31 = (byte) b29;

        $r26[$i30] = $b31;

        $r27 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i32 = i1 + 12;

        $i33 = $i32 + 0;

        $r27[$i33] = 0;

        $r28 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i34 = i1 + 12;

        $i35 = $i34 + 1;

        $r28[$i35] = 0;

        $r29 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i36 = i1 + 12;

        $i37 = $i36 + 2;

        $r29[$i37] = 0;

        $r30 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i38 = i1 + 12;

        $i39 = $i38 + 3;

        $r30[$i39] = 0;

        if b29 != 67 goto label25;

        $i20 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getSize()>();

        $s21 = (short) $i20;

        r31 = staticinvoke <ORG.as220.tinySQL.Utils: byte[] shortToLittleEndian(short)>($s21);

        $r13 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i23 = i1 + 16;

        $b22 = r31[0];

        $r13[$i23] = $b22;

        $r14 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i25 = i1 + 17;

        $b24 = r31[1];

        $r14[$i25] = $b24;

        goto label26;

     label25:
        $r8 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i8 = i1 + 16;

        $i9 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getSize()>();

        $b10 = (byte) $i9;

        $r8[$i8] = $b10;

        $r9 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i11 = i1 + 17;

        $i12 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getDecimalPlaces()>();

        $b13 = (byte) $i12;

        $r9[$i11] = $b13;

     label26:
        $r10 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i14 = i1 + 18;

        $b15 = specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: byte getFieldFlags(ORG.as220.tinySQL.tsColumn)>(r1);

        $r10[$i14] = $b15;

        $r11 = r0.<ORG.as220.tinySQL.DBFHeader: java.lang.String encoding>;

        r32 = staticinvoke <ORG.as220.tinySQL.Utils: byte[] forceToSize(java.lang.String,int,byte,java.lang.String)>(null, 13, 0, $r11);

        i40 = 0;

        goto label28;

     label27:
        $r12 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i17 = i1 + 19;

        $i19 = $i17 + i40;

        $b18 = r32[i40];

        $r12[$i19] = $b18;

        i40 = i40 + 1;

     label28:
        $i16 = lengthof r32;

        if i40 < $i16 goto label27;

        return;
    }

    private byte getFieldFlags(ORG.as220.tinySQL.tsColumn)
    {
        ORG.as220.tinySQL.DBFHeader r0;
        ORG.as220.tinySQL.tsColumn r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        short s6, $s7;
        byte $b8;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        s6 = 0;

        $z0 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: boolean isNullable()>();

        if $z0 == 0 goto label1;

        s6 = 2;

     label1:
        $i0 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i0 == -2 goto label2;

        $i1 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i1 == 2004 goto label2;

        $i2 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i2 == -3 goto label2;

        $i3 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i3 == 93 goto label2;

        $i4 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i4 == 4 goto label2;

        $i5 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i5 != 8 goto label3;

     label2:
        $s7 = s6 | 4;

        s6 = (short) $s7;

     label3:
        $b8 = (byte) s6;

        return $b8;
    }

    private ORG.as220.tinySQL.tsColumn extractColdef(int) throws java.io.UnsupportedEncodingException
    {
        ORG.as220.tinySQL.DBFHeader r0;
        int i0, i1, i2, $i5, $i6, $i7, $i9, $i11, $i13, $i14, $i15, i16;
        char c3;
        byte b4, $b8, $b10, $b12;
        byte[] $r3, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r4, $r5;
        ORG.as220.tinySQL.tsColumn $r11;
        short s17;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        i0 := @parameter0: int;

        i1 = i0 * 32;

        $r3 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i5 = i1 + 0;

        i2 = specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: int seekNull(byte[],int,int)>($r3, $i5, 11);

        $r4 = new java.lang.String;

        $r6 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i6 = i1 + 0;

        $r5 = r0.<ORG.as220.tinySQL.DBFHeader: java.lang.String encoding>;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r6, $i6, i2, $r5);

        $r7 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i7 = i1 + 11;

        $b8 = $r7[$i7];

        c3 = (char) $b8;

        $r8 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i9 = i1 + 16;

        $b10 = $r8[$i9];

        i16 = staticinvoke <ORG.as220.tinySQL.Utils: short fixByte(byte)>($b10);

        $r9 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i11 = i1 + 17;

        $b12 = $r9[$i11];

        s17 = staticinvoke <ORG.as220.tinySQL.Utils: short fixByte(byte)>($b12);

        if c3 != 67 goto label1;

        $i15 = s17 * 256;

        i16 = i16 + $i15;

        s17 = 0;

     label1:
        $r10 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i13 = i1 + 18;

        b4 = $r10[$i13];

        $r11 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r11.<ORG.as220.tinySQL.tsColumn: void <init>(ORG.as220.tinySQL.tinySQLTableView,java.lang.String)>(null, $r4);

        $i14 = virtualinvoke r0.<ORG.as220.tinySQL.DBFHeader: int charToSqlType(char)>(c3);

        virtualinvoke $r11.<ORG.as220.tinySQL.tsColumn: void setType(int)>($i14);

        virtualinvoke $r11.<ORG.as220.tinySQL.tsColumn: void setSize(int,int)>(i16, s17);

        specialinvoke r0.<ORG.as220.tinySQL.DBFHeader: void checkFieldAfterRead(short,ORG.as220.tinySQL.tsColumn)>(b4, $r11);

        return $r11;
    }

    private void checkFieldAfterRead(short, ORG.as220.tinySQL.tsColumn)
    {
        ORG.as220.tinySQL.DBFHeader r0;
        short s0, $s1, $s2;
        ORG.as220.tinySQL.tsColumn r1;
        int $i3, $i4, $i5;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        s0 := @parameter0: short;

        r1 := @parameter1: ORG.as220.tinySQL.tsColumn;

        $s1 = s0 & 2;

        if $s1 != 2 goto label1;

        virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: void setNullable(boolean)>(1);

     label1:
        $s2 = s0 & 4;

        if $s2 != 4 goto label4;

        $i3 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i3 != 1 goto label2;

        virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: void setType(int)>(-2);

        goto label4;

     label2:
        $i4 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i4 != 2005 goto label3;

        virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: void setType(int)>(2004);

        goto label4;

     label3:
        $i5 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i5 != 12 goto label4;

        virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: void setType(int)>(2004);

     label4:
        return;
    }

    private int seekNull(byte[], int, int)
    {
        ORG.as220.tinySQL.DBFHeader r0;
        byte[] r1;
        int i0, i1, $i3, $i4, i5;
        byte b2;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i5 = i0;

        goto label3;

     label1:
        b2 = r1[i5];

        if b2 != 0 goto label2;

        $i4 = i5 - i0;

        return $i4;

     label2:
        i5 = i5 + 1;

     label3:
        $i3 = i1 + i0;

        if i5 < $i3 goto label1;

        return i1;
    }

    protected static java.lang.String typeToLiteral(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        return "CHAR";

     label1:
        if i0 != 2 goto label2;

        return "NUMERIC";

     label2:
        if i0 != -7 goto label3;

        return "BOOLEAN";

     label3:
        if i0 != 4 goto label4;

        return "INTEGER";

     label4:
        if i0 != -2 goto label5;

        return "BINARY";

     label5:
        if i0 != 91 goto label6;

        return "DATE";

     label6:
        if i0 != 2004 goto label7;

        return "BLOB";

     label7:
        if i0 != 2005 goto label8;

        return "CLOB";

     label8:
        if i0 != 93 goto label9;

        return "TIMESTAMP";

     label9:
        return "BINARY";
    }

    protected int charToSqlType(char)
    {
        ORG.as220.tinySQL.DBFHeader r0;
        char c0;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        c0 := @parameter0: char;

        if c0 != 67 goto label1;

        return 1;

     label1:
        if c0 != 78 goto label2;

        return 2;

     label2:
        if c0 != 76 goto label3;

        return -7;

     label3:
        if c0 != 77 goto label4;

        return 2005;

     label4:
        if c0 != 68 goto label5;

        return 91;

     label5:
        if c0 != 73 goto label6;

        return 4;

     label6:
        if c0 != 84 goto label7;

        return 93;

     label7:
        if c0 != 64 goto label8;

        return 93;

     label8:
        return -2;
    }

    public void copyDBFHeader(ORG.as220.tinySQL.DBFHeader) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.DBFHeader r0, r1;
        byte[] r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, r17, r18;
        int i0, $i1, $i9, $i10, $i12, $i13, $i14;
        byte $b2, $b3, $b4, $b5, $b6, $b7, $b8;
        short $s11;
        ORG.as220.tinySQL.tinySQLException $r16;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        r1 := @parameter0: ORG.as220.tinySQL.DBFHeader;

        $i1 = virtualinvoke r0.<ORG.as220.tinySQL.DBFHeader: int getRecordLength()>();

        if $i1 == 0 goto label1;

        $r16 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r16.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("This function is only valid on empty/new tables");

        throw $r16;

     label1:
        r2 = newarray (byte)[32];

        $r3 = r1.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, 32);

        $r4 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b2 = $r4[1];

        r2[1] = $b2;

        $r5 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b3 = $r5[2];

        r2[2] = $b3;

        $r6 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b4 = $r6[3];

        r2[3] = $b4;

        $r7 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b5 = $r7[8];

        r2[8] = $b5;

        $r8 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b6 = $r8[9];

        r2[9] = $b6;

        $r9 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b7 = $r9[10];

        r2[10] = $b7;

        $r10 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] fileHeader>;

        $b8 = $r10[11];

        r2[11] = $b8;

        $i9 = r0.<ORG.as220.tinySQL.DBFHeader: int numFields>;

        $i10 = $i9 * 32;

        i0 = $i10 + 1;

        $s11 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        if $s11 != 48 goto label2;

        $i13 = i0 + 263;

        r17 = newarray (byte)[$i13];

        $r14 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $r13 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i14 = lengthof $r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, r17, 0, $i14);

        $r15 = r1.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, i0, r17, 0, 263);

        goto label3;

     label2:
        r18 = newarray (byte)[i0];

        $r12 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $r11 = r0.<ORG.as220.tinySQL.DBFHeader: byte[] colHeader>;

        $i12 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r18, 0, $i12);

     label3:
        return;
    }

    public boolean supportsMemos()
    {
        ORG.as220.tinySQL.DBFHeader r0;
        short $s0, $s1, $s2, $s3;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        $s0 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        $s1 = $s0 & 4;

        if $s1 == 4 goto label1;

        $s2 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        $s3 = $s2 & 128;

        if $s3 != 128 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean supportsLogical()
    {
        ORG.as220.tinySQL.DBFHeader r0;
        short $s0, $s1;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        $s0 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        if $s0 == 2 goto label1;

        $s1 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        if $s1 != 251 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public boolean supportsInteger()
    {
        ORG.as220.tinySQL.DBFHeader r0;
        short $s0, $s1, $s2, $s3, $s4;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        $s0 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        if $s0 == 48 goto label1;

        $s1 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        if $s1 == 139 goto label1;

        $s2 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        if $s2 == 99 goto label1;

        $s3 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        if $s3 == 203 goto label1;

        $s4 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        if $s4 != 67 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean supportsTimestamp()
    {
        ORG.as220.tinySQL.DBFHeader r0;
        short $s0, $s1, $s2, $s3, $s4;

        r0 := @this: ORG.as220.tinySQL.DBFHeader;

        $s0 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        if $s0 == 48 goto label1;

        $s1 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        if $s1 == 139 goto label1;

        $s2 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        if $s2 == 99 goto label1;

        $s3 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        if $s3 == 203 goto label1;

        $s4 = r0.<ORG.as220.tinySQL.DBFHeader: short type>;

        if $s4 != 67 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static void <clinit>()
    {
        <ORG.as220.tinySQL.DBFHeader: int BACKLINK_STRUCTURE_SIZE> = 263;

        <ORG.as220.tinySQL.DBFHeader: int FIELD_FLAG_IS_BINARY> = 4;

        <ORG.as220.tinySQL.DBFHeader: int FIELD_FLAG_IS_NULLABLE> = 2;

        <ORG.as220.tinySQL.DBFHeader: int FIELD_FLAG_SYSTEM_COLUMN> = 1;

        <ORG.as220.tinySQL.DBFHeader: int FIELD_RESERVED_INDEX> = 19;

        <ORG.as220.tinySQL.DBFHeader: int FIELD_FLAGS_INDEX> = 18;

        <ORG.as220.tinySQL.DBFHeader: int DECIMAL_COUNT_INDEX> = 17;

        <ORG.as220.tinySQL.DBFHeader: int FIELD_LENGTH_INDEX> = 16;

        <ORG.as220.tinySQL.DBFHeader: int IMU_INDEX> = 12;

        <ORG.as220.tinySQL.DBFHeader: int FIELD_TYPE_INDEX> = 11;

        <ORG.as220.tinySQL.DBFHeader: int FIELD_NAME_INDEX> = 0;

        <ORG.as220.tinySQL.DBFHeader: int DBF_COLDEF_SIZE> = 32;

        <ORG.as220.tinySQL.DBFHeader: int TABLE_IS_DATABASE> = 4;

        <ORG.as220.tinySQL.DBFHeader: int TABLE_HAS_MEMO_FIELD> = 2;

        <ORG.as220.tinySQL.DBFHeader: int TABLE_HAS_STRUCTURE_CDX> = 1;

        <ORG.as220.tinySQL.DBFHeader: int DBF_HEADER_SIZE> = 32;

        <ORG.as220.tinySQL.DBFHeader: int ENCODING_INDEX> = 29;

        <ORG.as220.tinySQL.DBFHeader: int TABLE_FLAGS> = 28;

        <ORG.as220.tinySQL.DBFHeader: int RESERVED_INDEX> = 12;

        <ORG.as220.tinySQL.DBFHeader: int LENGTH_OF_REC_INDEX> = 10;

        <ORG.as220.tinySQL.DBFHeader: int LENGTH_OF_HEADER_INDEX> = 8;

        <ORG.as220.tinySQL.DBFHeader: int NUMBER_OF_REC_INDEX> = 4;

        <ORG.as220.tinySQL.DBFHeader: int DATE_INDEX> = 1;

        <ORG.as220.tinySQL.DBFHeader: int FLAG_INDEX> = 0;

        <ORG.as220.tinySQL.DBFHeader: int BULK_SIZE> = 32;

        <ORG.as220.tinySQL.DBFHeader: short TYPE_FOXBASE> = 251;

        <ORG.as220.tinySQL.DBFHeader: short TYPE_FOXPRO2> = 245;

        <ORG.as220.tinySQL.DBFHeader: short TYPE_DB4_SQLTABLE_MEMO> = 203;

        <ORG.as220.tinySQL.DBFHeader: short TYPE_DB4_MEMO> = 139;

        <ORG.as220.tinySQL.DBFHeader: short TYPE_DB3_MEMO> = 131;

        <ORG.as220.tinySQL.DBFHeader: short TYPE_DB4_SQLSYSTEM_NOMEMO> = 99;

        <ORG.as220.tinySQL.DBFHeader: short TYPE_DB4_SQLTABLE_NOMEMO> = 67;

        <ORG.as220.tinySQL.DBFHeader: short TYPE_VISUAL_FOXPRO> = 48;

        <ORG.as220.tinySQL.DBFHeader: short TYPE_DB3> = 3;

        <ORG.as220.tinySQL.DBFHeader: short TYPE_DB2> = 2;

        return;
    }
}
