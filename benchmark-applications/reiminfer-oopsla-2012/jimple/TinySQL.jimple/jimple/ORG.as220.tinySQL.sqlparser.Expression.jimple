public class ORG.as220.tinySQL.sqlparser.Expression extends java.lang.Object implements ORG.as220.tinySQL.sqlparser.LValue
{
    private ORG.as220.tinySQL.sqlparser.LValue value;
    private java.util.Vector addValues;
    private boolean transformed;

    public void <init>(ORG.as220.tinySQL.sqlparser.LValue)
    {
        ORG.as220.tinySQL.sqlparser.Expression r0;
        ORG.as220.tinySQL.sqlparser.LValue r1;
        java.util.Vector $r2;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.LValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues> = $r2;

        r0.<ORG.as220.tinySQL.sqlparser.Expression: ORG.as220.tinySQL.sqlparser.LValue value> = r1;

        return;
    }

    public void add(ORG.as220.tinySQL.sqlparser.Operator, ORG.as220.tinySQL.sqlparser.LValue)
    {
        ORG.as220.tinySQL.sqlparser.Expression r0;
        ORG.as220.tinySQL.sqlparser.Operator r1;
        ORG.as220.tinySQL.sqlparser.LValue r2;
        java.util.Vector $r5, $r8, $r11;
        boolean $z0;
        int $i0;
        ORG.as220.tinySQL.sqlparser.Expression$ValueContainer $r6, $r12;
        ORG.as220.tinySQL.sqlparser.StaticValue $r7;
        java.lang.Object $r9;
        java.lang.Exception $r10;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.Operator;

        r2 := @parameter1: ORG.as220.tinySQL.sqlparser.LValue;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: void getColumnElements(java.util.Vector,ORG.as220.tinySQL.sqlparser.LValue)>($r5, r2);

        staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: void getParameterElements(java.util.Vector,ORG.as220.tinySQL.sqlparser.LValue)>($r5, r2);

        $z0 = r2 instanceof ORG.as220.tinySQL.sqlparser.StaticValue;

        if $z0 != 0 goto label4;

     label1:
        $i0 = virtualinvoke $r5.<java.util.Vector: int size()>();

        if $i0 != 0 goto label4;

        $r8 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $r6 = new ORG.as220.tinySQL.sqlparser.Expression$ValueContainer;

        $r7 = new ORG.as220.tinySQL.sqlparser.StaticValue;

        $r9 = interfaceinvoke r2.<ORG.as220.tinySQL.sqlparser.LValue: java.lang.Object evaluate(ORG.as220.tinySQL.tsRow)>(null);

        specialinvoke $r7.<ORG.as220.tinySQL.sqlparser.StaticValue: void <init>(java.lang.Object)>($r9);

        specialinvoke $r6.<ORG.as220.tinySQL.sqlparser.Expression$ValueContainer: void <init>(ORG.as220.tinySQL.sqlparser.Expression,ORG.as220.tinySQL.sqlparser.Operator,ORG.as220.tinySQL.sqlparser.LValue)>(r0, r1, $r7);

        virtualinvoke $r8.<java.util.Vector: boolean add(java.lang.Object)>($r6);

     label2:
        return;

     label3:
        $r10 := @caughtexception;

        staticinvoke <ORG.as220.tinySQL.util.Log: void error(java.lang.String,java.lang.Exception)>("Exception in optimize", $r10);

     label4:
        $r11 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $r12 = new ORG.as220.tinySQL.sqlparser.Expression$ValueContainer;

        specialinvoke $r12.<ORG.as220.tinySQL.sqlparser.Expression$ValueContainer: void <init>(ORG.as220.tinySQL.sqlparser.Expression,ORG.as220.tinySQL.sqlparser.Operator,ORG.as220.tinySQL.sqlparser.LValue)>(r0, r1, r2);

        virtualinvoke $r11.<java.util.Vector: boolean add(java.lang.Object)>($r12);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void insert(ORG.as220.tinySQL.sqlparser.LValue, ORG.as220.tinySQL.sqlparser.Operator)
    {
        ORG.as220.tinySQL.sqlparser.Expression r0;
        ORG.as220.tinySQL.sqlparser.LValue r1, $r5;
        ORG.as220.tinySQL.sqlparser.Operator r2;
        ORG.as220.tinySQL.sqlparser.Expression$ValueContainer $r4;
        java.util.Vector $r6;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.LValue;

        r2 := @parameter1: ORG.as220.tinySQL.sqlparser.Operator;

        $r4 = new ORG.as220.tinySQL.sqlparser.Expression$ValueContainer;

        $r5 = r0.<ORG.as220.tinySQL.sqlparser.Expression: ORG.as220.tinySQL.sqlparser.LValue value>;

        specialinvoke $r4.<ORG.as220.tinySQL.sqlparser.Expression$ValueContainer: void <init>(ORG.as220.tinySQL.sqlparser.Expression,ORG.as220.tinySQL.sqlparser.Operator,ORG.as220.tinySQL.sqlparser.LValue)>(r0, r2, $r5);

        $r6 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        virtualinvoke $r6.<java.util.Vector: void add(int,java.lang.Object)>(0, $r4);

        r0.<ORG.as220.tinySQL.sqlparser.Expression: ORG.as220.tinySQL.sqlparser.LValue value> = r1;

        return;
    }

    public java.lang.Object evaluate(ORG.as220.tinySQL.tsRow) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.Expression r0;
        ORG.as220.tinySQL.tsRow r1;
        ORG.as220.tinySQL.sqlparser.Expression$ValueContainer r2;
        boolean $z0;
        ORG.as220.tinySQL.sqlparser.LValue $r3, $r7;
        java.util.Vector $r4, $r5;
        int $i0, i1;
        java.lang.Object $r6, $r9, r10;
        ORG.as220.tinySQL.sqlparser.Operator $r8;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        r1 := @parameter0: ORG.as220.tinySQL.tsRow;

        $z0 = r0.<ORG.as220.tinySQL.sqlparser.Expression: boolean transformed>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.Expression: void transformExpression()>();

        r0.<ORG.as220.tinySQL.sqlparser.Expression: boolean transformed> = 1;

     label1:
        $r3 = r0.<ORG.as220.tinySQL.sqlparser.Expression: ORG.as220.tinySQL.sqlparser.LValue value>;

        r10 = interfaceinvoke $r3.<ORG.as220.tinySQL.sqlparser.LValue: java.lang.Object evaluate(ORG.as220.tinySQL.tsRow)>(r1);

        i1 = 0;

        goto label3;

     label2:
        $r5 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object get(int)>(i1);

        r2 = (ORG.as220.tinySQL.sqlparser.Expression$ValueContainer) $r6;

        $r8 = r2.<ORG.as220.tinySQL.sqlparser.Expression$ValueContainer: ORG.as220.tinySQL.sqlparser.Operator op>;

        $r7 = r2.<ORG.as220.tinySQL.sqlparser.Expression$ValueContainer: ORG.as220.tinySQL.sqlparser.LValue value>;

        $r9 = interfaceinvoke $r7.<ORG.as220.tinySQL.sqlparser.LValue: java.lang.Object evaluate(ORG.as220.tinySQL.tsRow)>(r1);

        r10 = virtualinvoke $r8.<ORG.as220.tinySQL.sqlparser.Operator: java.lang.Object evaluate(java.lang.Object,java.lang.Object)>(r10, $r9);

        i1 = i1 + 1;

     label3:
        $r4 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $i0 = virtualinvoke $r4.<java.util.Vector: int size()>();

        if i1 < $i0 goto label2;

        return r10;
    }

    public boolean isWrapper()
    {
        ORG.as220.tinySQL.sqlparser.Expression r0;
        java.util.Vector $r1;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String getName()
    {
        ORG.as220.tinySQL.sqlparser.Expression r0;
        ORG.as220.tinySQL.sqlparser.Expression$ValueContainer r2;
        java.lang.StringBuilder $r3, $r4;
        boolean $z0, $z1;
        java.lang.String $r5, $r8, $r13, $r16, $r18;
        java.lang.StringBuffer $r6;
        ORG.as220.tinySQL.sqlparser.LValue $r7, $r15;
        java.util.Vector $r9, $r10;
        int $i0, i1;
        java.lang.Object $r11;
        ORG.as220.tinySQL.sqlparser.Operator $r12;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("About to transform: ");

        $z0 = r0.<ORG.as220.tinySQL.sqlparser.Expression: boolean transformed>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void debug(java.lang.String)>($r5);

        $z1 = r0.<ORG.as220.tinySQL.sqlparser.Expression: boolean transformed>;

        if $z1 != 0 goto label1;

        staticinvoke <ORG.as220.tinySQL.util.Log: void debug(java.lang.String)>("About to transform");

        virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.Expression: void transformExpression()>();

        r0.<ORG.as220.tinySQL.sqlparser.Expression: boolean transformed> = 1;

     label1:
        $r6 = new java.lang.StringBuffer;

        $r7 = r0.<ORG.as220.tinySQL.sqlparser.Expression: ORG.as220.tinySQL.sqlparser.LValue value>;

        $r8 = specialinvoke r0.<ORG.as220.tinySQL.sqlparser.Expression: java.lang.String getValueName(ORG.as220.tinySQL.sqlparser.LValue)>($r7);

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(java.lang.String)>($r8);

        i1 = 0;

        goto label3;

     label2:
        $r10 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $r11 = virtualinvoke $r10.<java.util.Vector: java.lang.Object get(int)>(i1);

        r2 = (ORG.as220.tinySQL.sqlparser.Expression$ValueContainer) $r11;

        $r12 = r2.<ORG.as220.tinySQL.sqlparser.Expression$ValueContainer: ORG.as220.tinySQL.sqlparser.Operator op>;

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = r2.<ORG.as220.tinySQL.sqlparser.Expression$ValueContainer: ORG.as220.tinySQL.sqlparser.LValue value>;

        $r16 = specialinvoke r0.<ORG.as220.tinySQL.sqlparser.Expression: java.lang.String getValueName(ORG.as220.tinySQL.sqlparser.LValue)>($r15);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        i1 = i1 + 1;

     label3:
        $r9 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $i0 = virtualinvoke $r9.<java.util.Vector: int size()>();

        if i1 < $i0 goto label2;

        $r18 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r18;
    }

    private java.lang.String getValueName(ORG.as220.tinySQL.sqlparser.LValue)
    {
        ORG.as220.tinySQL.sqlparser.Expression r0;
        ORG.as220.tinySQL.sqlparser.LValue r1;
        boolean $z0;
        java.lang.String $r2, $r4, $r7;
        java.lang.StringBuilder $r3, $r5, $r6;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.LValue;

        $z0 = r1 instanceof ORG.as220.tinySQL.sqlparser.Expression;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("(");

        $r4 = interfaceinvoke r1.<ORG.as220.tinySQL.sqlparser.LValue: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label1:
        $r2 = interfaceinvoke r1.<ORG.as220.tinySQL.sqlparser.LValue: java.lang.String getName()>();

        return $r2;
    }

    public java.util.Enumeration getChildren()
    {
        ORG.as220.tinySQL.sqlparser.Expression r0;
        ORG.as220.tinySQL.sqlparser.Expression$ValueContainer r2;
        java.util.Vector $r3, $r5, $r6;
        ORG.as220.tinySQL.sqlparser.LValue $r4, $r8;
        int $i0, i1;
        java.lang.Object $r7;
        java.util.Enumeration $r9;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        $r4 = r0.<ORG.as220.tinySQL.sqlparser.Expression: ORG.as220.tinySQL.sqlparser.LValue value>;

        virtualinvoke $r3.<java.util.Vector: boolean add(java.lang.Object)>($r4);

        i1 = 0;

        goto label2;

     label1:
        $r6 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $r7 = virtualinvoke $r6.<java.util.Vector: java.lang.Object get(int)>(i1);

        r2 = (ORG.as220.tinySQL.sqlparser.Expression$ValueContainer) $r7;

        $r8 = r2.<ORG.as220.tinySQL.sqlparser.Expression$ValueContainer: ORG.as220.tinySQL.sqlparser.LValue value>;

        virtualinvoke $r3.<java.util.Vector: boolean add(java.lang.Object)>($r8);

        i1 = i1 + 1;

     label2:
        $r5 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $i0 = virtualinvoke $r5.<java.util.Vector: int size()>();

        if i1 < $i0 goto label1;

        $r9 = virtualinvoke $r3.<java.util.Vector: java.util.Enumeration elements()>();

        return $r9;
    }

    public int getChildCount()
    {
        ORG.as220.tinySQL.sqlparser.Expression r0;
        java.util.Vector $r1;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        return $i0;
    }

    protected void transformExpression()
    {
        ORG.as220.tinySQL.sqlparser.Expression r0;
        java.util.Vector $r1, $r5, $r6, $r10;
        java.lang.Object $r2, $r7;
        ORG.as220.tinySQL.sqlparser.Operator $r3, $r4, $r8;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, i7, i8, i9, i10, i11;
        boolean $z0, $z1;
        ORG.as220.tinySQL.sqlparser.Expression$ValueContainer r9, r12;
        boolean[] r11;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        i4 = 0;

        i5 = 0;

        goto label03;

     label01:
        $r1 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(i5);

        r9 = (ORG.as220.tinySQL.sqlparser.Expression$ValueContainer) $r2;

        $r3 = r9.<ORG.as220.tinySQL.sqlparser.Expression$ValueContainer: ORG.as220.tinySQL.sqlparser.Operator op>;

        $i0 = virtualinvoke $r3.<ORG.as220.tinySQL.sqlparser.Operator: int getLevel()>();

        if $i0 <= i4 goto label02;

        $r4 = r9.<ORG.as220.tinySQL.sqlparser.Expression$ValueContainer: ORG.as220.tinySQL.sqlparser.Operator op>;

        i4 = virtualinvoke $r4.<ORG.as220.tinySQL.sqlparser.Operator: int getLevel()>();

     label02:
        i5 = i5 + 1;

     label03:
        $r10 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $i6 = virtualinvoke $r10.<java.util.Vector: int size()>();

        if i5 < $i6 goto label01;

        $i1 = i4 + 1;

        r11 = newarray (boolean)[$i1];

        i7 = 0;

        goto label05;

     label04:
        $r6 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $r7 = virtualinvoke $r6.<java.util.Vector: java.lang.Object get(int)>(i7);

        r12 = (ORG.as220.tinySQL.sqlparser.Expression$ValueContainer) $r7;

        $r8 = r12.<ORG.as220.tinySQL.sqlparser.Expression$ValueContainer: ORG.as220.tinySQL.sqlparser.Operator op>;

        $i3 = virtualinvoke $r8.<ORG.as220.tinySQL.sqlparser.Operator: int getLevel()>();

        r11[$i3] = 1;

        i7 = i7 + 1;

     label05:
        $r5 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $i2 = virtualinvoke $r5.<java.util.Vector: int size()>();

        if i7 < $i2 goto label04;

        i8 = 0;

        i9 = 0;

        i10 = i4;

        goto label08;

     label06:
        $z0 = r11[i10];

        if $z0 == 0 goto label07;

        i8 = i8 + 1;

        i9 = i10;

     label07:
        i10 = i10 + -1;

     label08:
        if i10 > -1 goto label06;

        if i8 >= 2 goto label09;

        return;

     label09:
        i11 = i4;

        goto label12;

     label10:
        $z1 = r11[i11];

        if $z1 == 0 goto label11;

        specialinvoke r0.<ORG.as220.tinySQL.sqlparser.Expression: void transformExpression(int)>(i11);

     label11:
        i11 = i11 + -1;

     label12:
        if i11 > i9 goto label10;

        return;
    }

    private void transformExpression(int)
    {
        ORG.as220.tinySQL.sqlparser.Expression r0;
        int i0, $i1, $i2, i3;
        java.util.Vector $r1;
        ORG.as220.tinySQL.sqlparser.Operator $r2;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        i0 := @parameter0: int;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        i3 = $i1 - 1;

        goto label3;

     label1:
        $r2 = specialinvoke r0.<ORG.as220.tinySQL.sqlparser.Expression: ORG.as220.tinySQL.sqlparser.Operator getOperator(int)>(i3);

        $i2 = virtualinvoke $r2.<ORG.as220.tinySQL.sqlparser.Operator: int getLevel()>();

        if $i2 < i0 goto label2;

        specialinvoke r0.<ORG.as220.tinySQL.sqlparser.Expression: void mergeExpressions(int)>(i3);

     label2:
        i3 = i3 + -1;

     label3:
        if i3 > -1 goto label1;

        return;
    }

    private void mergeExpressions(int)
    {
        ORG.as220.tinySQL.sqlparser.Expression r0, r2, $r9;
        int i0, $i1;
        ORG.as220.tinySQL.sqlparser.Expression$ValueContainer r1;
        ORG.as220.tinySQL.sqlparser.LValue r3, r10;
        ORG.as220.tinySQL.sqlparser.Operator r4;
        java.util.Vector $r5, $r7;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        i0 := @parameter0: int;

        $r5 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object get(int)>(i0);

        r1 = (ORG.as220.tinySQL.sqlparser.Expression$ValueContainer) $r6;

        $i1 = i0 + 1;

        r10 = specialinvoke r0.<ORG.as220.tinySQL.sqlparser.Expression: ORG.as220.tinySQL.sqlparser.LValue getLValue(int)>($i1);

        $z0 = r10 instanceof ORG.as220.tinySQL.sqlparser.Expression;

        if $z0 != 0 goto label1;

        $r9 = new ORG.as220.tinySQL.sqlparser.Expression;

        specialinvoke $r9.<ORG.as220.tinySQL.sqlparser.Expression: void <init>(ORG.as220.tinySQL.sqlparser.LValue)>(r10);

        r10 = $r9;

     label1:
        r2 = (ORG.as220.tinySQL.sqlparser.Expression) r10;

        r3 = specialinvoke r0.<ORG.as220.tinySQL.sqlparser.Expression: ORG.as220.tinySQL.sqlparser.LValue getLValue(int)>(i0);

        r4 = specialinvoke r0.<ORG.as220.tinySQL.sqlparser.Expression: ORG.as220.tinySQL.sqlparser.Operator getOperator(int)>(i0);

        specialinvoke r2.<ORG.as220.tinySQL.sqlparser.Expression: void insert(ORG.as220.tinySQL.sqlparser.LValue,ORG.as220.tinySQL.sqlparser.Operator)>(r3, r4);

        $r7 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        virtualinvoke $r7.<java.util.Vector: java.lang.Object remove(int)>(i0);

        specialinvoke r0.<ORG.as220.tinySQL.sqlparser.Expression: void setLValue(int,ORG.as220.tinySQL.sqlparser.LValue)>(i0, r2);

        return;
    }

    private ORG.as220.tinySQL.sqlparser.Operator getOperator(int)
    {
        ORG.as220.tinySQL.sqlparser.Expression r0;
        int i0;
        ORG.as220.tinySQL.sqlparser.Expression$ValueContainer r1;
        java.util.Vector $r2;
        java.lang.Object $r3;
        ORG.as220.tinySQL.sqlparser.Operator $r4;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        i0 := @parameter0: int;

        $r2 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>(i0);

        r1 = (ORG.as220.tinySQL.sqlparser.Expression$ValueContainer) $r3;

        $r4 = r1.<ORG.as220.tinySQL.sqlparser.Expression$ValueContainer: ORG.as220.tinySQL.sqlparser.Operator op>;

        return $r4;
    }

    private ORG.as220.tinySQL.sqlparser.LValue getLValue(int)
    {
        ORG.as220.tinySQL.sqlparser.Expression r0;
        int i0, $i1;
        ORG.as220.tinySQL.sqlparser.Expression$ValueContainer r1;
        java.util.Vector $r2;
        java.lang.Object $r3;
        ORG.as220.tinySQL.sqlparser.LValue $r4, $r5;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r5 = r0.<ORG.as220.tinySQL.sqlparser.Expression: ORG.as220.tinySQL.sqlparser.LValue value>;

        return $r5;

     label1:
        $r2 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $i1 = i0 - 1;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>($i1);

        r1 = (ORG.as220.tinySQL.sqlparser.Expression$ValueContainer) $r3;

        $r4 = r1.<ORG.as220.tinySQL.sqlparser.Expression$ValueContainer: ORG.as220.tinySQL.sqlparser.LValue value>;

        return $r4;
    }

    private void setLValue(int, ORG.as220.tinySQL.sqlparser.LValue)
    {
        ORG.as220.tinySQL.sqlparser.Expression r0;
        int i0, $i1;
        ORG.as220.tinySQL.sqlparser.LValue r1;
        ORG.as220.tinySQL.sqlparser.Expression$ValueContainer r2;
        java.util.Vector $r3;
        java.lang.Object $r4;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        i0 := @parameter0: int;

        r1 := @parameter1: ORG.as220.tinySQL.sqlparser.LValue;

        if i0 != 0 goto label1;

        r0.<ORG.as220.tinySQL.sqlparser.Expression: ORG.as220.tinySQL.sqlparser.LValue value> = r1;

        return;

     label1:
        $r3 = r0.<ORG.as220.tinySQL.sqlparser.Expression: java.util.Vector addValues>;

        $i1 = i0 - 1;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object get(int)>($i1);

        r2 = (ORG.as220.tinySQL.sqlparser.Expression$ValueContainer) $r4;

        r2.<ORG.as220.tinySQL.sqlparser.Expression$ValueContainer: ORG.as220.tinySQL.sqlparser.LValue value> = r1;

        return;
    }

    public java.lang.String toString()
    {
        ORG.as220.tinySQL.sqlparser.Expression r0;
        java.lang.String $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Expression;

        $r1 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.Expression: java.lang.String getName()>();

        return $r1;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        java.io.PrintWriter $r2;
        java.io.PrintStream $r3, $r19;
        ORG.as220.tinySQL.sqlparser.Expression $r4;
        ORG.as220.tinySQL.sqlparser.StaticValue $r5, $r7, $r10, $r13, $r16;
        java.lang.Integer $r6, $r8, $r11, $r14, $r17;
        ORG.as220.tinySQL.sqlparser.Operator $r9, $r12, $r15, $r18;

        r0 := @parameter0: java.lang.String[];

        $r2 = new java.io.PrintWriter;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r3);

        staticinvoke <java.sql.DriverManager: void setLogWriter(java.io.PrintWriter)>($r2);

        $r4 = new ORG.as220.tinySQL.sqlparser.Expression;

        $r5 = new ORG.as220.tinySQL.sqlparser.StaticValue;

        $r6 = new java.lang.Integer;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(10);

        specialinvoke $r5.<ORG.as220.tinySQL.sqlparser.StaticValue: void <init>(java.lang.Object)>($r6);

        specialinvoke $r4.<ORG.as220.tinySQL.sqlparser.Expression: void <init>(ORG.as220.tinySQL.sqlparser.LValue)>($r5);

        $r9 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator ADD>;

        $r7 = new ORG.as220.tinySQL.sqlparser.StaticValue;

        $r8 = new java.lang.Integer;

        specialinvoke $r8.<java.lang.Integer: void <init>(int)>(15);

        specialinvoke $r7.<ORG.as220.tinySQL.sqlparser.StaticValue: void <init>(java.lang.Object)>($r8);

        virtualinvoke $r4.<ORG.as220.tinySQL.sqlparser.Expression: void add(ORG.as220.tinySQL.sqlparser.Operator,ORG.as220.tinySQL.sqlparser.LValue)>($r9, $r7);

        $r12 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator MULT>;

        $r10 = new ORG.as220.tinySQL.sqlparser.StaticValue;

        $r11 = new java.lang.Integer;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>(5);

        specialinvoke $r10.<ORG.as220.tinySQL.sqlparser.StaticValue: void <init>(java.lang.Object)>($r11);

        virtualinvoke $r4.<ORG.as220.tinySQL.sqlparser.Expression: void add(ORG.as220.tinySQL.sqlparser.Operator,ORG.as220.tinySQL.sqlparser.LValue)>($r12, $r10);

        $r15 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator SUB>;

        $r13 = new ORG.as220.tinySQL.sqlparser.StaticValue;

        $r14 = new java.lang.Integer;

        specialinvoke $r14.<java.lang.Integer: void <init>(int)>(2);

        specialinvoke $r13.<ORG.as220.tinySQL.sqlparser.StaticValue: void <init>(java.lang.Object)>($r14);

        virtualinvoke $r4.<ORG.as220.tinySQL.sqlparser.Expression: void add(ORG.as220.tinySQL.sqlparser.Operator,ORG.as220.tinySQL.sqlparser.LValue)>($r15, $r13);

        $r18 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator DIV>;

        $r16 = new ORG.as220.tinySQL.sqlparser.StaticValue;

        $r17 = new java.lang.Integer;

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>(19);

        specialinvoke $r16.<ORG.as220.tinySQL.sqlparser.StaticValue: void <init>(java.lang.Object)>($r17);

        virtualinvoke $r4.<ORG.as220.tinySQL.sqlparser.Expression: void add(ORG.as220.tinySQL.sqlparser.Operator,ORG.as220.tinySQL.sqlparser.LValue)>($r18, $r16);

        $r19 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.Object)>($r4);

        return;
    }
}
