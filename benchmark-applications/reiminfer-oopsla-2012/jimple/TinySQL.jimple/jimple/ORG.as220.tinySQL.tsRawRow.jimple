public abstract class ORG.as220.tinySQL.tsRawRow extends ORG.as220.tinySQL.tsPhysicalRow
{
    private java.lang.Object[] cache;
    private ORG.as220.tinySQL.tinySQLConverter converter;

    public void <init>(java.util.Vector, ORG.as220.tinySQL.tinySQLConverter)
    {
        ORG.as220.tinySQL.tsRawRow r0;
        java.util.Vector r1;
        ORG.as220.tinySQL.tinySQLConverter r2;
        int $i0;
        java.lang.Object[] $r3;

        r0 := @this: ORG.as220.tinySQL.tsRawRow;

        r1 := @parameter0: java.util.Vector;

        r2 := @parameter1: ORG.as220.tinySQL.tinySQLConverter;

        specialinvoke r0.<ORG.as220.tinySQL.tsPhysicalRow: void <init>(java.util.Vector)>(r1);

        r0.<ORG.as220.tinySQL.tsRawRow: java.lang.Object[] cache> = null;

        r0.<ORG.as220.tinySQL.tsRawRow: ORG.as220.tinySQL.tinySQLConverter converter> = r2;

        $i0 = virtualinvoke r1.<java.util.Vector: int size()>();

        $r3 = newarray (java.lang.Object)[$i0];

        r0.<ORG.as220.tinySQL.tsRawRow: java.lang.Object[] cache> = $r3;

        return;
    }

    public void <init>(ORG.as220.tinySQL.tsRawRow)
    {
        ORG.as220.tinySQL.tsRawRow r0, r1;
        ORG.as220.tinySQL.tinySQLConverter $r2;
        int $i0;
        java.lang.Object[] $r3;

        r0 := @this: ORG.as220.tinySQL.tsRawRow;

        r1 := @parameter0: ORG.as220.tinySQL.tsRawRow;

        specialinvoke r0.<ORG.as220.tinySQL.tsPhysicalRow: void <init>(ORG.as220.tinySQL.tsPhysicalRow)>(r1);

        r0.<ORG.as220.tinySQL.tsRawRow: java.lang.Object[] cache> = null;

        $r2 = r1.<ORG.as220.tinySQL.tsRawRow: ORG.as220.tinySQL.tinySQLConverter converter>;

        r0.<ORG.as220.tinySQL.tsRawRow: ORG.as220.tinySQL.tinySQLConverter converter> = $r2;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tsRawRow: int size()>();

        $r3 = newarray (java.lang.Object)[$i0];

        r0.<ORG.as220.tinySQL.tsRawRow: java.lang.Object[] cache> = $r3;

        return;
    }

    public void putNative(int, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tsRawRow r0;
        int i0;
        java.lang.Object r1;
        ORG.as220.tinySQL.tsColumn $r2;
        java.lang.Object[] $r3;

        r0 := @this: ORG.as220.tinySQL.tsRawRow;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tsRawRow: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i0);

        virtualinvoke r0.<ORG.as220.tinySQL.tsRawRow: void nativePut(ORG.as220.tinySQL.tsColumn,java.lang.Object)>($r2, r1);

        $r3 = r0.<ORG.as220.tinySQL.tsRawRow: java.lang.Object[] cache>;

        $r3[i0] = null;

        return;
    }

    public java.lang.Object getNative(int) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tsRawRow r0;
        int i0;
        ORG.as220.tinySQL.tsColumn $r1;
        java.lang.Object $r2;

        r0 := @this: ORG.as220.tinySQL.tsRawRow;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<ORG.as220.tinySQL.tsRawRow: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i0);

        $r2 = virtualinvoke r0.<ORG.as220.tinySQL.tsRawRow: java.lang.Object nativeGet(ORG.as220.tinySQL.tsColumn)>($r1);

        return $r2;
    }

    public void clearCache()
    {
        ORG.as220.tinySQL.tsRawRow r0;
        int $i0;
        java.lang.Object[] $r1;

        r0 := @this: ORG.as220.tinySQL.tsRawRow;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tsRawRow: int size()>();

        $r1 = newarray (java.lang.Object)[$i0];

        r0.<ORG.as220.tinySQL.tsRawRow: java.lang.Object[] cache> = $r1;

        return;
    }

    public java.lang.Object get(int)
    {
        ORG.as220.tinySQL.tsRawRow r0;
        int i0;
        java.lang.Object[] $r1, $r4;
        ORG.as220.tinySQL.tinySQLConverter $r2;
        java.lang.Object $r3, r6;
        java.lang.Exception $r5;
        ORG.as220.tinySQL.tsColumn r7;

        r0 := @this: ORG.as220.tinySQL.tsRawRow;

        i0 := @parameter0: int;

        $r1 = r0.<ORG.as220.tinySQL.tsRawRow: java.lang.Object[] cache>;

        r6 = $r1[i0];

        if r6 != null goto label4;

     label1:
        r7 = virtualinvoke r0.<ORG.as220.tinySQL.tsRawRow: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i0);

        $r2 = r0.<ORG.as220.tinySQL.tsRawRow: ORG.as220.tinySQL.tinySQLConverter converter>;

        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.tsRawRow: java.lang.Object nativeGet(ORG.as220.tinySQL.tsColumn)>(r7);

        r6 = virtualinvoke $r2.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertNativeToJDBC(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r7, $r3);

        $r4 = r0.<ORG.as220.tinySQL.tsRawRow: java.lang.Object[] cache>;

        $r4[i0] = r6;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <ORG.as220.tinySQL.util.Log: void error(java.lang.String,java.lang.Exception)>("Failed to getColumn", $r5);

        return null;

     label4:
        return r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void put(int, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tsRawRow r0;
        int i0;
        java.lang.Object r1, $r5;
        ORG.as220.tinySQL.tsColumn r2;
        java.lang.Object[] $r3;
        ORG.as220.tinySQL.tinySQLConverter $r4;

        r0 := @this: ORG.as220.tinySQL.tsRawRow;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r3 = r0.<ORG.as220.tinySQL.tsRawRow: java.lang.Object[] cache>;

        $r3[i0] = r1;

        r2 = virtualinvoke r0.<ORG.as220.tinySQL.tsRawRow: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i0);

        $r4 = r0.<ORG.as220.tinySQL.tsRawRow: ORG.as220.tinySQL.tinySQLConverter converter>;

        $r5 = virtualinvoke $r4.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertJDBCToNative(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r2, r1);

        virtualinvoke r0.<ORG.as220.tinySQL.tsRawRow: void nativePut(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r2, $r5);

        return;
    }

    protected abstract java.lang.Object nativeGet(ORG.as220.tinySQL.tsColumn) throws ORG.as220.tinySQL.tinySQLException;

    protected abstract void nativePut(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException;
}
