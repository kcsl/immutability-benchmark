public abstract class ORG.as220.tinySQL.tinySQLConnection extends java.lang.Object implements java.sql.Connection
{
    private ORG.as220.tinySQL.tinySQL tsql;
    private java.sql.Driver driver;
    private java.lang.String url;
    private java.lang.String user;
    private java.lang.String catalog;
    private int isolation;
    private java.util.Properties properties;

    public void <init>(java.lang.String, java.lang.String, java.sql.Driver, java.util.Properties) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        java.lang.String r1, r2;
        java.sql.Driver r3;
        java.util.Properties r4;
        ORG.as220.tinySQL.tinySQL $r5, $r6;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.sql.Driver;

        r4 := @parameter3: java.util.Properties;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ORG.as220.tinySQL.tinySQLConnection: ORG.as220.tinySQL.tinySQL tsql> = null;

        r0.<ORG.as220.tinySQL.tinySQLConnection: java.lang.String url> = r2;

        r0.<ORG.as220.tinySQL.tinySQLConnection: java.lang.String user> = r1;

        r0.<ORG.as220.tinySQL.tinySQLConnection: java.sql.Driver driver> = r3;

        r0.<ORG.as220.tinySQL.tinySQLConnection: java.util.Properties properties> = r4;

        $r5 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConnection: ORG.as220.tinySQL.tinySQL createDatabaseEngine()>();

        r0.<ORG.as220.tinySQL.tinySQLConnection: ORG.as220.tinySQL.tinySQL tsql> = $r5;

        $r6 = r0.<ORG.as220.tinySQL.tinySQLConnection: ORG.as220.tinySQL.tinySQL tsql>;

        virtualinvoke $r6.<ORG.as220.tinySQL.tinySQL: void setConnection(ORG.as220.tinySQL.tinySQLConnection)>(r0);

        return;
    }

    public java.lang.String getUrl()
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        java.lang.String $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLConnection: java.lang.String url>;

        return $r1;
    }

    public java.lang.String getUser()
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        java.lang.String $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLConnection: java.lang.String user>;

        return $r1;
    }

    public java.sql.Statement createStatement() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        ORG.as220.tinySQL.tinySQLStatement $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        $r1 = new ORG.as220.tinySQL.tinySQLStatement;

        specialinvoke $r1.<ORG.as220.tinySQL.tinySQLStatement: void <init>(ORG.as220.tinySQL.tinySQLConnection)>(r0);

        return $r1;
    }

    public java.sql.PreparedStatement prepareStatement(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        java.lang.String r1, $r3;
        ORG.as220.tinySQL.tinySQLPreparedStatement $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        r1 := @parameter0: java.lang.String;

        $r2 = new ORG.as220.tinySQL.tinySQLPreparedStatement;

        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConnection: java.lang.String getCatalog()>();

        specialinvoke $r2.<ORG.as220.tinySQL.tinySQLPreparedStatement: void <init>(java.sql.Connection,java.lang.String,java.lang.String)>(r0, r1, $r3);

        return $r2;
    }

    public java.sql.CallableStatement prepareCall(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        java.lang.String r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support stored procedures.");

        throw $r2;
    }

    public java.lang.String nativeSQL(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        java.lang.String r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        r1 := @parameter0: java.lang.String;

        return r1;
    }

    public void setAutoCommit(boolean) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        boolean z0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        z0 := @parameter0: boolean;

        return;
    }

    public void commit() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        return;
    }

    public void rollback() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support rollbacks.");

        throw $r1;
    }

    public void close() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        ORG.as220.tinySQL.tinySQL $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLConnection: ORG.as220.tinySQL.tinySQL tsql>;

        virtualinvoke $r1.<ORG.as220.tinySQL.tinySQL: void close()>();

        r0.<ORG.as220.tinySQL.tinySQLConnection: ORG.as220.tinySQL.tinySQL tsql> = null;

        return;
    }

    public boolean isClosed() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        ORG.as220.tinySQL.tinySQL $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLConnection: ORG.as220.tinySQL.tinySQL tsql>;

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public ORG.as220.tinySQL.tinySQL getTinySqlHandle()
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        ORG.as220.tinySQL.tinySQL $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLConnection: ORG.as220.tinySQL.tinySQL tsql>;

        return $r1;
    }

    public abstract java.sql.DatabaseMetaData getMetaData() throws java.sql.SQLException;

    public void setReadOnly(boolean) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        boolean z0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        z0 := @parameter0: boolean;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not have a read-only mode by default.");

        throw $r1;
    }

    public boolean isReadOnly() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        return 0;
    }

    public void setCatalog(java.lang.String) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        java.lang.String r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        r1 := @parameter0: java.lang.String;

        r0.<ORG.as220.tinySQL.tinySQLConnection: java.lang.String catalog> = r1;

        return;
    }

    public java.lang.String getCatalog() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        java.lang.String $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLConnection: java.lang.String catalog>;

        return $r1;
    }

    public void setTransactionIsolation(int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        i0 := @parameter0: int;

        r0.<ORG.as220.tinySQL.tinySQLConnection: int isolation> = i0;

        return;
    }

    public int getTransactionIsolation() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        $i0 = r0.<ORG.as220.tinySQL.tinySQLConnection: int isolation>;

        return $i0;
    }

    public void disableAutoClose() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConnection: void setAutoClose(boolean)>(0);

        return;
    }

    public java.sql.SQLWarning getWarnings() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        return null;
    }

    public void clearWarnings() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        return;
    }

    public boolean executeStatement(ORG.as220.tinySQL.sqlparser.SQLStatement) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        ORG.as220.tinySQL.sqlparser.SQLStatement r1;
        boolean z0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.SQLStatement;

        z0 = interfaceinvoke r1.<ORG.as220.tinySQL.sqlparser.SQLStatement: boolean execute()>();

        return z0;
    }

    public boolean getAutoCommit()
    {
        ORG.as220.tinySQL.tinySQLConnection r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        return 1;
    }

    public void setAutoClose(boolean)
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        boolean z0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean getAutoClose()
    {
        ORG.as220.tinySQL.tinySQLConnection r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        return 0;
    }

    public abstract ORG.as220.tinySQL.tinySQL createDatabaseEngine() throws ORG.as220.tinySQL.tinySQLException;

    public ORG.as220.tinySQL.tinySQL getDatabaseEngine()
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        ORG.as220.tinySQL.tinySQL $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLConnection: ORG.as220.tinySQL.tinySQL tsql>;

        return $r1;
    }

    public java.sql.Statement createStatement(int, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        int i0, i1;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support createStatement with concurrency.");

        throw $r1;
    }

    public java.sql.PreparedStatement prepareStatement(java.lang.String, int, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        java.lang.String r1;
        int i0, i1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support preparedStatement with concurrency.");

        throw $r2;
    }

    public java.sql.CallableStatement prepareCall(java.lang.String, int, int) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        java.lang.String r1;
        int i0, i1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support prepareCall with concurrency.");

        throw $r2;
    }

    public java.util.Map getTypeMap() throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        java.sql.SQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support getTypeMap.");

        throw $r1;
    }

    public void setTypeMap(java.util.Map) throws java.sql.SQLException
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        java.util.Map r1;
        java.sql.SQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        r1 := @parameter0: java.util.Map;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("tinySQL does not support setTypeMap.");

        throw $r2;
    }

    public java.util.Properties getProperties()
    {
        ORG.as220.tinySQL.tinySQLConnection r0;
        java.util.Properties $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConnection;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLConnection: java.util.Properties properties>;

        return $r1;
    }
}
