public class ORG.as220.tinySQL.sqlparser.ParserUtils extends java.lang.Object
{

    public void <init>()
    {
        ORG.as220.tinySQL.sqlparser.ParserUtils r0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.ParserUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void getColumnElements(java.util.Vector, ORG.as220.tinySQL.sqlparser.LValue)
    {
        java.util.Vector r0;
        ORG.as220.tinySQL.sqlparser.LValue r1, r3;
        java.util.Enumeration r2;
        int $i0;
        boolean $z0, $z2;
        java.lang.Object $r4;

        r0 := @parameter0: java.util.Vector;

        r1 := @parameter1: ORG.as220.tinySQL.sqlparser.LValue;

        $i0 = interfaceinvoke r1.<ORG.as220.tinySQL.sqlparser.LValue: int getChildCount()>();

        if $i0 <= 0 goto label3;

        r2 = interfaceinvoke r1.<ORG.as220.tinySQL.sqlparser.LValue: java.util.Enumeration getChildren()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (ORG.as220.tinySQL.sqlparser.LValue) $r4;

        staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: void getColumnElements(java.util.Vector,ORG.as220.tinySQL.sqlparser.LValue)>(r0, r3);

     label2:
        $z2 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 != 0 goto label1;

     label3:
        $z0 = r1 instanceof ORG.as220.tinySQL.sqlparser.ColumnValue;

        if $z0 == 0 goto label4;

        virtualinvoke r0.<java.util.Vector: boolean add(java.lang.Object)>(r1);

     label4:
        return;
    }

    public static void getParameterElements(java.util.Vector, ORG.as220.tinySQL.sqlparser.LValue)
    {
        java.util.Vector r0;
        ORG.as220.tinySQL.sqlparser.LValue r1, r3;
        java.util.Enumeration r2;
        int $i0;
        boolean $z0, $z2;
        java.lang.Object $r4;

        r0 := @parameter0: java.util.Vector;

        r1 := @parameter1: ORG.as220.tinySQL.sqlparser.LValue;

        $i0 = interfaceinvoke r1.<ORG.as220.tinySQL.sqlparser.LValue: int getChildCount()>();

        if $i0 <= 0 goto label3;

        r2 = interfaceinvoke r1.<ORG.as220.tinySQL.sqlparser.LValue: java.util.Enumeration getChildren()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (ORG.as220.tinySQL.sqlparser.LValue) $r4;

        staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: void getParameterElements(java.util.Vector,ORG.as220.tinySQL.sqlparser.LValue)>(r0, r3);

     label2:
        $z2 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 != 0 goto label1;

     label3:
        $z0 = r1 instanceof ORG.as220.tinySQL.sqlparser.ParameterValue;

        if $z0 == 0 goto label4;

        virtualinvoke r0.<java.util.Vector: boolean add(java.lang.Object)>(r1);

     label4:
        return;
    }

    public static java.util.Vector resolveTableColumns(ORG.as220.tinySQL.sqlparser.LValue, java.util.Vector) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.LValue r0;
        java.util.Vector r1, $r9, $r10;
        int i0, $i1, $i2, i3;
        ORG.as220.tinySQL.sqlparser.ColumnValue r4;
        java.lang.String r5, r6, $r15, $r19, $r23;
        ORG.as220.tinySQL.tsColumn r8, $r12;
        java.lang.Object $r11;
        java.lang.NullPointerException $r13;
        java.lang.StringBuilder $r14, $r16, $r17, $r18, $r21, $r22;
        ORG.as220.tinySQL.tinySQLException $r20;
        java.util.Enumeration $r24;
        ORG.as220.tinySQL.tinySQLTableView r25;

        r0 := @parameter0: ORG.as220.tinySQL.sqlparser.LValue;

        r1 := @parameter1: java.util.Vector;

        $r9 = new java.util.Vector;

        specialinvoke $r9.<java.util.Vector: void <init>()>();

        $r10 = new java.util.Vector;

        specialinvoke $r10.<java.util.Vector: void <init>()>();

        staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: void getColumnElements(java.util.Vector,ORG.as220.tinySQL.sqlparser.LValue)>($r10, r0);

        i0 = virtualinvoke $r10.<java.util.Vector: int size()>();

        i3 = 0;

        goto label6;

     label1:
        $r11 = virtualinvoke $r10.<java.util.Vector: java.lang.Object get(int)>(i3);

        r4 = (ORG.as220.tinySQL.sqlparser.ColumnValue) $r11;

        r5 = virtualinvoke r4.<ORG.as220.tinySQL.sqlparser.ColumnValue: java.lang.String getColumn()>();

        r6 = virtualinvoke r4.<ORG.as220.tinySQL.sqlparser.ColumnValue: java.lang.String getTable()>();

        if r6 != null goto label2;

        $r24 = virtualinvoke r1.<java.util.Vector: java.util.Enumeration elements()>();

        r25 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: ORG.as220.tinySQL.tinySQLTableView findTableForColumn(java.util.Enumeration,java.lang.String)>($r24, r5);

        goto label3;

     label2:
        r25 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: ORG.as220.tinySQL.tinySQLTableView findTable(java.lang.String,java.util.Vector)>(r6, r1);

        if r25 != null goto label3;

        $r20 = new ORG.as220.tinySQL.tinySQLException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("There is no table called ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>($r23);

        throw $r20;

     label3:
        $r12 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r12.<ORG.as220.tinySQL.tsColumn: void <init>(ORG.as220.tinySQL.tinySQLTableView,java.lang.String)>(r25, r5);

        $i1 = virtualinvoke r25.<ORG.as220.tinySQL.tinySQLTableView: int findColumn(java.lang.String)>(r5);

        r8 = virtualinvoke r25.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>($i1);

        if r8 != null goto label4;

        $r13 = new java.lang.NullPointerException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Table: ");

        $r15 = virtualinvoke r25.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Column ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label4:
        virtualinvoke $r12.<ORG.as220.tinySQL.tsColumn: void setAll(ORG.as220.tinySQL.tsColumn)>(r8);

        $i2 = virtualinvoke $r9.<java.util.Vector: int indexOf(java.lang.Object)>($r12);

        if $i2 != -1 goto label5;

        virtualinvoke $r9.<java.util.Vector: boolean add(java.lang.Object)>($r12);

     label5:
        i3 = i3 + 1;

     label6:
        if i3 < i0 goto label1;

        return $r9;
    }

    public static ORG.as220.tinySQL.tinySQLTableView findTableForColumn(java.util.Enumeration, java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        java.util.Enumeration r0;
        java.lang.String r1, $r8;
        ORG.as220.tinySQL.tinySQLTableView r2;
        boolean $z0;
        java.lang.Object $r3;
        int $i0;
        ORG.as220.tinySQL.tinySQLException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @parameter0: java.util.Enumeration;

        r1 := @parameter1: java.lang.String;

        goto label2;

     label1:
        $r3 = interfaceinvoke r0.<java.util.Enumeration: java.lang.Object nextElement()>();

        r2 = (ORG.as220.tinySQL.tinySQLTableView) $r3;

        $i0 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: int findColumn(java.lang.String)>(r1);

        if $i0 == -1 goto label2;

        return r2;

     label2:
        $z0 = interfaceinvoke r0.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        $r4 = new ORG.as220.tinySQL.tinySQLException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Column ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>($r8);

        throw $r4;
    }

    public static ORG.as220.tinySQL.tinySQLTableView findTable(java.lang.String, java.util.Vector)
    {
        java.lang.String r0, $r4, $r5;
        java.util.Vector r1;
        int i0, i1;
        ORG.as220.tinySQL.tinySQLTableView r2;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Vector;

        i0 = virtualinvoke r1.<java.util.Vector: int size()>();

        i1 = 0;

        goto label4;

     label1:
        $r3 = virtualinvoke r1.<java.util.Vector: java.lang.Object get(int)>(i1);

        r2 = (ORG.as220.tinySQL.tinySQLTableView) $r3;

        $r4 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String getName()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $r5 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String getAlias()>();

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

     label2:
        return r2;

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label1;

        return null;
    }

    public static java.util.Vector buildVector(java.util.Enumeration)
    {
        java.util.Enumeration r0;
        java.util.Vector $r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.Enumeration;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke r0.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>($r3);

     label2:
        $z0 = interfaceinvoke r0.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        return $r2;
    }

    public static java.lang.String convertToString(java.lang.Object)
    {
        java.lang.Object r0;
        int i0, i1, i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11, i12, i13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String $r2, $r3, $r5, $r9, $r10, $r13, $r14, $r17, $r18, $r21, $r22, $r25, $r26, $r29, $r30, $r32, $r36, $r37, $r40, $r41, $r44, $r45, $r47, $r51, $r52, $r55, $r56, $r59, $r60, $r62, $r63;
        char[] $r4;
        byte[] $r6;
        java.util.GregorianCalendar $r7, $r33, $r48;
        java.lang.StringBuffer $r8, $r35, $r50;
        java.sql.Date $r34, $r49;
        java.util.Date r68;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $r63 = (java.lang.String) r0;

        return $r63;

     label2:
        $z1 = r0 instanceof java.sql.Time;

        if $z1 == 0 goto label3;

        $r48 = new java.util.GregorianCalendar;

        specialinvoke $r48.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $r48.<java.util.GregorianCalendar: void clear()>();

        $r49 = (java.sql.Date) r0;

        virtualinvoke $r48.<java.util.GregorianCalendar: void setTime(java.util.Date)>($r49);

        i5 = virtualinvoke $r48.<java.util.GregorianCalendar: int get(int)>(11);

        i6 = virtualinvoke $r48.<java.util.GregorianCalendar: int get(int)>(12);

        i7 = virtualinvoke $r48.<java.util.GregorianCalendar: int get(int)>(13);

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>(int)>(10);

        $r51 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i5);

        $r52 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String forceToSizeLeft(java.lang.String,int,char)>($r51, 2, 48);

        virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r52);

        virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $r55 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i6);

        $r56 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String forceToSizeLeft(java.lang.String,int,char)>($r55, 2, 48);

        virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $r59 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i7);

        $r60 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String forceToSizeLeft(java.lang.String,int,char)>($r59, 2, 48);

        virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r60);

        $r62 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r62;

     label3:
        $z2 = r0 instanceof java.sql.Date;

        if $z2 == 0 goto label4;

        $r33 = new java.util.GregorianCalendar;

        specialinvoke $r33.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $r33.<java.util.GregorianCalendar: void clear()>();

        $r34 = (java.sql.Date) r0;

        virtualinvoke $r33.<java.util.GregorianCalendar: void setTime(java.util.Date)>($r34);

        i8 = virtualinvoke $r33.<java.util.GregorianCalendar: int get(int)>(1);

        i9 = virtualinvoke $r33.<java.util.GregorianCalendar: int get(int)>(2);

        i10 = virtualinvoke $r33.<java.util.GregorianCalendar: int get(int)>(5);

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>(int)>(10);

        $r36 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i8);

        $r37 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String forceToSizeLeft(java.lang.String,int,char)>($r36, 4, 48);

        virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $i4 = i9 + 1;

        $r40 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i4);

        $r41 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String forceToSizeLeft(java.lang.String,int,char)>($r40, 2, 48);

        virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);

        virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $r44 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i10);

        $r45 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String forceToSizeLeft(java.lang.String,int,char)>($r44, 2, 48);

        virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r47;

     label4:
        $z3 = r0 instanceof java.util.Date;

        if $z3 == 0 goto label5;

        r68 = (java.util.Date) r0;

        $r7 = new java.util.GregorianCalendar;

        specialinvoke $r7.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $r7.<java.util.GregorianCalendar: void clear()>();

        virtualinvoke $r7.<java.util.GregorianCalendar: void setTime(java.util.Date)>(r68);

        i11 = virtualinvoke $r7.<java.util.GregorianCalendar: int get(int)>(11);

        i12 = virtualinvoke $r7.<java.util.GregorianCalendar: int get(int)>(12);

        i13 = virtualinvoke $r7.<java.util.GregorianCalendar: int get(int)>(13);

        i0 = virtualinvoke $r7.<java.util.GregorianCalendar: int get(int)>(1);

        i1 = virtualinvoke $r7.<java.util.GregorianCalendar: int get(int)>(2);

        i2 = virtualinvoke $r7.<java.util.GregorianCalendar: int get(int)>(5);

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>(int)>(20);

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r10 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String forceToSizeLeft(java.lang.String,int,char)>($r9, 4, 48);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $i3 = i1 + 1;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3);

        $r14 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String forceToSizeLeft(java.lang.String,int,char)>($r13, 2, 48);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i2);

        $r18 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String forceToSizeLeft(java.lang.String,int,char)>($r17, 2, 48);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i11);

        $r22 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String forceToSizeLeft(java.lang.String,int,char)>($r21, 2, 48);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i12);

        $r26 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String forceToSizeLeft(java.lang.String,int,char)>($r25, 2, 48);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r29 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i13);

        $r30 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String forceToSizeLeft(java.lang.String,int,char)>($r29, 2, 48);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r32;

     label5:
        $z4 = r0 instanceof byte[];

        if $z4 == 0 goto label6;

        $r5 = new java.lang.String;

        $r6 = (byte[]) r0;

        specialinvoke $r5.<java.lang.String: void <init>(byte[])>($r6);

        return $r5;

     label6:
        $z5 = r0 instanceof char[];

        if $z5 == 0 goto label7;

        $r3 = new java.lang.String;

        $r4 = (char[]) r0;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>($r4);

        return $r3;

     label7:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.Boolean convertToBoolean(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String r1, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Boolean $r2, $r3, $r4, $r7, $r8;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof java.lang.Boolean;

        if $z0 == 0 goto label2;

        $r8 = (java.lang.Boolean) r0;

        return $r8;

     label2:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label3;

        r1 = (java.lang.String) r0;

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z3 == 0 goto label3;

        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r7;

     label3:
        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z2 == 0 goto label4;

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r4;

     label4:
        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r3;
    }

    public static java.math.BigDecimal convertToNumber(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String r1, $r4;
        boolean $z0, $z1, $z2;
        java.math.BigDecimal $r3, $r5, $r7, $r9, $r10, $r12;
        java.util.Date $r6;
        long $l0;
        java.lang.Number $r8;
        double $d0;
        java.lang.Exception $r11;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r10 = new java.math.BigDecimal;

        specialinvoke $r10.<java.math.BigDecimal: void <init>(int)>(0);

        return $r10;

     label1:
        $z0 = r0 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label2;

        $r9 = (java.math.BigDecimal) r0;

        return $r9;

     label2:
        $z1 = r0 instanceof java.lang.Number;

        if $z1 == 0 goto label3;

        $r7 = new java.math.BigDecimal;

        $r8 = (java.lang.Number) r0;

        $d0 = virtualinvoke $r8.<java.lang.Number: double doubleValue()>();

        specialinvoke $r7.<java.math.BigDecimal: void <init>(double)>($d0);

        return $r7;

     label3:
        $z2 = r0 instanceof java.util.Date;

        if $z2 == 0 goto label4;

        $r5 = new java.math.BigDecimal;

        $r6 = (java.util.Date) r0;

        $l0 = virtualinvoke $r6.<java.util.Date: long getTime()>();

        specialinvoke $r5.<java.math.BigDecimal: void <init>(long)>($l0);

        return $r5;

     label4:
        r1 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.lang.String convertToString(java.lang.Object)>(r0);

     label5:
        $r3 = new java.math.BigDecimal;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.lang.String)>($r4);

     label6:
        return $r3;

     label7:
        $r11 := @caughtexception;

        $r12 = new java.math.BigDecimal;

        specialinvoke $r12.<java.math.BigDecimal: void <init>(int)>(0);

        return $r12;

        catch java.lang.Exception from label5 to label6 with label7;
    }

    public static java.sql.Date convertToDate(java.lang.Object)
    {
        java.lang.Object r0;
        int i0, i1, i2, $i3, $i5, $i6, $i8, $i9, $i10, $i12, $i13, $i14, $i16, $i18, $i19, $i21, $i23, $i24, $i26;
        boolean $z0, $z1, $z2, $z3;
        java.lang.ClassCastException $r2;
        java.lang.Class $r3;
        java.lang.String $r4, r16;
        java.sql.Date $r5, $r7, $r9, $r10, $r12, $r13;
        char $c4, $c7, $c11, $c15, $c17, $c20, $c22, $c25;
        java.util.GregorianCalendar $r6;
        java.util.Date $r8, r15;
        long $l27, $l28, $l29;
        java.lang.Number $r11;
        java.lang.Exception $r14;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        $r13 = new java.sql.Date;

        specialinvoke $r13.<java.sql.Date: void <init>(long)>(0L);

        return $r13;

     label01:
        $z0 = r0 instanceof java.sql.Date;

        if $z0 == 0 goto label02;

        $r12 = (java.sql.Date) r0;

        return $r12;

     label02:
        $z1 = r0 instanceof java.lang.Number;

        if $z1 == 0 goto label03;

        $r10 = new java.sql.Date;

        $r11 = (java.lang.Number) r0;

        $l29 = virtualinvoke $r11.<java.lang.Number: long longValue()>();

        specialinvoke $r10.<java.sql.Date: void <init>(long)>($l29);

        return $r10;

     label03:
        $z2 = r0 instanceof java.util.Date;

        if $z2 == 0 goto label04;

        r15 = (java.util.Date) r0;

        $r9 = new java.sql.Date;

        $l28 = virtualinvoke r15.<java.util.Date: long getTime()>();

        specialinvoke $r9.<java.sql.Date: void <init>(long)>($l28);

        return $r9;

     label04:
        $z3 = r0 instanceof java.lang.String;

        if $z3 == 0 goto label10;

     label05:
        r16 = (java.lang.String) r0;

        $i3 = virtualinvoke r16.<java.lang.String: int length()>();

        if $i3 != 10 goto label07;

        $c4 = virtualinvoke r16.<java.lang.String: char charAt(int)>(0);

        $i5 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: int toNumber(char)>($c4);

        $i6 = $i5 * 1000;

        $c7 = virtualinvoke r16.<java.lang.String: char charAt(int)>(1);

        $i8 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: int toNumber(char)>($c7);

        $i9 = $i8 * 100;

        $i10 = $i6 + $i9;

        $c11 = virtualinvoke r16.<java.lang.String: char charAt(int)>(2);

        $i12 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: int toNumber(char)>($c11);

        $i13 = $i12 * 10;

        $i14 = $i10 + $i13;

        $c15 = virtualinvoke r16.<java.lang.String: char charAt(int)>(3);

        $i16 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: int toNumber(char)>($c15);

        i0 = $i14 + $i16;

        $c17 = virtualinvoke r16.<java.lang.String: char charAt(int)>(5);

        $i18 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: int toNumber(char)>($c17);

        $i19 = $i18 * 10;

        $c20 = virtualinvoke r16.<java.lang.String: char charAt(int)>(6);

        $i21 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: int toNumber(char)>($c20);

        i1 = $i19 + $i21;

        $c22 = virtualinvoke r16.<java.lang.String: char charAt(int)>(8);

        $i23 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: int toNumber(char)>($c22);

        $i24 = $i23 * 10;

        $c25 = virtualinvoke r16.<java.lang.String: char charAt(int)>(9);

        $i26 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: int toNumber(char)>($c25);

        i2 = $i24 + $i26;

        $r6 = new java.util.GregorianCalendar;

        specialinvoke $r6.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $r6.<java.util.GregorianCalendar: void clear()>();

        virtualinvoke $r6.<java.util.GregorianCalendar: void set(int,int,int)>(i0, i1, i2);

        $r7 = new java.sql.Date;

        $r8 = virtualinvoke $r6.<java.util.GregorianCalendar: java.util.Date getTime()>();

        $l27 = virtualinvoke $r8.<java.util.Date: long getTime()>();

        specialinvoke $r7.<java.sql.Date: void <init>(long)>($l27);

     label06:
        return $r7;

     label07:
        $r5 = staticinvoke <java.sql.Date: java.sql.Date valueOf(java.lang.String)>(r16);

     label08:
        return $r5;

     label09:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.lang.Exception: void printStackTrace()>();

     label10:
        $r2 = new java.lang.ClassCastException;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r2.<java.lang.ClassCastException: void <init>(java.lang.String)>($r4);

        throw $r2;

        catch java.lang.Exception from label05 to label06 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
    }

    private static int toNumber(char)
    {
        char c0;
        int $i1;

        c0 := @parameter0: char;

        $i1 = c0 - 48;

        return $i1;
    }

    public static java.sql.Time convertToTime(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String r1;
        int i0, i1, $i2, $i4, $i5, $i7, $i9, $i10, $i12, $i14, $i15, $i17, i21;
        boolean $z0, $z1, $z2, $z3;
        char $c3, $c6, $c8, $c11, $c13, $c16;
        java.util.GregorianCalendar $r3;
        java.sql.Time $r4, $r6, $r7, $r9, $r11, $r12;
        java.util.Date $r5, $r8;
        long $l18, $l19, $l20;
        java.lang.Number $r10;
        java.lang.Exception $r13;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r12 = new java.sql.Time;

        specialinvoke $r12.<java.sql.Time: void <init>(long)>(0L);

        return $r12;

     label1:
        $z0 = r0 instanceof java.sql.Time;

        if $z0 == 0 goto label2;

        $r11 = (java.sql.Time) r0;

        return $r11;

     label2:
        $z1 = r0 instanceof java.lang.Number;

        if $z1 == 0 goto label3;

        $r9 = new java.sql.Time;

        $r10 = (java.lang.Number) r0;

        $l20 = virtualinvoke $r10.<java.lang.Number: long longValue()>();

        specialinvoke $r9.<java.sql.Time: void <init>(long)>($l20);

        return $r9;

     label3:
        $z2 = r0 instanceof java.util.Date;

        if $z2 == 0 goto label4;

        $r7 = new java.sql.Time;

        $r8 = (java.util.Date) r0;

        $l19 = virtualinvoke $r8.<java.util.Date: long getTime()>();

        specialinvoke $r7.<java.sql.Time: void <init>(long)>($l19);

        return $r7;

     label4:
        $z3 = r0 instanceof java.lang.String;

        if $z3 == 0 goto label9;

        r1 = (java.lang.String) r0;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 == 8 goto label8;

     label5:
        $r6 = staticinvoke <java.sql.Time: java.sql.Time valueOf(java.lang.String)>(r1);

     label6:
        return $r6;

     label7:
        $r13 := @caughtexception;

        goto label9;

     label8:
        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $i4 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: int toNumber(char)>($c3);

        $i5 = $i4 * 10;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        $i7 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: int toNumber(char)>($c6);

        i21 = $i5 + $i7;

        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(3);

        $i9 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: int toNumber(char)>($c8);

        $i10 = $i9 * 10;

        $c11 = virtualinvoke r1.<java.lang.String: char charAt(int)>(4);

        $i12 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: int toNumber(char)>($c11);

        i0 = $i10 + $i12;

        $c13 = virtualinvoke r1.<java.lang.String: char charAt(int)>(6);

        $i14 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: int toNumber(char)>($c13);

        $i15 = $i14 * 10;

        $c16 = virtualinvoke r1.<java.lang.String: char charAt(int)>(7);

        $i17 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: int toNumber(char)>($c16);

        i1 = $i15 + $i17;

        $r3 = new java.util.GregorianCalendar;

        specialinvoke $r3.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $r3.<java.util.GregorianCalendar: void clear()>();

        virtualinvoke $r3.<java.util.GregorianCalendar: void set(int,int,int,int,int,int)>(0, 0, 0, i21, i0, i1);

        $r4 = new java.sql.Time;

        $r5 = virtualinvoke $r3.<java.util.GregorianCalendar: java.util.Date getTime()>();

        $l18 = virtualinvoke $r5.<java.util.Date: long getTime()>();

        specialinvoke $r4.<java.sql.Time: void <init>(long)>($l18);

        return $r4;

     label9:
        return null;

        catch java.lang.Exception from label5 to label6 with label7;
    }

    public static java.sql.Timestamp convertToTimestamp(java.lang.Object)
    {
        java.lang.Object r0;
        java.io.PrintStream $r2;
        java.lang.Class $r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r4;
        java.sql.Timestamp $r5, $r6, $r8, $r10, $r11;
        java.util.Date $r7;
        long $l0, $l1;
        java.lang.Number $r9;
        java.lang.Exception $r12;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r11 = new java.sql.Timestamp;

        specialinvoke $r11.<java.sql.Timestamp: void <init>(long)>(0L);

        return $r11;

     label1:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.Object)>($r3);

        $z0 = r0 instanceof java.sql.Timestamp;

        if $z0 == 0 goto label2;

        $r10 = (java.sql.Timestamp) r0;

        return $r10;

     label2:
        $z1 = r0 instanceof java.lang.Number;

        if $z1 == 0 goto label3;

        $r8 = new java.sql.Timestamp;

        $r9 = (java.lang.Number) r0;

        $l1 = virtualinvoke $r9.<java.lang.Number: long longValue()>();

        specialinvoke $r8.<java.sql.Timestamp: void <init>(long)>($l1);

        return $r8;

     label3:
        $z2 = r0 instanceof java.util.Date;

        if $z2 == 0 goto label4;

        $r6 = new java.sql.Timestamp;

        $r7 = (java.util.Date) r0;

        $l0 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        specialinvoke $r6.<java.sql.Timestamp: void <init>(long)>($l0);

        return $r6;

     label4:
        $z3 = r0 instanceof java.lang.String;

        if $z3 == 0 goto label8;

     label5:
        $r4 = (java.lang.String) r0;

        $r5 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>($r4);

     label6:
        return $r5;

     label7:
        $r12 := @caughtexception;

     label8:
        return null;

        catch java.lang.Exception from label5 to label6 with label7;
    }

    public static java.lang.String typeToLiteral(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        return "CHAR";

     label1:
        if i0 != 2 goto label2;

        return "NUMERIC";

     label2:
        if i0 != -7 goto label3;

        return "BIT";

     label3:
        if i0 != 4 goto label4;

        return "INTEGER";

     label4:
        if i0 != -2 goto label5;

        return "BINARY";

     label5:
        if i0 != 91 goto label6;

        return "DATE";

     label6:
        if i0 != 92 goto label7;

        return "TIME";

     label7:
        if i0 != 93 goto label8;

        return "TIMESTAMP";

     label8:
        return "BINARY";
    }
}
