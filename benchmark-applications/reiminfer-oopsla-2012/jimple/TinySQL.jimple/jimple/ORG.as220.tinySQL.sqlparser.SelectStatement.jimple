public class ORG.as220.tinySQL.sqlparser.SelectStatement extends java.lang.Object implements ORG.as220.tinySQL.sqlparser.ConditionalStatement
{
    public static final int MOD_NONE;
    public static final int MOD_ALL;
    public static final int MOD_DISTINCT;
    private ORG.as220.tinySQL.sqlparser.WhereClause whereC;
    private ORG.as220.tinySQL.sqlparser.OrderByClause orderC;
    private java.util.Vector resultColumns;
    private java.util.Vector tableColumns;
    private java.util.Vector tables;
    private ORG.as220.tinySQL.tinySQLStatement statement;
    private ORG.as220.tinySQL.tinySQLResultSet myResult;
    private int mod;

    public void <init>(ORG.as220.tinySQL.tinySQLStatement)
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        java.util.Vector $r2, $r3, $r4;
        ORG.as220.tinySQL.sqlparser.WhereClause $r5;
        ORG.as220.tinySQL.sqlparser.OrderByClause $r6;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: int mod> = 0;

        r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.tinySQLStatement statement> = r1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector resultColumns> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector tableColumns> = $r3;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector tables> = $r4;

        $r5 = new ORG.as220.tinySQL.sqlparser.WhereClause;

        specialinvoke $r5.<ORG.as220.tinySQL.sqlparser.WhereClause: void <init>(ORG.as220.tinySQL.sqlparser.ConditionalStatement)>(r0);

        r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.sqlparser.WhereClause whereC> = $r5;

        $r6 = new ORG.as220.tinySQL.sqlparser.OrderByClause;

        specialinvoke $r6.<ORG.as220.tinySQL.sqlparser.OrderByClause: void <init>(ORG.as220.tinySQL.sqlparser.SelectStatement)>(r0);

        r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.sqlparser.OrderByClause orderC> = $r6;

        return;
    }

    public void addTable(java.lang.String, java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        java.lang.String r1, r2;
        ORG.as220.tinySQL.tinySQLTableView r3;
        ORG.as220.tinySQL.tinySQL $r4;
        java.util.Vector $r5;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.tinySQL getDatabase()>();

        r3 = virtualinvoke $r4.<ORG.as220.tinySQL.tinySQL: ORG.as220.tinySQL.tinySQLTableView getTable(java.lang.String)>(r1);

        virtualinvoke r3.<ORG.as220.tinySQL.tinySQLTableView: void setAlias(java.lang.String)>(r2);

        $r5 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector tables>;

        virtualinvoke $r5.<java.util.Vector: boolean add(java.lang.Object)>(r3);

        return;
    }

    public void addColumn(ORG.as220.tinySQL.sqlparser.LValue, java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        ORG.as220.tinySQL.sqlparser.LValue r1;
        java.lang.String r2, r3, $r10, $r13, $r14, $r19;
        boolean $z0, $z1;
        java.util.Vector $r5, $r6, $r7, $r9, $r11, $r16, $r17;
        ORG.as220.tinySQL.tsColumn $r8, $r12, $r15;
        int $i0;
        java.util.Enumeration $r18;
        ORG.as220.tinySQL.sqlparser.JokerColumnValue $r20;
        ORG.as220.tinySQL.sqlparser.ColumnValue r21;
        ORG.as220.tinySQL.tinySQLTableView r22;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.LValue;

        r2 := @parameter1: java.lang.String;

        $z0 = r1 instanceof ORG.as220.tinySQL.sqlparser.JokerColumnValue;

        if $z0 == 0 goto label1;

        $r20 = (ORG.as220.tinySQL.sqlparser.JokerColumnValue) r1;

        specialinvoke r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: void resolveJokers(ORG.as220.tinySQL.sqlparser.JokerColumnValue)>($r20);

        return;

     label1:
        virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.tinySQL getDatabase()>();

        $r6 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector tableColumns>;

        $r5 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector tables>;

        $r7 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.util.Vector resolveTableColumns(ORG.as220.tinySQL.sqlparser.LValue,java.util.Vector)>(r1, $r5);

        virtualinvoke $r6.<java.util.Vector: boolean addAll(java.util.Collection)>($r7);

        $z1 = r1 instanceof ORG.as220.tinySQL.sqlparser.ColumnValue;

        if $z1 == 0 goto label4;

        r21 = (ORG.as220.tinySQL.sqlparser.ColumnValue) r1;

        r3 = virtualinvoke r21.<ORG.as220.tinySQL.sqlparser.ColumnValue: java.lang.String getTable()>();

        if r3 != null goto label2;

        $r17 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector tables>;

        $r18 = virtualinvoke $r17.<java.util.Vector: java.util.Enumeration elements()>();

        $r19 = virtualinvoke r21.<ORG.as220.tinySQL.sqlparser.ColumnValue: java.lang.String getColumn()>();

        r22 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: ORG.as220.tinySQL.tinySQLTableView findTableForColumn(java.util.Enumeration,java.lang.String)>($r18, $r19);

        goto label3;

     label2:
        $r10 = virtualinvoke r21.<ORG.as220.tinySQL.sqlparser.ColumnValue: java.lang.String getTable()>();

        $r11 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector tables>;

        r22 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: ORG.as220.tinySQL.tinySQLTableView findTable(java.lang.String,java.util.Vector)>($r10, $r11);

     label3:
        $r12 = new ORG.as220.tinySQL.tsColumn;

        $r13 = virtualinvoke r21.<ORG.as220.tinySQL.sqlparser.ColumnValue: java.lang.String getColumn()>();

        specialinvoke $r12.<ORG.as220.tinySQL.tsColumn: void <init>(ORG.as220.tinySQL.tinySQLTableView,java.lang.String,java.lang.String)>(r22, $r13, r2);

        $r14 = virtualinvoke r21.<ORG.as220.tinySQL.sqlparser.ColumnValue: java.lang.String getColumn()>();

        $i0 = virtualinvoke r22.<ORG.as220.tinySQL.tinySQLTableView: int findColumn(java.lang.String)>($r14);

        $r15 = virtualinvoke r22.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>($i0);

        virtualinvoke $r12.<ORG.as220.tinySQL.tsColumn: void setAll(ORG.as220.tinySQL.tsColumn)>($r15);

        $r16 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector resultColumns>;

        virtualinvoke $r16.<java.util.Vector: boolean add(java.lang.Object)>($r12);

        goto label5;

     label4:
        $r8 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r8.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String,ORG.as220.tinySQL.sqlparser.LValue)>(r2, r1);

        $r9 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector resultColumns>;

        virtualinvoke $r9.<java.util.Vector: boolean add(java.lang.Object)>($r8);

     label5:
        return;
    }

    private void resolveJokers(ORG.as220.tinySQL.sqlparser.JokerColumnValue) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        ORG.as220.tinySQL.sqlparser.JokerColumnValue r1;
        java.lang.String r2, $r8;
        ORG.as220.tinySQL.tinySQLTableView r3, r11;
        java.util.Vector $r4;
        ORG.as220.tinySQL.tinySQLException $r5;
        java.lang.StringBuilder $r6, $r7;
        boolean $z0;
        java.lang.Object $r9;
        java.util.Enumeration r10;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.JokerColumnValue;

        r2 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.JokerColumnValue: java.lang.String getTable()>();

        if r2 != null goto label3;

        r10 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Enumeration getTables()>();

        goto label2;

     label1:
        $r9 = interfaceinvoke r10.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (ORG.as220.tinySQL.tinySQLTableView) $r9;

        specialinvoke r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: void addAllTableColumns(ORG.as220.tinySQL.tinySQLTableView)>(r3);

     label2:
        $z0 = interfaceinvoke r10.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        goto label5;

     label3:
        $r4 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector tables>;

        r11 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: ORG.as220.tinySQL.tinySQLTableView findTable(java.lang.String,java.util.Vector)>(r2, $r4);

        if r11 != null goto label4;

        $r5 = new ORG.as220.tinySQL.tinySQLException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("There is no such table: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label4:
        specialinvoke r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: void addAllTableColumns(ORG.as220.tinySQL.tinySQLTableView)>(r11);

     label5:
        return;
    }

    private void addAllTableColumns(ORG.as220.tinySQL.tinySQLTableView)
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        ORG.as220.tinySQL.tinySQLTableView r1;
        int i0, i1;
        ORG.as220.tinySQL.tsColumn r2;
        java.util.Vector $r3, $r4;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLTableView;

        i0 = virtualinvoke r1.<ORG.as220.tinySQL.tinySQLTableView: int getColumnCount()>();

        i1 = 0;

        goto label2;

     label1:
        r2 = virtualinvoke r1.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i1);

        $r3 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector tableColumns>;

        virtualinvoke $r3.<java.util.Vector: boolean add(java.lang.Object)>(r2);

        $r4 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector resultColumns>;

        virtualinvoke $r4.<java.util.Vector: boolean add(java.lang.Object)>(r2);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return;
    }

    public int getModifier()
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        $i0 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: int mod>;

        return $i0;
    }

    public void setModifier(int)
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        if i0 != 2 goto label2;

     label1:
        r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: int mod> = i0;

        goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not a valid modification");

        throw $r1;

     label3:
        return;
    }

    public java.util.Enumeration getTables()
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        java.util.Vector $r1;
        java.util.Enumeration $r2;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector tables>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.util.Enumeration elements()>();

        return $r2;
    }

    public java.util.Vector getTableColumns()
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        java.util.Vector $r2, $r3, $r5;
        ORG.as220.tinySQL.sqlparser.WhereClause $r4;
        ORG.as220.tinySQL.sqlparser.OrderByClause $r6;
        java.util.ArrayList $r7;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        $r2 = new java.util.Vector;

        $r3 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector tableColumns>;

        specialinvoke $r2.<java.util.Vector: void <init>(java.util.Collection)>($r3);

        $r4 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.sqlparser.WhereClause whereC>;

        $r5 = virtualinvoke $r4.<ORG.as220.tinySQL.sqlparser.WhereClause: java.util.Vector getColumns()>();

        virtualinvoke $r2.<java.util.Vector: boolean addAll(java.util.Collection)>($r5);

        $r6 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.sqlparser.OrderByClause orderC>;

        $r7 = virtualinvoke $r6.<ORG.as220.tinySQL.sqlparser.OrderByClause: java.util.ArrayList getColumns()>();

        virtualinvoke $r2.<java.util.Vector: boolean addAll(java.util.Collection)>($r7);

        return $r2;
    }

    public java.util.Vector getResultColumns()
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        java.util.Vector $r1, $r2;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        $r1 = new java.util.Vector;

        $r2 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector resultColumns>;

        specialinvoke $r1.<java.util.Vector: void <init>(java.util.Collection)>($r2);

        return $r1;
    }

    public void setWhereClause(ORG.as220.tinySQL.sqlparser.WhereClause) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        ORG.as220.tinySQL.sqlparser.WhereClause r1;
        java.lang.NullPointerException $r2;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.WhereClause;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.sqlparser.WhereClause whereC> = r1;

        return;
    }

    public ORG.as220.tinySQL.sqlparser.WhereClause getWhereClause()
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        ORG.as220.tinySQL.sqlparser.WhereClause $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.sqlparser.WhereClause whereC>;

        return $r1;
    }

    public void setOrderByClause(ORG.as220.tinySQL.sqlparser.OrderByClause) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        ORG.as220.tinySQL.sqlparser.OrderByClause r1;
        java.lang.NullPointerException $r2;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.OrderByClause;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.sqlparser.OrderByClause orderC> = r1;

        return;
    }

    public ORG.as220.tinySQL.sqlparser.OrderByClause getOrderByClause()
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        ORG.as220.tinySQL.sqlparser.OrderByClause $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.sqlparser.OrderByClause orderC>;

        return $r1;
    }

    public ORG.as220.tinySQL.tinySQL getDatabase() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        ORG.as220.tinySQL.tinySQLStatement $r1;
        java.sql.Connection $r2;
        ORG.as220.tinySQL.tinySQL $r3;
        java.sql.SQLException $r4;
        ORG.as220.tinySQL.tinySQLException $r5;
        ORG.as220.tinySQL.tinySQLConnection r6;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

     label1:
        $r1 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.tinySQLStatement statement>;

        $r2 = virtualinvoke $r1.<ORG.as220.tinySQL.tinySQLStatement: java.sql.Connection getConnection()>();

        r6 = (ORG.as220.tinySQL.tinySQLConnection) $r2;

        $r3 = virtualinvoke r6.<ORG.as220.tinySQL.tinySQLConnection: ORG.as220.tinySQL.tinySQL getTinySqlHandle()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r5.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Unable to resolve connection", $r4);

        throw $r5;

        catch java.sql.SQLException from label1 to label2 with label3;
    }

    public ORG.as220.tinySQL.tinySQLStatement getStatement()
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        ORG.as220.tinySQL.tinySQLStatement $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.tinySQLStatement statement>;

        return $r1;
    }

    public boolean execute() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        ORG.as220.tinySQL.tinySQL r1;
        java.util.Vector r2;
        ORG.as220.tinySQL.sqlparser.ParameterValue r3;
        int $i0, i1;
        java.lang.Object $r4;
        boolean $z0;
        ORG.as220.tinySQL.tinySQLException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        ORG.as220.tinySQL.tinySQLResultSet $r10;
        ORG.as220.tinySQL.tsResultSet $r11;
        ORG.as220.tinySQL.tinySQLStatement $r12;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        r1 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.tinySQL getDatabase()>();

        r2 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector getParameters()>();

        i1 = 0;

        goto label3;

     label1:
        $r4 = virtualinvoke r2.<java.util.Vector: java.lang.Object get(int)>(i1);

        r3 = (ORG.as220.tinySQL.sqlparser.ParameterValue) $r4;

        $z0 = virtualinvoke r3.<ORG.as220.tinySQL.sqlparser.ParameterValue: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r5 = new ORG.as220.tinySQL.tinySQLException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Parameter ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not yet set");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        i1 = i1 + 1;

     label3:
        $i0 = virtualinvoke r2.<java.util.Vector: int size()>();

        if i1 < $i0 goto label1;

        $r10 = new ORG.as220.tinySQL.tinySQLResultSet;

        $r11 = virtualinvoke r1.<ORG.as220.tinySQL.tinySQL: ORG.as220.tinySQL.tsResultSet SelectStatement(ORG.as220.tinySQL.sqlparser.SelectStatement)>(r0);

        $r12 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.tinySQLStatement getStatement()>();

        specialinvoke $r10.<ORG.as220.tinySQL.tinySQLResultSet: void <init>(ORG.as220.tinySQL.tsResultSet,ORG.as220.tinySQL.tinySQLStatement)>($r11, $r12);

        r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.tinySQLResultSet myResult> = $r10;

        return 1;
    }

    public int getUpdateCount()
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        return -1;
    }

    public ORG.as220.tinySQL.tinySQLResultSet getResultSet()
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        ORG.as220.tinySQL.tinySQLResultSet r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        r1 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.tinySQLResultSet myResult>;

        r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.tinySQLResultSet myResult> = null;

        return r1;
    }

    public boolean getMoreResults()
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        return 0;
    }

    public java.util.Vector getParameters()
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        java.util.Enumeration r2;
        ORG.as220.tinySQL.tsColumn r3;
        ORG.as220.tinySQL.sqlparser.LValue r4;
        java.util.Vector $r5, $r6, $r9;
        java.lang.Object $r7;
        int $i0;
        ORG.as220.tinySQL.sqlparser.WhereClause $r8;
        boolean $z1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        $r6 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector getResultColumns()>();

        r2 = virtualinvoke $r6.<java.util.Vector: java.util.Enumeration elements()>();

        goto label2;

     label1:
        $r7 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (ORG.as220.tinySQL.tsColumn) $r7;

        $i0 = virtualinvoke r3.<ORG.as220.tinySQL.tsColumn: int getColumnType()>();

        if $i0 != 1 goto label2;

        r4 = virtualinvoke r3.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.sqlparser.LValue getExpression()>();

        staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: void getParameterElements(java.util.Vector,ORG.as220.tinySQL.sqlparser.LValue)>($r5, r4);

     label2:
        $z1 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 != 0 goto label1;

        $r8 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.sqlparser.WhereClause whereC>;

        $r9 = virtualinvoke $r8.<ORG.as220.tinySQL.sqlparser.WhereClause: java.util.Vector getParameters()>();

        virtualinvoke $r5.<java.util.Vector: boolean addAll(java.util.Collection)>($r9);

        return $r5;
    }

    public java.lang.String toString()
    {
        ORG.as220.tinySQL.sqlparser.SelectStatement r0;
        java.lang.StringBuffer $r2;
        int $i0, $i1;
        java.lang.Object $r5, $r11, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Vector $r10, $r28;
        java.lang.StringBuilder $r18, $r21;
        ORG.as220.tinySQL.sqlparser.WhereClause $r19;
        java.lang.String $r20, $r22, $r24;
        java.util.Enumeration r29, r30, r31;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SelectStatement;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SELECT ");

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: int getModifier()>();

        if $i0 != 1 goto label1;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ALL ");

        goto label2;

     label1:
        $i1 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: int getModifier()>();

        if $i1 != 2 goto label2;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DISTINCT ");

     label2:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<!-- TABLECOLUMNS: USED TABLES FOR ALL EXPRESSIONS IN THIS QUERY \n");

        $r28 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector getTableColumns()>();

        r29 = virtualinvoke $r28.<java.util.Vector: java.util.Enumeration elements()>();

        goto label4;

     label3:
        $r5 = interfaceinvoke r29.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $z0 = interfaceinvoke r29.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label4;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", \n");

     label4:
        $z4 = interfaceinvoke r29.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z4 != 0 goto label3;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n --> \n");

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<!-- RESULTCOLUMNS: COLUMNS WHICH WILL BE DISPLAYED \n");

        $r10 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector getResultColumns()>();

        r30 = virtualinvoke $r10.<java.util.Vector: java.util.Enumeration elements()>();

        goto label6;

     label5:
        $r11 = interfaceinvoke r30.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $z1 = interfaceinvoke r30.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label6;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", \n");

     label6:
        $z5 = interfaceinvoke r30.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z5 != 0 goto label5;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n --> \n");

        r31 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Enumeration getTables()>();

        $z2 = interfaceinvoke r31.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 == 0 goto label8;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" FROM ");

        goto label8;

     label7:
        $r15 = interfaceinvoke r31.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r15);

        $z3 = interfaceinvoke r31.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z3 == 0 goto label8;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label8:
        $z6 = interfaceinvoke r31.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z6 != 0 goto label7;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>(" ");

        $r19 = r0.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.sqlparser.WhereClause whereC>;

        $r20 = virtualinvoke $r19.<ORG.as220.tinySQL.sqlparser.WhereClause: java.lang.String toString()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r24;
    }

    public static void <clinit>()
    {
        <ORG.as220.tinySQL.sqlparser.SelectStatement: int MOD_DISTINCT> = 2;

        <ORG.as220.tinySQL.sqlparser.SelectStatement: int MOD_ALL> = 1;

        <ORG.as220.tinySQL.sqlparser.SelectStatement: int MOD_NONE> = 0;

        return;
    }
}
