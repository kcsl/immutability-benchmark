public class ORG.as220.tinySQL.tinySQLConverter extends java.lang.Object
{

    public void <init>()
    {
        ORG.as220.tinySQL.tinySQLConverter r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String convertNativeToString(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        java.lang.String $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.lang.String convertToString(java.lang.Object)>(r2);

        return $r3;
    }

    public java.lang.Boolean convertNativeToBoolean(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        java.lang.Boolean $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.lang.Boolean convertToBoolean(java.lang.Object)>(r2);

        return $r3;
    }

    public java.math.BigDecimal convertNativeToNumber(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        java.math.BigDecimal $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.math.BigDecimal convertToNumber(java.lang.Object)>(r2);

        return $r3;
    }

    public java.lang.Integer convertNativeToInteger(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        java.math.BigDecimal r3;
        java.lang.Integer $r4;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.math.BigDecimal convertNativeToNumber(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r4 = new java.lang.Integer;

        $i0 = virtualinvoke r3.<java.math.BigDecimal: int intValue()>();

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i0);

        return $r4;
    }

    public java.math.BigInteger convertNativeToBigInteger(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        java.math.BigDecimal r3;
        java.math.BigInteger $r4;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.math.BigDecimal convertNativeToNumber(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r4 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        return $r4;
    }

    public java.lang.Short convertNativeToShort(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        java.math.BigDecimal r3;
        java.lang.Short $r4;
        short $s0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.math.BigDecimal convertNativeToNumber(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r4 = new java.lang.Short;

        $s0 = virtualinvoke r3.<java.math.BigDecimal: short shortValue()>();

        specialinvoke $r4.<java.lang.Short: void <init>(short)>($s0);

        return $r4;
    }

    public java.lang.Byte convertNativeToByte(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        java.math.BigDecimal r3;
        java.lang.Byte $r4;
        byte $b0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.math.BigDecimal convertNativeToNumber(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r4 = new java.lang.Byte;

        $b0 = virtualinvoke r3.<java.math.BigDecimal: byte byteValue()>();

        specialinvoke $r4.<java.lang.Byte: void <init>(byte)>($b0);

        return $r4;
    }

    public java.lang.Double convertNativeToDouble(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        java.math.BigDecimal r3;
        java.lang.Double $r4;
        double $d0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.math.BigDecimal convertNativeToNumber(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r4 = new java.lang.Double;

        $d0 = virtualinvoke r3.<java.math.BigDecimal: double doubleValue()>();

        specialinvoke $r4.<java.lang.Double: void <init>(double)>($d0);

        return $r4;
    }

    public java.lang.Float convertNativeToFloat(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        java.math.BigDecimal r3;
        java.lang.Float $r4;
        float $f0;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.math.BigDecimal convertNativeToNumber(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r4 = new java.lang.Float;

        $f0 = virtualinvoke r3.<java.math.BigDecimal: float floatValue()>();

        specialinvoke $r4.<java.lang.Float: void <init>(float)>($f0);

        return $r4;
    }

    public java.sql.Date convertNativeToDate(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        java.sql.Date $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.sql.Date convertToDate(java.lang.Object)>(r2);

        return $r3;
    }

    public java.sql.Time convertNativeToTime(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        java.sql.Time $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.sql.Time convertToTime(java.lang.Object)>(r2);

        return $r3;
    }

    public java.sql.Timestamp convertNativeToTimestamp(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        java.sql.Timestamp $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.sql.Timestamp convertToTimestamp(java.lang.Object)>(r2);

        return $r3;
    }

    public java.lang.Object convertNativeToNull(ORG.as220.tinySQL.tsColumn) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        return null;
    }

    public java.lang.Object convertNativeToJDBC(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2, $r20;
        int i0;
        java.sql.Timestamp $r4;
        java.sql.Time $r5;
        java.sql.Date $r6;
        java.lang.String $r7, $r15, $r16, $r24;
        java.lang.Double $r8, $r9;
        java.lang.Float $r10;
        java.lang.Short $r11;
        java.lang.Integer $r12;
        java.math.BigDecimal $r13, $r14;
        java.math.BigInteger $r17;
        java.lang.Byte $r18;
        java.lang.Boolean $r19;
        java.lang.Exception $r21;
        java.lang.StringBuilder $r22, $r23;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        i0 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if r2 != null goto label01;

        $r20 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertNativeToNull(ORG.as220.tinySQL.tsColumn)>(r1);

        return $r20;

     label01:
        lookupswitch(i0)
        {
            case -7: goto label02;
            case -6: goto label04;
            case -5: goto label10;
            case -1: goto label26;
            case 1: goto label22;
            case 2: goto label18;
            case 3: goto label20;
            case 4: goto label08;
            case 5: goto label06;
            case 6: goto label12;
            case 7: goto label14;
            case 8: goto label16;
            case 12: goto label24;
            case 91: goto label28;
            case 92: goto label30;
            case 93: goto label32;
            default: goto label34;
        };

     label02:
        $r19 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Boolean convertNativeToBoolean(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label03:
        return $r19;

     label04:
        $r18 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Byte convertNativeToByte(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label05:
        return $r18;

     label06:
        $r11 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Short convertNativeToShort(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label07:
        return $r11;

     label08:
        $r12 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Integer convertNativeToInteger(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label09:
        return $r12;

     label10:
        $r17 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.math.BigInteger convertNativeToBigInteger(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label11:
        return $r17;

     label12:
        $r10 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Float convertNativeToFloat(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label13:
        return $r10;

     label14:
        $r9 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Double convertNativeToDouble(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label15:
        return $r9;

     label16:
        $r8 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Double convertNativeToDouble(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label17:
        return $r8;

     label18:
        $r14 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.math.BigDecimal convertNativeToNumber(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label19:
        return $r14;

     label20:
        $r13 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.math.BigDecimal convertNativeToNumber(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label21:
        return $r13;

     label22:
        $r15 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.String convertNativeToString(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label23:
        return $r15;

     label24:
        $r7 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.String convertNativeToString(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label25:
        return $r7;

     label26:
        $r16 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.String convertNativeToString(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label27:
        return $r16;

     label28:
        $r6 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.sql.Date convertNativeToDate(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label29:
        return $r6;

     label30:
        $r5 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.sql.Time convertNativeToTime(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label31:
        return $r5;

     label32:
        $r4 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.sql.Timestamp convertNativeToTimestamp(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

     label33:
        return $r4;

     label34:
        staticinvoke <ORG.as220.tinySQL.util.Log: void warn(java.lang.String)>("Unknown type, returning object unchanged.");

     label35:
        return r2;

     label36:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("Convert Failed for column ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void error(java.lang.String,java.lang.Exception)>($r24, $r21);

        return r2;

        catch java.lang.Exception from label01 to label03 with label36;
        catch java.lang.Exception from label04 to label05 with label36;
        catch java.lang.Exception from label06 to label07 with label36;
        catch java.lang.Exception from label08 to label09 with label36;
        catch java.lang.Exception from label10 to label11 with label36;
        catch java.lang.Exception from label12 to label13 with label36;
        catch java.lang.Exception from label14 to label15 with label36;
        catch java.lang.Exception from label16 to label17 with label36;
        catch java.lang.Exception from label18 to label19 with label36;
        catch java.lang.Exception from label20 to label21 with label36;
        catch java.lang.Exception from label22 to label23 with label36;
        catch java.lang.Exception from label24 to label25 with label36;
        catch java.lang.Exception from label26 to label27 with label36;
        catch java.lang.Exception from label28 to label29 with label36;
        catch java.lang.Exception from label30 to label31 with label36;
        catch java.lang.Exception from label32 to label33 with label36;
        catch java.lang.Exception from label34 to label35 with label36;
    }

    public java.lang.Object convertJDBCToNative(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r35;
        int i0;
        java.sql.Timestamp $r3;
        java.sql.Time $r5;
        java.sql.Date $r7;
        java.lang.String $r9, $r25, $r27;
        java.lang.Double $r11, $r13;
        java.lang.Float $r15;
        java.lang.Short $r17;
        java.lang.Integer $r19;
        java.math.BigDecimal $r21, $r23;
        java.math.BigInteger $r29;
        java.lang.Byte $r31;
        java.lang.Boolean $r33;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        i0 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if r2 != null goto label01;

        $r35 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertNullToNative(ORG.as220.tinySQL.tsColumn)>(r1);

        return $r35;

     label01:
        lookupswitch(i0)
        {
            case -7: goto label02;
            case -6: goto label03;
            case -5: goto label06;
            case -1: goto label14;
            case 1: goto label12;
            case 2: goto label10;
            case 3: goto label11;
            case 4: goto label05;
            case 5: goto label04;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label09;
            case 12: goto label13;
            case 91: goto label15;
            case 92: goto label16;
            case 93: goto label17;
            default: goto label18;
        };

     label02:
        $r33 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Boolean convertNativeToBoolean(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r34 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertBooleanToNative(ORG.as220.tinySQL.tsColumn,java.lang.Boolean)>(r1, $r33);

        return $r34;

     label03:
        $r31 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Byte convertNativeToByte(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r32 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertByteToNative(ORG.as220.tinySQL.tsColumn,java.lang.Byte)>(r1, $r31);

        return $r32;

     label04:
        $r17 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Short convertNativeToShort(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r18 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertShortToNative(ORG.as220.tinySQL.tsColumn,java.lang.Short)>(r1, $r17);

        return $r18;

     label05:
        $r19 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Integer convertNativeToInteger(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r20 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertIntegerToNative(ORG.as220.tinySQL.tsColumn,java.lang.Integer)>(r1, $r19);

        return $r20;

     label06:
        $r29 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.math.BigInteger convertNativeToBigInteger(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r30 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertBigIntegerToNative(ORG.as220.tinySQL.tsColumn,java.math.BigInteger)>(r1, $r29);

        return $r30;

     label07:
        $r15 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Float convertNativeToFloat(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r16 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertFloatToNative(ORG.as220.tinySQL.tsColumn,java.lang.Float)>(r1, $r15);

        return $r16;

     label08:
        $r13 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Double convertNativeToDouble(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r14 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertDoubleToNative(ORG.as220.tinySQL.tsColumn,java.lang.Double)>(r1, $r13);

        return $r14;

     label09:
        $r11 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Double convertNativeToDouble(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r12 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertDoubleToNative(ORG.as220.tinySQL.tsColumn,java.lang.Double)>(r1, $r11);

        return $r12;

     label10:
        $r23 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.math.BigDecimal convertNativeToNumber(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r24 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertNumberToNative(ORG.as220.tinySQL.tsColumn,java.lang.Number)>(r1, $r23);

        return $r24;

     label11:
        $r21 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.math.BigDecimal convertNativeToNumber(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r22 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertNumberToNative(ORG.as220.tinySQL.tsColumn,java.lang.Number)>(r1, $r21);

        return $r22;

     label12:
        $r25 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.String convertNativeToString(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r26 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertStringToNative(ORG.as220.tinySQL.tsColumn,java.lang.String)>(r1, $r25);

        return $r26;

     label13:
        $r9 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.String convertNativeToString(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r10 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertStringToNative(ORG.as220.tinySQL.tsColumn,java.lang.String)>(r1, $r9);

        return $r10;

     label14:
        $r27 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.String convertNativeToString(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r28 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertStringToNative(ORG.as220.tinySQL.tsColumn,java.lang.String)>(r1, $r27);

        return $r28;

     label15:
        $r7 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.sql.Date convertNativeToDate(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r8 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertDateToNative(ORG.as220.tinySQL.tsColumn,java.sql.Date)>(r1, $r7);

        return $r8;

     label16:
        $r5 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.sql.Time convertNativeToTime(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r6 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertTimeToNative(ORG.as220.tinySQL.tsColumn,java.sql.Time)>(r1, $r5);

        return $r6;

     label17:
        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.sql.Timestamp convertNativeToTimestamp(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        $r4 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertTimestampToNative(ORG.as220.tinySQL.tsColumn,java.sql.Timestamp)>(r1, $r3);

        return $r4;

     label18:
        return r2;
    }

    public java.lang.Object convertNullToNative(ORG.as220.tinySQL.tsColumn) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        return null;
    }

    public java.lang.Object convertNumberToNative(ORG.as220.tinySQL.tsColumn, java.lang.Number) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Number r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Number;

        return r2;
    }

    public java.lang.Object convertBigIntegerToNative(ORG.as220.tinySQL.tsColumn, java.math.BigInteger) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.math.BigInteger r2;
        java.lang.Object $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.math.BigInteger;

        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertNumberToNative(ORG.as220.tinySQL.tsColumn,java.lang.Number)>(r1, r2);

        return $r3;
    }

    public java.lang.Object convertIntegerToNative(ORG.as220.tinySQL.tsColumn, java.lang.Integer) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Integer r2;
        java.lang.Object $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Integer;

        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertNumberToNative(ORG.as220.tinySQL.tsColumn,java.lang.Number)>(r1, r2);

        return $r3;
    }

    public java.lang.Object convertShortToNative(ORG.as220.tinySQL.tsColumn, java.lang.Short) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Short r2;
        java.lang.Object $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Short;

        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertNumberToNative(ORG.as220.tinySQL.tsColumn,java.lang.Number)>(r1, r2);

        return $r3;
    }

    public java.lang.Object convertByteToNative(ORG.as220.tinySQL.tsColumn, java.lang.Byte) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Byte r2;
        java.lang.Object $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Byte;

        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertNumberToNative(ORG.as220.tinySQL.tsColumn,java.lang.Number)>(r1, r2);

        return $r3;
    }

    public java.lang.Object convertFloatToNative(ORG.as220.tinySQL.tsColumn, java.lang.Float) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Float r2;
        java.lang.Object $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Float;

        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertNumberToNative(ORG.as220.tinySQL.tsColumn,java.lang.Number)>(r1, r2);

        return $r3;
    }

    public java.lang.Object convertDoubleToNative(ORG.as220.tinySQL.tsColumn, java.lang.Double) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Double r2;
        java.lang.Object $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Double;

        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertNumberToNative(ORG.as220.tinySQL.tsColumn,java.lang.Number)>(r1, r2);

        return $r3;
    }

    public java.lang.Object convertStringToNative(ORG.as220.tinySQL.tsColumn, java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.String r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.String;

        return r2;
    }

    public java.lang.Object convertDateToNative(ORG.as220.tinySQL.tsColumn, java.sql.Date) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.sql.Date r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.sql.Date;

        return r2;
    }

    public java.lang.Object convertTimestampToNative(ORG.as220.tinySQL.tsColumn, java.sql.Timestamp) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.sql.Timestamp r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.sql.Timestamp;

        return r2;
    }

    public java.lang.Object convertTimeToNative(ORG.as220.tinySQL.tsColumn, java.sql.Time) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.sql.Time r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.sql.Time;

        return r2;
    }

    public java.lang.Object convertBooleanToNative(ORG.as220.tinySQL.tsColumn, java.lang.Boolean) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Boolean r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Boolean;

        return r2;
    }
}
