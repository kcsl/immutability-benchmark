public class ORG.as220.tinySQL.textFile extends ORG.as220.tinySQL.tinySQL
{
    public static final int DELETE_DEFAULT;
    public static final int DELETE_NONE;
    public static final int DELETE_PACK;
    public static final int INSERT_DEFAULT;
    public static final int INSERT_SIZE;
    public static final int INSERT_SPEED;
    private java.lang.String dataDir;
    private java.util.Hashtable tables;
    private java.lang.String encoding;
    private boolean readOnly;
    private java.util.Properties p;
    private byte[] delpref;
    private byte[] delpost;
    private byte[] colpref;
    private byte[] colpost;
    private byte[] rowpref;
    private byte[] rowpost;
    private byte[] tablepref;
    private byte[] tablepost;
    private java.lang.String defext;
    private java.lang.String tableext;
    private java.lang.String quoting;
    private ORG.as220.tinySQL.textFileQuoting quotingEngine;
    private int deleteMode;
    private int insertMode;
    private boolean ignoreLastColumnPostfix;
    private boolean ignoreFirstColumnPrefix;

    public void <init>(java.lang.String, java.util.Properties) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFile r0;
        java.lang.String r1;
        java.util.Properties r2;

        r0 := @this: ORG.as220.tinySQL.textFile;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Properties;

        specialinvoke r0.<ORG.as220.tinySQL.tinySQL: void <init>()>();

        r0.<ORG.as220.tinySQL.textFile: java.lang.String dataDir> = r1;

        virtualinvoke r0.<ORG.as220.tinySQL.textFile: void setProperties(java.util.Properties)>(r2);

        return;
    }

    public void setProperties(java.util.Properties) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFile r0;
        java.util.Properties r1;
        java.lang.String r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r24, $r25, $r26, $r27, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Class $r19;
        ORG.as220.tinySQL.textFileQuoting $r23;
        java.io.UnsupportedEncodingException $r28;
        ORG.as220.tinySQL.tinySQLException $r29;
        byte[] $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45;

        r0 := @this: ORG.as220.tinySQL.textFile;

        r1 := @parameter0: java.util.Properties;

        r0.<ORG.as220.tinySQL.textFile: java.util.Properties p> = r1;

        $r15 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("encoding", "Cp1252");

        r0.<ORG.as220.tinySQL.textFile: java.lang.String encoding> = $r15;

        $r16 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("readonly", "false");

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        r0.<ORG.as220.tinySQL.textFile: boolean readOnly> = $z0;

        $r17 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("definition-extension", ".def");

        r0.<ORG.as220.tinySQL.textFile: java.lang.String defext> = $r17;

        $r18 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("table-extension", "");

        r0.<ORG.as220.tinySQL.textFile: java.lang.String tableext> = $r18;

        $r19 = class "ORG/as220/tinySQL/textFileQuoting";

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("qouting.engine", $r20);

        r0.<ORG.as220.tinySQL.textFile: java.lang.String quoting> = $r21;

        $r22 = r0.<ORG.as220.tinySQL.textFile: java.lang.String quoting>;

        $r23 = specialinvoke r0.<ORG.as220.tinySQL.textFile: ORG.as220.tinySQL.textFileQuoting loadTextFileQuoting(java.lang.String)>($r22);

        r0.<ORG.as220.tinySQL.textFile: ORG.as220.tinySQL.textFileQuoting quotingEngine> = $r23;

        r2 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("delete.prefix", "");

        r3 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("delete.postfix", "");

        r4 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("column.prefix", "");

        r5 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("column.postfix", "");

        r6 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("row.prefix", "");

        r7 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("row.postfix", "\n");

        r8 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("table.prefix", "");

        r9 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("table.postfix", "");

        $r24 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("config.delete", "default");

        r10 = virtualinvoke $r24.<java.lang.String: java.lang.String trim()>();

        $r25 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("config.insert", "default");

        r11 = virtualinvoke $r25.<java.lang.String: java.lang.String trim()>();

        r12 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("ignore.first.column.prefix", "false");

        r13 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("ignore.first.column.postfix", "false");

        $r26 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r26.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        r0.<ORG.as220.tinySQL.textFile: boolean ignoreFirstColumnPrefix> = $z1;

        $r27 = virtualinvoke r13.<java.lang.String: java.lang.String trim()>();

        $z2 = virtualinvoke $r27.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        r0.<ORG.as220.tinySQL.textFile: boolean ignoreLastColumnPostfix> = $z2;

        $z3 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("none");

        if $z3 == 0 goto label1;

        r0.<ORG.as220.tinySQL.textFile: int deleteMode> = 1;

        goto label3;

     label1:
        $z4 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("pack");

        if $z4 == 0 goto label2;

        r0.<ORG.as220.tinySQL.textFile: int deleteMode> = 2;

        goto label3;

     label2:
        r0.<ORG.as220.tinySQL.textFile: int deleteMode> = -1;

     label3:
        $z6 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("speed");

        if $z6 == 0 goto label4;

        r0.<ORG.as220.tinySQL.textFile: int insertMode> = 2;

        goto label6;

     label4:
        $z5 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("size");

        if $z5 == 0 goto label5;

        r0.<ORG.as220.tinySQL.textFile: int insertMode> = 1;

        goto label6;

     label5:
        r0.<ORG.as220.tinySQL.textFile: int insertMode> = 0;

     label6:
        $r30 = r0.<ORG.as220.tinySQL.textFile: java.lang.String encoding>;

        $r31 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.lang.String)>($r30);

        r0.<ORG.as220.tinySQL.textFile: byte[] delpref> = $r31;

        $r32 = r0.<ORG.as220.tinySQL.textFile: java.lang.String encoding>;

        $r33 = virtualinvoke r3.<java.lang.String: byte[] getBytes(java.lang.String)>($r32);

        r0.<ORG.as220.tinySQL.textFile: byte[] delpost> = $r33;

        $r34 = r0.<ORG.as220.tinySQL.textFile: java.lang.String encoding>;

        $r35 = virtualinvoke r4.<java.lang.String: byte[] getBytes(java.lang.String)>($r34);

        r0.<ORG.as220.tinySQL.textFile: byte[] colpref> = $r35;

        $r36 = r0.<ORG.as220.tinySQL.textFile: java.lang.String encoding>;

        $r37 = virtualinvoke r5.<java.lang.String: byte[] getBytes(java.lang.String)>($r36);

        r0.<ORG.as220.tinySQL.textFile: byte[] colpost> = $r37;

        $r38 = r0.<ORG.as220.tinySQL.textFile: java.lang.String encoding>;

        $r39 = virtualinvoke r6.<java.lang.String: byte[] getBytes(java.lang.String)>($r38);

        r0.<ORG.as220.tinySQL.textFile: byte[] rowpref> = $r39;

        $r40 = r0.<ORG.as220.tinySQL.textFile: java.lang.String encoding>;

        $r41 = virtualinvoke r7.<java.lang.String: byte[] getBytes(java.lang.String)>($r40);

        r0.<ORG.as220.tinySQL.textFile: byte[] rowpost> = $r41;

        $r42 = r0.<ORG.as220.tinySQL.textFile: java.lang.String encoding>;

        $r43 = virtualinvoke r8.<java.lang.String: byte[] getBytes(java.lang.String)>($r42);

        r0.<ORG.as220.tinySQL.textFile: byte[] tablepref> = $r43;

        $r44 = r0.<ORG.as220.tinySQL.textFile: java.lang.String encoding>;

        $r45 = virtualinvoke r9.<java.lang.String: byte[] getBytes(java.lang.String)>($r44);

        r0.<ORG.as220.tinySQL.textFile: byte[] tablepost> = $r45;

     label7:
        goto label9;

     label8:
        $r28 := @caughtexception;

        $r29 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r29.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r28);

        throw $r29;

     label9:
        return;

        catch java.io.UnsupportedEncodingException from label6 to label7 with label8;
    }

    private ORG.as220.tinySQL.textFileQuoting loadTextFileQuoting(java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFile r0;
        java.lang.String r1, $r8;
        ORG.as220.tinySQL.textFileQuoting r2;
        java.lang.Object $r3;
        java.lang.Exception $r4;
        ORG.as220.tinySQL.tinySQLException $r5;
        java.lang.StringBuilder $r6, $r7;
        java.lang.Class r9;

        r0 := @this: ORG.as220.tinySQL.textFile;

        r1 := @parameter0: java.lang.String;

     label1:
        r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

        $r3 = virtualinvoke r9.<java.lang.Class: java.lang.Object newInstance()>();

        r2 = (ORG.as220.tinySQL.textFileQuoting) $r3;

        virtualinvoke r2.<ORG.as220.tinySQL.textFileQuoting: void setDatabase(ORG.as220.tinySQL.textFile)>(r0);

        virtualinvoke r2.<ORG.as220.tinySQL.textFileQuoting: void init()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new ORG.as220.tinySQL.tinySQLException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("QuotingEngine not found: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>($r8);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.util.Properties getProperties()
    {
        ORG.as220.tinySQL.textFile r0;
        java.util.Properties $r1;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $r1 = r0.<ORG.as220.tinySQL.textFile: java.util.Properties p>;

        return $r1;
    }

    public ORG.as220.tinySQL.textFileQuoting getQuoting()
    {
        ORG.as220.tinySQL.textFile r0;
        ORG.as220.tinySQL.textFileQuoting $r1;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $r1 = r0.<ORG.as220.tinySQL.textFile: ORG.as220.tinySQL.textFileQuoting quotingEngine>;

        return $r1;
    }

    public boolean isIgnoringFirstColumnPrefix()
    {
        ORG.as220.tinySQL.textFile r0;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $z0 = r0.<ORG.as220.tinySQL.textFile: boolean ignoreFirstColumnPrefix>;

        return $z0;
    }

    public boolean isIgnoringLastColumnPostfix()
    {
        ORG.as220.tinySQL.textFile r0;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $z0 = r0.<ORG.as220.tinySQL.textFile: boolean ignoreLastColumnPostfix>;

        return $z0;
    }

    public int getDeleteMode()
    {
        ORG.as220.tinySQL.textFile r0;
        java.lang.StringBuilder $r1, $r2;
        int $i0, $i1;
        java.lang.String $r3;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Default DeleteMode : ");

        $i0 = r0.<ORG.as220.tinySQL.textFile: int deleteMode>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void debug(java.lang.String)>($r3);

        $i1 = r0.<ORG.as220.tinySQL.textFile: int deleteMode>;

        return $i1;
    }

    public int getInsertMode()
    {
        ORG.as220.tinySQL.textFile r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $i0 = r0.<ORG.as220.tinySQL.textFile: int insertMode>;

        return $i0;
    }

    public boolean isReadOnly()
    {
        ORG.as220.tinySQL.textFile r0;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $z0 = r0.<ORG.as220.tinySQL.textFile: boolean readOnly>;

        return $z0;
    }

    public boolean CreateTable(ORG.as220.tinySQL.sqlparser.CreateTableStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFile r0;
        ORG.as220.tinySQL.sqlparser.CreateTableStatement r1;
        java.util.Vector r2, $r6;
        int i0, i1;
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r4;
        ORG.as220.tinySQL.tsColumn r5;
        boolean $z1;
        java.lang.Object $r7;
        ORG.as220.tinySQL.tinySQLException $r8, $r10;
        java.io.IOException $r9;
        java.lang.String r11;

        r0 := @this: ORG.as220.tinySQL.textFile;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.CreateTableStatement;

        $z1 = virtualinvoke r0.<ORG.as220.tinySQL.textFile: boolean isReadOnly()>();

        if $z1 == 0 goto label1;

        $r8 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r8.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Database is readonly");

        throw $r8;

     label1:
        r11 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: java.lang.String getTable()>();

        r2 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: java.util.Vector getColumnDefinitions()>();

        i0 = virtualinvoke r2.<java.util.Vector: int size()>();

        $r6 = new java.util.Vector;

        specialinvoke $r6.<java.util.Vector: void <init>()>();

        i1 = 0;

        goto label3;

     label2:
        $r7 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r4 = (ORG.as220.tinySQL.sqlparser.ColumnDefinition) $r7;

        r5 = virtualinvoke r4.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: ORG.as220.tinySQL.tsColumn getColumn()>();

        virtualinvoke $r6.<java.util.Vector: boolean add(java.lang.Object)>(r5);

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

        specialinvoke r0.<ORG.as220.tinySQL.textFile: void mkDataDirectory()>();

        virtualinvoke r0.<ORG.as220.tinySQL.textFile: void db_createTable(java.lang.String,java.util.Vector)>(r11, $r6);

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        $r10 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r10.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Create Table failed", $r9);

        throw $r10;

     label6:
        return 0;

        catch java.io.IOException from label1 to label4 with label5;
    }

    public java.lang.String getTableExtension()
    {
        ORG.as220.tinySQL.textFile r0;
        java.lang.String $r1;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $r1 = r0.<ORG.as220.tinySQL.textFile: java.lang.String tableext>;

        return $r1;
    }

    public java.lang.String getDefinitionExtension()
    {
        ORG.as220.tinySQL.textFile r0;
        java.lang.String $r1;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $r1 = r0.<ORG.as220.tinySQL.textFile: java.lang.String defext>;

        return $r1;
    }

    public java.lang.String getEncoding()
    {
        ORG.as220.tinySQL.textFile r0;
        java.lang.String $r1;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $r1 = r0.<ORG.as220.tinySQL.textFile: java.lang.String encoding>;

        return $r1;
    }

    public byte[] getDelPostfix()
    {
        ORG.as220.tinySQL.textFile r0;
        byte[] $r1;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $r1 = r0.<ORG.as220.tinySQL.textFile: byte[] delpost>;

        return $r1;
    }

    public byte[] getDelPrefix()
    {
        ORG.as220.tinySQL.textFile r0;
        byte[] $r1;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $r1 = r0.<ORG.as220.tinySQL.textFile: byte[] delpref>;

        return $r1;
    }

    public byte[] getColumnPostfix()
    {
        ORG.as220.tinySQL.textFile r0;
        byte[] $r1;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $r1 = r0.<ORG.as220.tinySQL.textFile: byte[] colpost>;

        return $r1;
    }

    public byte[] getColumnPrefix()
    {
        ORG.as220.tinySQL.textFile r0;
        byte[] $r1;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $r1 = r0.<ORG.as220.tinySQL.textFile: byte[] colpref>;

        return $r1;
    }

    public byte[] getRowPostfix()
    {
        ORG.as220.tinySQL.textFile r0;
        byte[] $r1;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $r1 = r0.<ORG.as220.tinySQL.textFile: byte[] rowpost>;

        return $r1;
    }

    public byte[] getRowPrefix()
    {
        ORG.as220.tinySQL.textFile r0;
        byte[] $r1;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $r1 = r0.<ORG.as220.tinySQL.textFile: byte[] rowpref>;

        return $r1;
    }

    public byte[] getTablePostfix()
    {
        ORG.as220.tinySQL.textFile r0;
        byte[] $r1;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $r1 = r0.<ORG.as220.tinySQL.textFile: byte[] tablepost>;

        return $r1;
    }

    public byte[] getTablePrefix()
    {
        ORG.as220.tinySQL.textFile r0;
        byte[] $r1;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $r1 = r0.<ORG.as220.tinySQL.textFile: byte[] tablepref>;

        return $r1;
    }

    protected void db_removeTable(java.lang.String) throws java.io.IOException
    {
        ORG.as220.tinySQL.textFile r0;
        java.lang.String r1, $r3, $r4, $r5, $r8, $r10, $r12, $r13, $r14, $r17, $r19;
        java.lang.StringBuilder $r2, $r6, $r7, $r9, $r11, $r15, $r16, $r18;

        r0 := @this: ORG.as220.tinySQL.textFile;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        $r3 = r0.<ORG.as220.tinySQL.textFile: java.lang.String dataDir>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = <java.io.File: java.lang.String separator>;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke r0.<ORG.as220.tinySQL.textFile: java.lang.String getTableExtension()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.Utils: void delFile(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        $r12 = r0.<ORG.as220.tinySQL.textFile: java.lang.String dataDir>;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);

        $r14 = <java.io.File: java.lang.String separator>;

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke r0.<ORG.as220.tinySQL.textFile: java.lang.String getDefinitionExtension()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.Utils: void delFile(java.lang.String)>($r19);

        return;
    }

    protected void db_renameTable(java.lang.String, java.lang.String) throws java.io.IOException
    {
        ORG.as220.tinySQL.textFile r0;
        java.lang.String r1, r2, r3, r4, $r6, $r7, $r8, $r12, $r13, $r14, $r18, $r19, $r21, $r23, $r24, $r26, $r33, $r35, $r36, $r38, $r40, $r41, $r43;
        java.lang.StringBuilder $r5, $r9, $r10, $r11, $r15, $r16, $r17, $r20, $r22, $r25, $r28, $r29, $r30, $r31, $r32, $r34, $r37, $r39, $r42;
        boolean $z0, $z1;
        java.io.IOException $r27;

        r0 := @this: ORG.as220.tinySQL.textFile;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r5 = new java.lang.StringBuilder;

        $r6 = r0.<ORG.as220.tinySQL.textFile: java.lang.String dataDir>;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);

        $r8 = <java.io.File: java.lang.String separator>;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.StringBuilder;

        $r12 = r0.<ORG.as220.tinySQL.textFile: java.lang.String dataDir>;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);

        $r14 = <java.io.File: java.lang.String separator>;

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r4 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new java.lang.StringBuilder;

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>($r18);

        $r19 = virtualinvoke r0.<ORG.as220.tinySQL.textFile: java.lang.String getTableExtension()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = new java.lang.StringBuilder;

        $r23 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r23);

        $r24 = virtualinvoke r0.<ORG.as220.tinySQL.textFile: java.lang.String getTableExtension()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = staticinvoke <ORG.as220.tinySQL.Utils: boolean renameFile(java.lang.String,java.lang.String)>($r21, $r26);

        if $z0 == 0 goto label1;

        $r34 = new java.lang.StringBuilder;

        $r35 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>($r35);

        $r36 = virtualinvoke r0.<ORG.as220.tinySQL.textFile: java.lang.String getDefinitionExtension()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39 = new java.lang.StringBuilder;

        $r40 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>($r40);

        $r41 = virtualinvoke r0.<ORG.as220.tinySQL.textFile: java.lang.String getDefinitionExtension()>();

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = staticinvoke <ORG.as220.tinySQL.Utils: boolean renameFile(java.lang.String,java.lang.String)>($r38, $r43);

        if $z1 != 0 goto label2;

     label1:
        $r27 = new java.io.IOException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Renaming of table ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r33);

        throw $r27;

     label2:
        return;
    }

    protected void db_createTable(java.lang.String, java.util.Vector) throws java.io.IOException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFile r0;
        java.lang.String r1, $r8, $r9, $r10, $r13, $r15, $r21, $r25, $r26, $r27, $r30, $r32, r36, $r38, $r40, $r42, $r43, $r45, $r47, $r49;
        java.util.Vector r2;
        ORG.as220.tinySQL.tsColumn r4;
        int i0, $i1, i2, $i3, $i4;
        java.io.BufferedOutputStream $r5, $r22;
        java.io.FileOutputStream $r6, $r23;
        java.lang.StringBuilder $r7, $r11, $r12, $r14, $r19, $r20, $r24, $r28, $r29, $r31, $r37, $r39, $r41, $r44, $r46, $r48;
        java.io.DataOutputStream $r16;
        java.lang.Object $r17;
        ORG.as220.tinySQL.tinySQLException $r18;
        byte[] $r33, $r34;

        r0 := @this: ORG.as220.tinySQL.textFile;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Vector;

        $r5 = new java.io.BufferedOutputStream;

        $r6 = new java.io.FileOutputStream;

        $r7 = new java.lang.StringBuilder;

        $r8 = r0.<ORG.as220.tinySQL.textFile: java.lang.String dataDir>;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r8);

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        $r10 = <java.io.File: java.lang.String separator>;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke r0.<ORG.as220.tinySQL.textFile: java.lang.String getDefinitionExtension()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.lang.String)>($r15);

        specialinvoke $r5.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r6);

        $r16 = new java.io.DataOutputStream;

        specialinvoke $r16.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r5);

        $i1 = r0.<ORG.as220.tinySQL.textFile: int deleteMode>;

        if $i1 != -1 goto label1;

        virtualinvoke $r16.<java.io.DataOutputStream: void writeBytes(java.lang.String)>("CHAR|_DELETED|1\n");

     label1:
        i2 = 0;

        goto label9;

     label2:
        $r17 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r4 = (ORG.as220.tinySQL.tsColumn) $r17;

        i0 = virtualinvoke r4.<ORG.as220.tinySQL.tsColumn: int getType()>();

        lookupswitch(i0)
        {
            case 1: goto label5;
            case 2: goto label4;
            case 4: goto label3;
            case 91: goto label6;
            default: goto label7;
        };

     label3:
        r36 = "NUMERIC";

        virtualinvoke r4.<ORG.as220.tinySQL.tsColumn: void setSize(int,int)>(10, 0);

        goto label8;

     label4:
        r36 = "NUMERIC";

        goto label8;

     label5:
        r36 = "CHAR";

        goto label8;

     label6:
        r36 = "DATE";

        virtualinvoke r4.<ORG.as220.tinySQL.tsColumn: void setSize(int,int)>(10, 0);

        goto label8;

     label7:
        $r18 = new ORG.as220.tinySQL.tinySQLException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unsupported text file type: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>($r21);

        throw $r18;

     label8:
        $r37 = new java.lang.StringBuilder;

        $r38 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r36);

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>($r38);

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.DataOutputStream: void writeBytes(java.lang.String)>($r40);

        $r41 = new java.lang.StringBuilder;

        $r42 = virtualinvoke r4.<ORG.as220.tinySQL.tsColumn: java.lang.String getPhysicalName()>();

        $r43 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r42);

        specialinvoke $r41.<java.lang.StringBuilder: void <init>(java.lang.String)>($r43);

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.DataOutputStream: void writeBytes(java.lang.String)>($r45);

        $r46 = new java.lang.StringBuilder;

        $i3 = virtualinvoke r4.<ORG.as220.tinySQL.tsColumn: int getSize()>();

        $r47 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3);

        specialinvoke $r46.<java.lang.StringBuilder: void <init>(java.lang.String)>($r47);

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.DataOutputStream: void writeBytes(java.lang.String)>($r49);

        i2 = i2 + 1;

     label9:
        $i4 = virtualinvoke r2.<java.util.Vector: int size()>();

        if i2 < $i4 goto label2;

        virtualinvoke $r16.<java.io.DataOutputStream: void flush()>();

        virtualinvoke $r5.<java.io.BufferedOutputStream: void close()>();

        $r22 = new java.io.BufferedOutputStream;

        $r23 = new java.io.FileOutputStream;

        $r24 = new java.lang.StringBuilder;

        $r25 = r0.<ORG.as220.tinySQL.textFile: java.lang.String dataDir>;

        $r26 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r25);

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>($r26);

        $r27 = <java.io.File: java.lang.String separator>;

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r30 = virtualinvoke r0.<ORG.as220.tinySQL.textFile: java.lang.String getTableExtension()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.FileOutputStream: void <init>(java.lang.String)>($r32);

        specialinvoke $r22.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r23);

        $r33 = virtualinvoke r0.<ORG.as220.tinySQL.textFile: byte[] getTablePrefix()>();

        virtualinvoke $r22.<java.io.BufferedOutputStream: void write(byte[])>($r33);

        $r34 = virtualinvoke r0.<ORG.as220.tinySQL.textFile: byte[] getTablePostfix()>();

        virtualinvoke $r22.<java.io.BufferedOutputStream: void write(byte[])>($r34);

        virtualinvoke $r22.<java.io.BufferedOutputStream: void close()>();

        return;
    }

    public ORG.as220.tinySQL.tinySQLTable openTable(java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFile r0;
        java.lang.String r1, $r4, $r6;
        java.lang.StringBuilder $r2, $r3;
        ORG.as220.tinySQL.textFileTable $r5;

        r0 := @this: ORG.as220.tinySQL.textFile;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("TextFile-Engine: Opening table ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void debug(java.lang.String)>($r4);

        $r5 = new ORG.as220.tinySQL.textFileTable;

        $r6 = r0.<ORG.as220.tinySQL.textFile: java.lang.String dataDir>;

        specialinvoke $r5.<ORG.as220.tinySQL.textFileTable: void <init>(java.lang.String,java.lang.String,ORG.as220.tinySQL.textFile)>($r6, r1, r0);

        return $r5;
    }

    private void mkDataDirectory() throws java.lang.NullPointerException
    {
        ORG.as220.tinySQL.textFile r0;
        java.io.File $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.textFile;

        $r2 = new java.io.File;

        $r3 = r0.<ORG.as220.tinySQL.textFile: java.lang.String dataDir>;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r2.<java.io.File: boolean mkdir()>();

     label1:
        return;
    }

    public static void <clinit>()
    {
        <ORG.as220.tinySQL.textFile: int INSERT_SPEED> = 2;

        <ORG.as220.tinySQL.textFile: int INSERT_SIZE> = 1;

        <ORG.as220.tinySQL.textFile: int INSERT_DEFAULT> = 0;

        <ORG.as220.tinySQL.textFile: int DELETE_PACK> = 2;

        <ORG.as220.tinySQL.textFile: int DELETE_NONE> = 1;

        <ORG.as220.tinySQL.textFile: int DELETE_DEFAULT> = -1;

        return;
    }
}
