public class ORG.as220.tinySQL.textFileConverter extends ORG.as220.tinySQL.tinySQLConverter
{
    private java.lang.String encoding;
    private java.text.DecimalFormat numberFormat;
    private ORG.as220.tinySQL.textFileQuoting quoting;

    public void <init>(java.lang.String, ORG.as220.tinySQL.textFileQuoting) throws java.io.UnsupportedEncodingException
    {
        ORG.as220.tinySQL.textFileConverter r0;
        java.lang.String r1, $r4;
        ORG.as220.tinySQL.textFileQuoting r2;
        java.text.DecimalFormatSymbols $r6;
        java.text.DecimalFormat $r7, $r8, $r9;
        java.lang.NullPointerException $r10;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: ORG.as220.tinySQL.textFileQuoting;

        specialinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: void <init>()>();

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(java.lang.String)>("");

        virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.lang.String)>(r1);

        r0.<ORG.as220.tinySQL.textFileConverter: java.lang.String encoding> = r1;

        if r2 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("Quoting is null");

        throw $r10;

     label1:
        r0.<ORG.as220.tinySQL.textFileConverter: ORG.as220.tinySQL.textFileQuoting quoting> = r2;

        $r6 = new java.text.DecimalFormatSymbols;

        specialinvoke $r6.<java.text.DecimalFormatSymbols: void <init>()>();

        virtualinvoke $r6.<java.text.DecimalFormatSymbols: void setDecimalSeparator(char)>(46);

        $r7 = new java.text.DecimalFormat;

        specialinvoke $r7.<java.text.DecimalFormat: void <init>()>();

        r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat> = $r7;

        $r8 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        virtualinvoke $r8.<java.text.DecimalFormat: void setGroupingSize(int)>(0);

        $r9 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        virtualinvoke $r9.<java.text.DecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)>($r6);

        return;
    }

    public java.lang.Object convertBooleanToNative(ORG.as220.tinySQL.tsColumn, java.lang.Boolean) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Boolean r2;
        boolean $z0;
        java.lang.String $r4, $r6;
        byte[] $r5, $r7;
        java.io.UnsupportedEncodingException $r8;
        ORG.as220.tinySQL.tinySQLException $r9;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Boolean;

     label1:
        $z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label3;

        $r6 = r0.<ORG.as220.tinySQL.textFileConverter: java.lang.String encoding>;

        $r7 = staticinvoke <ORG.as220.tinySQL.Utils: byte[] forceToSize(java.lang.String,int,byte,java.lang.String)>("T", 1, 0, $r6);

     label2:
        return $r7;

     label3:
        $r4 = r0.<ORG.as220.tinySQL.textFileConverter: java.lang.String encoding>;

        $r5 = staticinvoke <ORG.as220.tinySQL.Utils: byte[] forceToSize(java.lang.String,int,byte,java.lang.String)>("F", 1, 0, $r4);

     label4:
        return $r5;

     label5:
        $r8 := @caughtexception;

        $r9 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r9.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Encoding not supported");

        throw $r9;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label5;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
    }

    public java.lang.Object convertDateToNative(ORG.as220.tinySQL.tsColumn, java.sql.Date) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.sql.Date r2;
        int i0, i1, i2, $i3;
        java.util.GregorianCalendar $r4;
        java.lang.StringBuilder $r5, $r6, $r20, $r23;
        java.lang.String $r7, $r9, $r10, $r13, $r14, $r17, $r18, $r24, $r26, $r27, $r28;
        java.lang.StringBuffer $r8;
        java.io.PrintStream $r21;
        ORG.as220.tinySQL.textFileQuoting $r22, $r25;
        byte[] $r29;
        java.io.UnsupportedEncodingException $r30;
        ORG.as220.tinySQL.tinySQLException $r31;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.sql.Date;

     label1:
        $r4 = new java.util.GregorianCalendar;

        specialinvoke $r4.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $r4.<java.util.GregorianCalendar: void clear()>();

        virtualinvoke $r4.<java.util.GregorianCalendar: void setTime(java.util.Date)>(r2);

        i0 = virtualinvoke $r4.<java.util.GregorianCalendar: int get(int)>(1);

        i1 = virtualinvoke $r4.<java.util.GregorianCalendar: int get(int)>(2);

        i2 = virtualinvoke $r4.<java.util.GregorianCalendar: int get(int)>(5);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Converting. DATE: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void debug(java.lang.String)>($r7);

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>(int)>(10);

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r10 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String forceToSizeLeft(java.lang.String,int,char)>($r9, 4, 48);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        $r14 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String forceToSizeLeft(java.lang.String,int,char)>($r13, 2, 48);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i2);

        $r18 = staticinvoke <ORG.as220.tinySQL.Utils: java.lang.String forceToSizeLeft(java.lang.String,int,char)>($r17, 2, 48);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r21 = <java.lang.System: java.io.PrintStream out>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Quoting: ");

        $r22 = r0.<ORG.as220.tinySQL.textFileConverter: ORG.as220.tinySQL.textFileQuoting quoting>;

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r24);

        $r25 = r0.<ORG.as220.tinySQL.textFileConverter: ORG.as220.tinySQL.textFileQuoting quoting>;

        $r26 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $i3 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getSize()>();

        $r27 = virtualinvoke $r25.<ORG.as220.tinySQL.textFileQuoting: java.lang.String doQuoting(java.lang.String,int)>($r26, $i3);

        $r28 = r0.<ORG.as220.tinySQL.textFileConverter: java.lang.String encoding>;

        $r29 = virtualinvoke $r27.<java.lang.String: byte[] getBytes(java.lang.String)>($r28);

     label2:
        return $r29;

     label3:
        $r30 := @caughtexception;

        $r31 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r31.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Encoding not supported");

        throw $r31;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public java.lang.Object convertTimeToNative(ORG.as220.tinySQL.tsColumn, java.sql.Time) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.sql.Time r2;
        ORG.as220.tinySQL.tinySQLException $r3;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.sql.Time;

        $r3 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Conversion not supported");

        throw $r3;
    }

    public java.lang.Object convertNullToNative(ORG.as220.tinySQL.tsColumn) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        boolean $z0;
        int $i0, $i1;
        java.lang.String $r3, $r5;
        byte[] $r4, $r6;
        java.io.UnsupportedEncodingException $r7;
        ORG.as220.tinySQL.tinySQLException $r8;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

     label1:
        $z0 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: boolean isNullable()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getSize()>();

        $r5 = r0.<ORG.as220.tinySQL.textFileConverter: java.lang.String encoding>;

        $r6 = staticinvoke <ORG.as220.tinySQL.Utils: byte[] forceToSize(java.lang.String,int,byte,java.lang.String)>("", $i1, 0, $r5);

     label2:
        return $r6;

     label3:
        $i0 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getSize()>();

        $r3 = r0.<ORG.as220.tinySQL.textFileConverter: java.lang.String encoding>;

        $r4 = staticinvoke <ORG.as220.tinySQL.Utils: byte[] forceToSize(java.lang.String,int,byte,java.lang.String)>("", $i0, 32, $r3);

     label4:
        return $r4;

     label5:
        $r7 := @caughtexception;

        $r8 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r8.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Encoding not supported");

        throw $r8;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label5;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
    }

    public java.lang.Object convertNumberToNative(ORG.as220.tinySQL.tsColumn, java.lang.Number) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Number r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.text.DecimalFormat $r4, $r5, $r6, $r7, $r8, $r9, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        java.io.UnsupportedEncodingException $r10;
        ORG.as220.tinySQL.tinySQLException $r11;
        java.lang.Throwable $r12;
        java.lang.String r13, r26, $r28, $r29;
        java.lang.Object r25;
        ORG.as220.tinySQL.textFileQuoting $r27;
        byte[] $r30;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Number;

        i0 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getSize()>();

        i1 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getDecimalPlaces()>();

        r13 = null;

        $r4 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        entermonitor $r4;

     label01:
        $i2 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i2 == 2 goto label02;

        $i4 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i4 != 3 goto label03;

     label02:
        $r5 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        $i3 = i0 - i1;

        virtualinvoke $r5.<java.text.DecimalFormat: void setMaximumIntegerDigits(int)>($i3);

        $r6 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        virtualinvoke $r6.<java.text.DecimalFormat: void setMinimumIntegerDigits(int)>(i1);

        $r7 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        virtualinvoke $r7.<java.text.DecimalFormat: void setMaximumFractionDigits(int)>(i1);

        $r8 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        virtualinvoke $r8.<java.text.DecimalFormat: void setMinimumFractionDigits(int)>(i1);

        $r9 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        r13 = virtualinvoke $r9.<java.text.DecimalFormat: java.lang.String format(java.lang.Object)>(r2);

        goto label07;

     label03:
        $i5 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i5 == -5 goto label04;

        $i6 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i6 == 4 goto label04;

        $i7 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i7 == 5 goto label04;

        $i8 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i8 != -6 goto label05;

     label04:
        $r15 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        virtualinvoke $r15.<java.text.DecimalFormat: void setMaximumIntegerDigits(int)>(i0);

        $r16 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        virtualinvoke $r16.<java.text.DecimalFormat: void setMinimumIntegerDigits(int)>(0);

        $r17 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        virtualinvoke $r17.<java.text.DecimalFormat: void setMaximumFractionDigits(int)>(0);

        $r18 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        virtualinvoke $r18.<java.text.DecimalFormat: void setMinimumFractionDigits(int)>(0);

        $r19 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        r13 = virtualinvoke $r19.<java.text.DecimalFormat: java.lang.String format(java.lang.Object)>(r2);

        goto label07;

     label05:
        $i9 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i9 == 7 goto label06;

        $i10 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i10 == 6 goto label06;

        $i11 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getType()>();

        if $i11 != 8 goto label07;

     label06:
        $r20 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        virtualinvoke $r20.<java.text.DecimalFormat: void setMaximumIntegerDigits(int)>(i0);

        $r21 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        virtualinvoke $r21.<java.text.DecimalFormat: void setMinimumIntegerDigits(int)>(0);

        $r22 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        virtualinvoke $r22.<java.text.DecimalFormat: void setMaximumFractionDigits(int)>(i0);

        $r23 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        virtualinvoke $r23.<java.text.DecimalFormat: void setMinimumFractionDigits(int)>(0);

        $r24 = r0.<ORG.as220.tinySQL.textFileConverter: java.text.DecimalFormat numberFormat>;

        r13 = virtualinvoke $r24.<java.text.DecimalFormat: java.lang.String format(java.lang.Object)>(r2);

     label07:
        exitmonitor $r4;

     label08:
        goto label11;

     label09:
        $r12 := @caughtexception;

        exitmonitor $r4;

     label10:
        throw $r12;

     label11:
        if r13 != null goto label13;

        r25 = specialinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertNumberToNative(ORG.as220.tinySQL.tsColumn,java.lang.Number)>(r1, r2);

        if r25 != null goto label12;

        r13 = "";

        goto label13;

     label12:
        r13 = virtualinvoke r25.<java.lang.Object: java.lang.String toString()>();

     label13:
        r26 = specialinvoke r0.<ORG.as220.tinySQL.textFileConverter: java.lang.String leftPadString(java.lang.String,int)>(r13, i0);

     label14:
        $r27 = r0.<ORG.as220.tinySQL.textFileConverter: ORG.as220.tinySQL.textFileQuoting quoting>;

        $r28 = virtualinvoke $r27.<ORG.as220.tinySQL.textFileQuoting: java.lang.String doQuoting(java.lang.String,int)>(r26, i0);

        $r29 = r0.<ORG.as220.tinySQL.textFileConverter: java.lang.String encoding>;

        $r30 = staticinvoke <ORG.as220.tinySQL.Utils: byte[] forceToSize(java.lang.String,int,byte,java.lang.String)>($r28, i0, 32, $r29);

     label15:
        return $r30;

     label16:
        $r10 := @caughtexception;

        $r11 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r11.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Encoding not supported");

        throw $r11;

        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.io.UnsupportedEncodingException from label14 to label15 with label16;
    }

    private java.lang.String leftPadString(java.lang.String, int) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileConverter r0;
        java.lang.String r1;
        int i0, i1, $i2, i3;
        java.lang.StringBuffer $r3;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        i1 = i0 - $i2;

        if i1 <= 0 goto label3;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>(i1);

        i3 = 0;

        goto label2;

     label1:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        i3 = i3 + 1;

     label2:
        if i3 < i1 goto label1;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        return r1;
    }

    public java.lang.Object convertStringToNative(ORG.as220.tinySQL.tsColumn, java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.String r2, $r4, $r5;
        ORG.as220.tinySQL.textFileQuoting $r3;
        byte[] $r6;
        java.io.UnsupportedEncodingException $r7;
        ORG.as220.tinySQL.tinySQLException $r8;
        int i0;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.String;

     label1:
        i0 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getSize()>();

        $r3 = r0.<ORG.as220.tinySQL.textFileConverter: ORG.as220.tinySQL.textFileQuoting quoting>;

        $r4 = virtualinvoke $r3.<ORG.as220.tinySQL.textFileQuoting: java.lang.String doQuoting(java.lang.String,int)>(r2, i0);

        $r5 = r0.<ORG.as220.tinySQL.textFileConverter: java.lang.String encoding>;

        $r6 = staticinvoke <ORG.as220.tinySQL.Utils: byte[] forceToSize(java.lang.String,int,byte,java.lang.String)>($r4, i0, 32, $r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r8.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Encoding not supported");

        throw $r8;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public java.lang.Object convertNativeToNull(ORG.as220.tinySQL.tsColumn) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileConverter r0;
        ORG.as220.tinySQL.tsColumn r1;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        return null;
    }

    public java.lang.Boolean convertNativeToBoolean(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        byte[] r3;
        boolean $z0;
        java.lang.Boolean $r4, $r5, $r6;
        int $i0;
        byte $b1, $b2, $b3, $b4;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        $z0 = r2 instanceof byte[];

        if $z0 == 0 goto label3;

        r3 = (byte[]) r2;

        $i0 = lengthof r3;

        if $i0 != 1 goto label2;

        $b1 = r3[0];

        if $b1 == 84 goto label1;

        $b2 = r3[0];

        if $b2 == 116 goto label1;

        $b3 = r3[0];

        if $b3 == 89 goto label1;

        $b4 = r3[0];

        if $b4 != 121 goto label2;

     label1:
        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r6;

     label2:
        $r5 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r5;

     label3:
        $r4 = specialinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Boolean convertNativeToBoolean(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        return $r4;
    }

    public java.sql.Date convertNativeToDate(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        byte[] r3;
        int i0, i1, i2, $i3, $i5, $i7, $i8, $i9, $i11, $i12, $i13, $i15, $i16, $i18, $i20, $i21, $i23, $i25, $i26;
        boolean $z0;
        java.sql.Date $r5, $r7;
        java.util.GregorianCalendar $r6;
        byte $b4, $b6, $b10, $b14, $b17, $b19, $b22, $b24;
        java.util.Date $r8;
        long $l27;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        $z0 = r2 instanceof byte[];

        if $z0 == 0 goto label1;

        r3 = (byte[]) r2;

        $i3 = lengthof r3;

        if $i3 != 10 goto label1;

        $r6 = new java.util.GregorianCalendar;

        specialinvoke $r6.<java.util.GregorianCalendar: void <init>()>();

        virtualinvoke $r6.<java.util.GregorianCalendar: void clear()>();

        $b4 = r3[0];

        $i5 = specialinvoke r0.<ORG.as220.tinySQL.textFileConverter: int toNumber(byte)>($b4);

        $i7 = $i5 * 1000;

        $b6 = r3[1];

        $i8 = specialinvoke r0.<ORG.as220.tinySQL.textFileConverter: int toNumber(byte)>($b6);

        $i9 = $i8 * 100;

        $i11 = $i7 + $i9;

        $b10 = r3[2];

        $i12 = specialinvoke r0.<ORG.as220.tinySQL.textFileConverter: int toNumber(byte)>($b10);

        $i13 = $i12 * 10;

        $i15 = $i11 + $i13;

        $b14 = r3[3];

        $i16 = specialinvoke r0.<ORG.as220.tinySQL.textFileConverter: int toNumber(byte)>($b14);

        i0 = $i15 + $i16;

        $b17 = r3[5];

        $i18 = specialinvoke r0.<ORG.as220.tinySQL.textFileConverter: int toNumber(byte)>($b17);

        $i20 = $i18 * 10;

        $b19 = r3[6];

        $i21 = specialinvoke r0.<ORG.as220.tinySQL.textFileConverter: int toNumber(byte)>($b19);

        i1 = $i20 + $i21;

        $b22 = r3[8];

        $i23 = specialinvoke r0.<ORG.as220.tinySQL.textFileConverter: int toNumber(byte)>($b22);

        $i25 = $i23 * 10;

        $b24 = r3[9];

        $i26 = specialinvoke r0.<ORG.as220.tinySQL.textFileConverter: int toNumber(byte)>($b24);

        i2 = $i25 + $i26;

        virtualinvoke $r6.<java.util.GregorianCalendar: void set(int,int,int)>(i0, i1, i2);

        $r7 = new java.sql.Date;

        $r8 = virtualinvoke $r6.<java.util.GregorianCalendar: java.util.Date getTime()>();

        $l27 = virtualinvoke $r8.<java.util.Date: long getTime()>();

        specialinvoke $r7.<java.sql.Date: void <init>(long)>($l27);

        return $r7;

     label1:
        $r5 = specialinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.sql.Date convertNativeToDate(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        return $r5;
    }

    private int toNumber(byte)
    {
        ORG.as220.tinySQL.textFileConverter r0;
        byte b0;
        int $i1;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        b0 := @parameter0: byte;

        $i1 = b0 - 48;

        return $i1;
    }

    public java.sql.Time convertNativeToTime(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        ORG.as220.tinySQL.tinySQLException $r3;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        $r3 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Conversion not supported");

        throw $r3;
    }

    public java.lang.Object convertJDBCToNative(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2, $r4;
        byte[] r3;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        $z0 = r2 instanceof byte[];

        if $z0 == 0 goto label1;

        r3 = (byte[]) r2;

        $i0 = lengthof r3;

        $i1 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: int getSize()>();

        if $i0 != $i1 goto label1;

        return r3;

     label1:
        $r4 = specialinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertJDBCToNative(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        return $r4;
    }

    public java.lang.String convertNativeToString(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        byte[] r3;
        boolean $z0;
        java.lang.String $r4, $r5, $r6, $r8, $r9;
        int $i0;
        ORG.as220.tinySQL.textFileQuoting $r7;
        java.io.UnsupportedEncodingException $r10;
        ORG.as220.tinySQL.tinySQLException $r11;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        $z0 = r2 instanceof byte[];

        if $z0 == 0 goto label4;

        r3 = (byte[]) r2;

     label1:
        $r5 = new java.lang.String;

        $i0 = specialinvoke r0.<ORG.as220.tinySQL.textFileConverter: int seekEnd(byte[])>(r3);

        $r6 = r0.<ORG.as220.tinySQL.textFileConverter: java.lang.String encoding>;

        specialinvoke $r5.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r3, 0, $i0, $r6);

        $r7 = r0.<ORG.as220.tinySQL.textFileConverter: ORG.as220.tinySQL.textFileQuoting quoting>;

        $r8 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $r9 = virtualinvoke $r7.<ORG.as220.tinySQL.textFileQuoting: java.lang.String undoQuoting(java.lang.String)>($r8);

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

        $r11 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r11.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Encoding not supported");

        throw $r11;

     label4:
        $r4 = specialinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.lang.String convertNativeToString(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        return $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    private int seekEnd(byte[])
    {
        ORG.as220.tinySQL.textFileConverter r0;
        byte[] r1;
        int $i0, $i1, $i3, $i4, i5;
        byte $b2;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $i1 = lengthof r1;

        i5 = $i1 - 1;

        goto label3;

     label2:
        i5 = i5 + -1;

     label3:
        $b2 = r1[i5];

        if $b2 == 32 goto label4;

        if i5 > 0 goto label2;

     label4:
        if i5 != 0 goto label5;

        $i4 = lengthof r1;

        return $i4;

     label5:
        $i3 = i5 + 1;

        return $i3;
    }

    public java.math.BigDecimal convertNativeToNumber(ORG.as220.tinySQL.tsColumn, java.lang.Object) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileConverter r0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.Object r2;
        byte[] r3;
        boolean $z0;
        java.math.BigDecimal $r4, $r7, $r10;
        java.lang.String $r5, $r6, $r9, r15;
        int $i0, $i1;
        ORG.as220.tinySQL.textFileQuoting $r8;
        java.lang.Exception $r11;
        ORG.as220.tinySQL.tinySQLException $r12, $r14;
        java.io.UnsupportedEncodingException $r13;

        r0 := @this: ORG.as220.tinySQL.textFileConverter;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.lang.Object;

        $z0 = r2 instanceof byte[];

        if $z0 == 0 goto label7;

        r3 = (byte[]) r2;

     label1:
        $r5 = new java.lang.String;

        $i0 = lengthof r3;

        $r6 = r0.<ORG.as220.tinySQL.textFileConverter: java.lang.String encoding>;

        specialinvoke $r5.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r3, 0, $i0, $r6);

        r15 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

        $r10 = new java.math.BigDecimal;

        specialinvoke $r10.<java.math.BigDecimal: void <init>(int)>(0);

     label2:
        return $r10;

     label3:
        $r7 = new java.math.BigDecimal;

        $r8 = r0.<ORG.as220.tinySQL.textFileConverter: ORG.as220.tinySQL.textFileQuoting quoting>;

        $r9 = virtualinvoke $r8.<ORG.as220.tinySQL.textFileQuoting: java.lang.String undoQuoting(java.lang.String)>(r15);

        specialinvoke $r7.<java.math.BigDecimal: void <init>(java.lang.String)>($r9);

     label4:
        return $r7;

     label5:
        $r13 := @caughtexception;

        $r14 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r14.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Encoding not supported");

        throw $r14;

     label6:
        $r11 := @caughtexception;

        $r12 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r12.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Parsing failed");

        throw $r12;

     label7:
        $r4 = specialinvoke r0.<ORG.as220.tinySQL.tinySQLConverter: java.math.BigDecimal convertNativeToNumber(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r1, r2);

        return $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label5;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label5;
        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Exception from label3 to label4 with label6;
    }
}
