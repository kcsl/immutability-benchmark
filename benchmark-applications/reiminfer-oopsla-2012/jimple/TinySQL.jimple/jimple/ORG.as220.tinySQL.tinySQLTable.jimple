public abstract class ORG.as220.tinySQL.tinySQLTable extends java.lang.Object
{
    private java.lang.String table;
    private ORG.as220.tinySQL.tinySQLConverter converter;
    private java.util.Vector views;

    public void <init>(java.lang.String)
    {
        ORG.as220.tinySQL.tinySQLTable r0;
        java.lang.String r1;
        java.util.Vector $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLTable;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ORG.as220.tinySQL.tinySQLTable: ORG.as220.tinySQL.tinySQLConverter converter> = null;

        r0.<ORG.as220.tinySQL.tinySQLTable: java.lang.String table> = r1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<ORG.as220.tinySQL.tinySQLTable: java.util.Vector views> = $r2;

        return;
    }

    public java.lang.String getName()
    {
        ORG.as220.tinySQL.tinySQLTable r0;
        java.lang.String $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLTable;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLTable: java.lang.String table>;

        return $r1;
    }

    public void createdView(ORG.as220.tinySQL.tinySQLTableView) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTable r0;
        ORG.as220.tinySQL.tinySQLTableView r1;
        java.util.Vector $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLTable;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLTableView;

        $r2 = r0.<ORG.as220.tinySQL.tinySQLTable: java.util.Vector views>;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        return;
    }

    public void removedView(ORG.as220.tinySQL.tinySQLTableView)
    {
        ORG.as220.tinySQL.tinySQLTable r0;
        ORG.as220.tinySQL.tinySQLTableView r1;
        java.util.Vector $r2, $r7;
        java.lang.StringBuilder $r3, $r5, $r6, $r8;
        java.lang.String $r4, $r9;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLTable;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLTableView;

        $r2 = r0.<ORG.as220.tinySQL.tinySQLTable: java.util.Vector views>;

        virtualinvoke $r2.<java.util.Vector: boolean removeElement(java.lang.Object)>(r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Table ");

        $r4 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTable: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Open Views left: ");

        $r7 = r0.<ORG.as220.tinySQL.tinySQLTable: java.util.Vector views>;

        $i0 = virtualinvoke $r7.<java.util.Vector: int size()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void warn(java.lang.String)>($r9);

        return;
    }

    public java.util.Enumeration getViews()
    {
        ORG.as220.tinySQL.tinySQLTable r0;
        java.util.Vector $r2, $r3;
        java.util.Enumeration $r4;

        r0 := @this: ORG.as220.tinySQL.tinySQLTable;

        $r2 = new java.util.Vector;

        $r3 = r0.<ORG.as220.tinySQL.tinySQLTable: java.util.Vector views>;

        specialinvoke $r2.<java.util.Vector: void <init>(java.util.Collection)>($r3);

        $r4 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

        return $r4;
    }

    public int getViewCount()
    {
        ORG.as220.tinySQL.tinySQLTable r0;
        java.util.Vector $r1;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLTable;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLTable: java.util.Vector views>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        return $i0;
    }

    public ORG.as220.tinySQL.tinySQLConverter getConverter() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTable r0;
        ORG.as220.tinySQL.tinySQLConverter $r1, $r2, $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLTable;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLTable: ORG.as220.tinySQL.tinySQLConverter converter>;

        if $r1 != null goto label1;

        $r3 = new ORG.as220.tinySQL.tinySQLConverter;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLConverter: void <init>()>();

        r0.<ORG.as220.tinySQL.tinySQLTable: ORG.as220.tinySQL.tinySQLConverter converter> = $r3;

     label1:
        $r2 = r0.<ORG.as220.tinySQL.tinySQLTable: ORG.as220.tinySQL.tinySQLConverter converter>;

        return $r2;
    }

    public abstract boolean close() throws ORG.as220.tinySQL.tinySQLException;

    public abstract ORG.as220.tinySQL.tsColumn getColumnDefinition(int);

    public abstract int getColumnCount();

    public abstract int getRowCount();

    public abstract void updateRow(int, ORG.as220.tinySQL.tsRawRow) throws ORG.as220.tinySQL.tinySQLException;

    public abstract ORG.as220.tinySQL.tsRawRow getRow(int) throws ORG.as220.tinySQL.tinySQLException;

    public abstract int insertRow(ORG.as220.tinySQL.tsRawRow) throws ORG.as220.tinySQL.tinySQLException;

    public abstract void deleteRow(int) throws ORG.as220.tinySQL.tinySQLException;

    public abstract boolean isDeleted(int) throws ORG.as220.tinySQL.tinySQLException;

    public boolean isReadOnly()
    {
        ORG.as220.tinySQL.tinySQLTable r0;

        r0 := @this: ORG.as220.tinySQL.tinySQLTable;

        return 0;
    }

    public abstract ORG.as220.tinySQL.tsRawRow getInsertRow() throws ORG.as220.tinySQL.tinySQLException;

    public ORG.as220.tinySQL.tsRawRow getUpdateRow(int) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTable r0;
        int i0;
        ORG.as220.tinySQL.tsRawRow $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLTable;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTable: ORG.as220.tinySQL.tsRawRow getRow(int)>(i0);

        return $r1;
    }
}
