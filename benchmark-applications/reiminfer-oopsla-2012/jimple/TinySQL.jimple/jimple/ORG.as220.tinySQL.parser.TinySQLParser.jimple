public class ORG.as220.tinySQL.parser.TinySQLParser extends java.lang.Object implements ORG.as220.tinySQL.parser.TinySQLParserConstants
{
    public ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source;
    ORG.as220.tinySQL.parser.SimpleCharStream jj_input_stream;
    public ORG.as220.tinySQL.parser.Token token;
    public ORG.as220.tinySQL.parser.Token jj_nt;
    private int jj_gen;
    private final int[] jj_la1;
    private final int[] jj_la1_0;
    private final int[] jj_la1_1;
    private final int[] jj_la1_2;
    private final int[] jj_la1_3;
    private java.util.Vector jj_expentries;
    private int[] jj_expentry;
    private int jj_kind;

    public static java.math.BigDecimal createBigDecimal(java.lang.String)
    {
        java.lang.String r0;
        java.math.BigDecimal $r2, $r4;
        java.lang.Exception $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = new java.math.BigDecimal;

        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.lang.String)>(r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.math.BigDecimal;

        specialinvoke $r4.<java.math.BigDecimal: void <init>(int)>(0);

        return $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String stripQuote(java.lang.String)
    {
        java.lang.String r0, $r1;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 >= 2 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i2);

        return $r1;
    }

    public final ORG.as220.tinySQL.sqlparser.SQLStatement getStatement(ORG.as220.tinySQL.tinySQLStatement) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        ORG.as220.tinySQL.parser.Token $r2, $r9;
        int $i0, $i1, $i2, $i3;
        ORG.as220.tinySQL.sqlparser.EmptyStatement $r3;
        int[] $r4, $r6;
        ORG.as220.tinySQL.parser.ParseException $r5, $r7;
        ORG.as220.tinySQL.sqlparser.SQLStatement r8;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        $r2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r2.<ORG.as220.tinySQL.parser.Token: int kind>;

        lookupswitch($i0)
        {
            case 24: goto label06;
            case 29: goto label08;
            case 30: goto label07;
            case 31: goto label04;
            case 34: goto label05;
            case 40: goto label03;
            case 48: goto label01;
            case 52: goto label02;
            default: goto label09;
        };

     label01:
        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.SQLStatement Select(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        goto label10;

     label02:
        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.SQLStatement Update(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        goto label10;

     label03:
        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.SQLStatement Insert(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        goto label10;

     label04:
        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.SQLStatement Delete(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        goto label10;

     label05:
        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.SQLStatement DropTable(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        goto label10;

     label06:
        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.SQLStatement AlterTable(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        goto label10;

     label07:
        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.SQLStatement CreateTable(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        goto label10;

     label08:
        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.SQLStatement CompactTable(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        goto label10;

     label09:
        $r6 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r6[0] = $i2;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r7 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r7.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r7;

     label10:
        $r9 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i3 = $r9.<ORG.as220.tinySQL.parser.Token: int kind>;

        lookupswitch($i3)
        {
            case 0: goto label12;
            case 17: goto label11;
            default: goto label13;
        };

     label11:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(17);

        goto label14;

     label12:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(0);

        goto label14;

     label13:
        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r4[1] = $i1;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r5 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r5.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r5;

     label14:
        if r8 != null goto label15;

        $r3 = new ORG.as220.tinySQL.sqlparser.EmptyStatement;

        specialinvoke $r3.<ORG.as220.tinySQL.sqlparser.EmptyStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        r8 = $r3;

     label15:
        return r8;
    }

    public final ORG.as220.tinySQL.sqlparser.SQLStatement Select(ORG.as220.tinySQL.tinySQLStatement) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        ORG.as220.tinySQL.sqlparser.SelectStatement $r3;
        ORG.as220.tinySQL.parser.Token $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12;
        java.lang.Object $r8, $r12;
        java.lang.String $r9, $r13, $r14;
        ORG.as220.tinySQL.sqlparser.LValue $r10, r20;
        ORG.as220.tinySQL.sqlparser.WhereClause $r11;
        int[] $r15, $r16, $r17, $r18;
        java.util.Vector r19, r21;
        ORG.as220.tinySQL.parser.TinySQLParser$AliasedString r22;
        ORG.as220.tinySQL.parser.TinySQLParser$AliasedItem r23;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        $r3 = new ORG.as220.tinySQL.sqlparser.SelectStatement;

        specialinvoke $r3.<ORG.as220.tinySQL.sqlparser.SelectStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        i10 = virtualinvoke $r3.<ORG.as220.tinySQL.sqlparser.SelectStatement: int getModifier()>();

        r19 = null;

        r20 = null;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(48);

        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r4.<ORG.as220.tinySQL.parser.Token: int kind>;

        lookupswitch($i0)
        {
            case 23: goto label01;
            case 33: goto label01;
            default: goto label02;
        };

     label01:
        i10 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: int getSelectMod()>();

        goto label03;

     label02:
        $r18 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i9 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r18[2] = $i9;

     label03:
        r21 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.util.Vector getSelectColumns()>();

        $r5 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i1 = $r5.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i1)
        {
            case 37: goto label04;
            default: goto label05;
        };

     label04:
        r19 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.util.Vector getSelectTables()>();

        goto label06;

     label05:
        $r17 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i8 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r17[3] = $i8;

     label06:
        $r6 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i2 = $r6.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i2)
        {
            case 54: goto label07;
            default: goto label08;
        };

     label07:
        r20 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getWhereClauseExpression()>();

        goto label09;

     label08:
        $r16 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i7 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r16[4] = $i7;

     label09:
        $r7 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i3 = $r7.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i3)
        {
            case 46: goto label10;
            default: goto label11;
        };

     label10:
        virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getOrderBy()>();

        goto label12;

     label11:
        $r15 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i6 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r15[5] = $i6;

     label12:
        virtualinvoke $r3.<ORG.as220.tinySQL.sqlparser.SelectStatement: void setModifier(int)>(i10);

        if r19 == null goto label15;

        i11 = 0;

        goto label14;

     label13:
        $r12 = virtualinvoke r19.<java.util.Vector: java.lang.Object elementAt(int)>(i11);

        r22 = (ORG.as220.tinySQL.parser.TinySQLParser$AliasedString) $r12;

        $r14 = r22.<ORG.as220.tinySQL.parser.TinySQLParser$AliasedString: java.lang.String item>;

        $r13 = r22.<ORG.as220.tinySQL.parser.TinySQLParser$AliasedString: java.lang.String alias>;

        virtualinvoke $r3.<ORG.as220.tinySQL.sqlparser.SelectStatement: void addTable(java.lang.String,java.lang.String)>($r14, $r13);

        i11 = i11 + 1;

     label14:
        $i5 = virtualinvoke r19.<java.util.Vector: int size()>();

        if i11 < $i5 goto label13;

     label15:
        i12 = 0;

        goto label17;

     label16:
        $r8 = virtualinvoke r21.<java.util.Vector: java.lang.Object elementAt(int)>(i12);

        r23 = (ORG.as220.tinySQL.parser.TinySQLParser$AliasedItem) $r8;

        $r10 = r23.<ORG.as220.tinySQL.parser.TinySQLParser$AliasedItem: ORG.as220.tinySQL.sqlparser.LValue item>;

        $r9 = r23.<ORG.as220.tinySQL.parser.TinySQLParser$AliasedItem: java.lang.String alias>;

        virtualinvoke $r3.<ORG.as220.tinySQL.sqlparser.SelectStatement: void addColumn(ORG.as220.tinySQL.sqlparser.LValue,java.lang.String)>($r10, $r9);

        i12 = i12 + 1;

     label17:
        $i4 = virtualinvoke r21.<java.util.Vector: int size()>();

        if i12 < $i4 goto label16;

        if r20 == null goto label18;

        $r11 = new ORG.as220.tinySQL.sqlparser.WhereClause;

        specialinvoke $r11.<ORG.as220.tinySQL.sqlparser.WhereClause: void <init>(ORG.as220.tinySQL.sqlparser.ConditionalStatement)>($r3);

        virtualinvoke $r11.<ORG.as220.tinySQL.sqlparser.WhereClause: void setExpression(ORG.as220.tinySQL.sqlparser.LValue)>(r20);

        virtualinvoke $r3.<ORG.as220.tinySQL.sqlparser.SelectStatement: void setWhereClause(ORG.as220.tinySQL.sqlparser.WhereClause)>($r11);

     label18:
        return $r3;
    }

    public final int getSelectMod() throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.parser.Token $r1;
        int $i0, $i1;
        int[] $r4;
        ORG.as220.tinySQL.parser.ParseException $r6;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        $r1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r1.<ORG.as220.tinySQL.parser.Token: int kind>;

        lookupswitch($i0)
        {
            case 23: goto label2;
            case 33: goto label1;
            default: goto label3;
        };

     label1:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(33);

        return 2;

     label2:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(23);

        return 1;

     label3:
        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r4[6] = $i1;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r6 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r6.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r6;
    }

    public final java.util.Vector getSelectColumns() throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.parser.Token $r1, $r5, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        ORG.as220.tinySQL.sqlparser.JokerColumnValue $r2, $r6;
        java.util.Vector $r3;
        ORG.as220.tinySQL.parser.TinySQLParser$AliasedItem $r4, $r7;
        java.lang.String $r8, $r12, r16, r20;
        int[] $r9, $r11, $r13;
        ORG.as220.tinySQL.parser.ParseException $r10, $r14;
        ORG.as220.tinySQL.sqlparser.LValue r15, r19;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        $r1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r1.<ORG.as220.tinySQL.parser.Token: int kind>;

        lookupswitch($i0)
        {
            case 8: goto label01;
            case 18: goto label01;
            case 20: goto label01;
            case 44: goto label01;
            case 79: goto label02;
            case 91: goto label01;
            case 92: goto label01;
            case 93: goto label01;
            case 94: goto label02;
            case 95: goto label02;
            case 96: goto label01;
            case 101: goto label01;
            case 103: goto label01;
            default: goto label03;
        };

     label01:
        r15 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getExpression(int)>(0);

        $r12 = interfaceinvoke r15.<ORG.as220.tinySQL.sqlparser.LValue: java.lang.String getName()>();

        r16 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getAlias(java.lang.String)>($r12);

        goto label04;

     label02:
        r16 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getJokerName()>();

        $r2 = new ORG.as220.tinySQL.sqlparser.JokerColumnValue;

        specialinvoke $r2.<ORG.as220.tinySQL.sqlparser.JokerColumnValue: void <init>(java.lang.String)>(r16);

        r15 = $r2;

        goto label04;

     label03:
        $r13 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r13[7] = $i4;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r14 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r14.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r14;

     label04:
        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        $r4 = new ORG.as220.tinySQL.parser.TinySQLParser$AliasedItem;

        specialinvoke $r4.<ORG.as220.tinySQL.parser.TinySQLParser$AliasedItem: void <init>(ORG.as220.tinySQL.parser.TinySQLParser,ORG.as220.tinySQL.sqlparser.LValue,java.lang.String)>(r0, r15, r16);

        virtualinvoke $r3.<java.util.Vector: boolean add(java.lang.Object)>($r4);

     label05:
        $r18 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i5 = $r18.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i5)
        {
            case 12: goto label06;
            default: goto label07;
        };

     label06:
        goto label08;

     label07:
        $r11 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r11[8] = $i3;

        goto label13;

     label08:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(12);

        $r5 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i1 = $r5.<ORG.as220.tinySQL.parser.Token: int kind>;

        lookupswitch($i1)
        {
            case 8: goto label09;
            case 18: goto label09;
            case 20: goto label09;
            case 44: goto label09;
            case 79: goto label10;
            case 91: goto label09;
            case 92: goto label09;
            case 93: goto label09;
            case 94: goto label10;
            case 95: goto label10;
            case 96: goto label09;
            case 101: goto label09;
            case 103: goto label09;
            default: goto label11;
        };

     label09:
        r19 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getExpression(int)>(0);

        $r8 = interfaceinvoke r19.<ORG.as220.tinySQL.sqlparser.LValue: java.lang.String getName()>();

        r20 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getAlias(java.lang.String)>($r8);

        goto label12;

     label10:
        r20 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getJokerName()>();

        $r6 = new ORG.as220.tinySQL.sqlparser.JokerColumnValue;

        specialinvoke $r6.<ORG.as220.tinySQL.sqlparser.JokerColumnValue: void <init>(java.lang.String)>(r20);

        r19 = $r6;

        goto label12;

     label11:
        $r9 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r9[9] = $i2;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r10 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r10.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r10;

     label12:
        $r7 = new ORG.as220.tinySQL.parser.TinySQLParser$AliasedItem;

        specialinvoke $r7.<ORG.as220.tinySQL.parser.TinySQLParser$AliasedItem: void <init>(ORG.as220.tinySQL.parser.TinySQLParser,ORG.as220.tinySQL.sqlparser.LValue,java.lang.String)>(r0, r19, r20);

        virtualinvoke $r3.<java.util.Vector: boolean add(java.lang.Object)>($r7);

        goto label05;

     label13:
        return $r3;
    }

    public final java.lang.String getAlias(java.lang.String) throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        java.lang.String r1, r4;
        ORG.as220.tinySQL.parser.Token $r2;
        int $i0, $i1;
        int[] $r3;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: java.lang.String;

        r4 = r1;

        $r2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r2.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 25: goto label1;
            default: goto label2;
        };

     label1:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(25);

        r4 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getString()>();

        goto label3;

     label2:
        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r3[10] = $i1;

     label3:
        return r4;
    }

    public final java.lang.String getName() throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.parser.Token $r1, r5, r7;
        int $i0, $i1;
        java.lang.String $r2, r6;
        int[] $r3;
        ORG.as220.tinySQL.parser.ParseException $r4;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        $r1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r1.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 91: goto label1;
            case 92: goto label2;
            default: goto label3;
        };

     label1:
        r5 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(91);

        r6 = r5.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        goto label4;

     label2:
        r7 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(92);

        $r2 = r7.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        r6 = staticinvoke <ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String stripQuote(java.lang.String)>($r2);

        goto label4;

     label3:
        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r3[11] = $i1;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r4 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r4.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r4;

     label4:
        return r6;
    }

    public final java.lang.String getJokerName() throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.parser.Token $r1, r5, r7, r8;
        int $i0, $i1;
        java.lang.String $r2, r6;
        int[] $r3;
        ORG.as220.tinySQL.parser.ParseException $r4;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        $r1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r1.<ORG.as220.tinySQL.parser.Token: int kind>;

        lookupswitch($i0)
        {
            case 79: goto label3;
            case 94: goto label1;
            case 95: goto label2;
            default: goto label4;
        };

     label1:
        r5 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(94);

        r6 = r5.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        goto label5;

     label2:
        r7 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(95);

        $r2 = r7.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        r6 = staticinvoke <ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String stripQuote(java.lang.String)>($r2);

        goto label5;

     label3:
        r8 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(79);

        r6 = r8.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        goto label5;

     label4:
        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r3[12] = $i1;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r4 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r4.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r4;

     label5:
        return r6;
    }

    public final java.lang.String getString() throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.parser.Token $r1, r6;
        int $i0, $i1;
        java.lang.String $r2, $r3, r7, $r8;
        int[] $r4;
        ORG.as220.tinySQL.parser.ParseException $r5;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        $r1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r1.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 91: goto label1;
            case 92: goto label2;
            case 93: goto label3;
            default: goto label4;
        };

     label1:
        r6 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(91);

        r7 = r6.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        goto label5;

     label2:
        r6 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(92);

        $r3 = r6.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        staticinvoke <ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String stripQuote(java.lang.String)>($r3);

        goto label5;

     label3:
        r6 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(93);

        $r2 = r6.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        staticinvoke <ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String stripQuote(java.lang.String)>($r2);

        goto label5;

     label4:
        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r4[13] = $i1;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r5 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r5.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r5;

     label5:
        $r8 = r6.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        return $r8;
    }

    public final ORG.as220.tinySQL.sqlparser.LValue getExpression(int) throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        int $i0, $i1, i2, $i3;
        int[] $r1;
        boolean $z0;
        ORG.as220.tinySQL.sqlparser.Expression r2, r5;
        ORG.as220.tinySQL.sqlparser.LValue r3;
        ORG.as220.tinySQL.parser.Token $r4;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        i2 := @parameter0: int;

        r2 = null;

        if i2 != -1 goto label1;

        i2 = -2;

     label1:
        $i0 = i2 + 1;

        r3 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getLValue(int)>($i0);

     label2:
        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i3 = $r4.<ORG.as220.tinySQL.parser.Token: int kind>;

        lookupswitch($i3)
        {
            case 22: goto label3;
            case 45: goto label3;
            case 77: goto label3;
            case 78: goto label3;
            case 79: goto label3;
            case 80: goto label3;
            case 81: goto label3;
            case 82: goto label3;
            case 83: goto label3;
            case 84: goto label3;
            case 85: goto label3;
            case 86: goto label3;
            case 87: goto label3;
            case 88: goto label3;
            case 89: goto label3;
            case 90: goto label3;
            default: goto label4;
        };

     label3:
        goto label5;

     label4:
        $r1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r1[14] = $i1;

        goto label6;

     label5:
        r2 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.Expression startTail(ORG.as220.tinySQL.sqlparser.LValue,ORG.as220.tinySQL.sqlparser.Expression)>(r3, r2);

        goto label2;

     label6:
        if r2 == null goto label7;

        return r2;

     label7:
        if i2 != 0 goto label8;

        $z0 = r3 instanceof ORG.as220.tinySQL.sqlparser.Expression;

        if $z0 == 0 goto label8;

        r5 = (ORG.as220.tinySQL.sqlparser.Expression) r3;

     label8:
        return r3;
    }

    public final ORG.as220.tinySQL.sqlparser.Expression startTail(ORG.as220.tinySQL.sqlparser.LValue, ORG.as220.tinySQL.sqlparser.Expression) throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.sqlparser.LValue r1, r5;
        boolean $z0;
        ORG.as220.tinySQL.sqlparser.Expression $r2, r3;
        ORG.as220.tinySQL.sqlparser.Operator r4;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.LValue;

        r3 := @parameter1: ORG.as220.tinySQL.sqlparser.Expression;

        r4 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.Operator getOperator()>();

        r5 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getLValue(int)>(-1);

        if r3 != null goto label2;

        $z0 = r1 instanceof ORG.as220.tinySQL.sqlparser.Expression;

        if $z0 == 0 goto label1;

        r3 = (ORG.as220.tinySQL.sqlparser.Expression) r1;

        goto label2;

     label1:
        $r2 = new ORG.as220.tinySQL.sqlparser.Expression;

        specialinvoke $r2.<ORG.as220.tinySQL.sqlparser.Expression: void <init>(ORG.as220.tinySQL.sqlparser.LValue)>(r1);

        r3 = $r2;

     label2:
        virtualinvoke r3.<ORG.as220.tinySQL.sqlparser.Expression: void add(ORG.as220.tinySQL.sqlparser.Operator,ORG.as220.tinySQL.sqlparser.LValue)>(r4, r5);

        return r3;
    }

    public final ORG.as220.tinySQL.sqlparser.LValue getLValue(int) throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        int i0, $i1, $i2;
        ORG.as220.tinySQL.parser.Token $r1, r27, r29, r30, r31, r32, r33, r34;
        ORG.as220.tinySQL.sqlparser.StaticValue $r2, $r5, $r8, $r11, $r19, $r22;
        java.lang.String $r3, $r6, $r9, $r12, $r13, $r15, $r16, $r18, $r23;
        java.math.BigDecimal $r4, $r7, $r10, $r24;
        ORG.as220.tinySQL.sqlparser.ColumnValue $r14, $r17;
        ORG.as220.tinySQL.sqlparser.ParameterValue $r20;
        ORG.as220.tinySQL.sqlparser.Expression $r21;
        int[] $r25;
        ORG.as220.tinySQL.parser.ParseException $r26;
        ORG.as220.tinySQL.sqlparser.LValue r28;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        i0 := @parameter0: int;

        $r1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i1 = $r1.<ORG.as220.tinySQL.parser.Token: int kind>;

        lookupswitch($i1)
        {
            case 8: goto label07;
            case 18: goto label10;
            case 20: goto label08;
            case 44: goto label09;
            case 91: goto label01;
            case 92: goto label02;
            case 93: goto label03;
            case 96: goto label05;
            case 101: goto label06;
            case 103: goto label04;
            default: goto label11;
        };

     label01:
        r27 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(91);

        $r17 = new ORG.as220.tinySQL.sqlparser.ColumnValue;

        $r18 = r27.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        specialinvoke $r17.<ORG.as220.tinySQL.sqlparser.ColumnValue: void <init>(java.lang.String)>($r18);

        r28 = $r17;

        goto label12;

     label02:
        r29 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(92);

        $r14 = new ORG.as220.tinySQL.sqlparser.ColumnValue;

        $r15 = r29.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        $r16 = staticinvoke <ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String stripQuote(java.lang.String)>($r15);

        specialinvoke $r14.<ORG.as220.tinySQL.sqlparser.ColumnValue: void <init>(java.lang.String)>($r16);

        r28 = $r14;

        goto label12;

     label03:
        r30 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(93);

        $r11 = new ORG.as220.tinySQL.sqlparser.StaticValue;

        $r12 = r30.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        $r13 = staticinvoke <ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String stripQuote(java.lang.String)>($r12);

        specialinvoke $r11.<ORG.as220.tinySQL.sqlparser.StaticValue: void <init>(java.lang.Object)>($r13);

        r28 = $r11;

        goto label12;

     label04:
        r31 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(103);

        $r2 = new ORG.as220.tinySQL.sqlparser.StaticValue;

        $r3 = r31.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        $r4 = staticinvoke <ORG.as220.tinySQL.parser.TinySQLParser: java.math.BigDecimal createBigDecimal(java.lang.String)>($r3);

        specialinvoke $r2.<ORG.as220.tinySQL.sqlparser.StaticValue: void <init>(java.lang.Object)>($r4);

        r28 = $r2;

        goto label12;

     label05:
        r32 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(96);

        $r8 = new ORG.as220.tinySQL.sqlparser.StaticValue;

        $r9 = r32.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        $r10 = staticinvoke <ORG.as220.tinySQL.parser.TinySQLParser: java.math.BigDecimal createBigDecimal(java.lang.String)>($r9);

        specialinvoke $r8.<ORG.as220.tinySQL.sqlparser.StaticValue: void <init>(java.lang.Object)>($r10);

        r28 = $r8;

        goto label12;

     label06:
        r33 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(101);

        $r5 = new ORG.as220.tinySQL.sqlparser.StaticValue;

        $r6 = r33.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        $r7 = staticinvoke <ORG.as220.tinySQL.parser.TinySQLParser: java.math.BigDecimal createBigDecimal(java.lang.String)>($r6);

        specialinvoke $r5.<ORG.as220.tinySQL.sqlparser.StaticValue: void <init>(java.lang.Object)>($r7);

        r28 = $r5;

        goto label12;

     label07:
        r34 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(8);

        $r22 = new ORG.as220.tinySQL.sqlparser.StaticValue;

        $r23 = r34.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        $r24 = staticinvoke <ORG.as220.tinySQL.parser.TinySQLParser: java.math.BigDecimal createBigDecimal(java.lang.String)>($r23);

        specialinvoke $r22.<ORG.as220.tinySQL.sqlparser.StaticValue: void <init>(java.lang.Object)>($r24);

        r28 = $r22;

        goto label12;

     label08:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(20);

        $r20 = new ORG.as220.tinySQL.sqlparser.ParameterValue;

        specialinvoke $r20.<ORG.as220.tinySQL.sqlparser.ParameterValue: void <init>()>();

        r28 = $r20;

        goto label12;

     label09:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(44);

        $r19 = new ORG.as220.tinySQL.sqlparser.StaticValue;

        specialinvoke $r19.<ORG.as220.tinySQL.sqlparser.StaticValue: void <init>(java.lang.Object)>(null);

        r28 = $r19;

        goto label12;

     label10:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(18);

        r28 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getExpression(int)>(i0);

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(19);

        if i0 == -1 goto label12;

        $r21 = new ORG.as220.tinySQL.sqlparser.Expression;

        specialinvoke $r21.<ORG.as220.tinySQL.sqlparser.Expression: void <init>(ORG.as220.tinySQL.sqlparser.LValue)>(r28);

        r28 = $r21;

        goto label12;

     label11:
        $r25 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r25[15] = $i2;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r26 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r26.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r26;

     label12:
        return r28;
    }

    public final ORG.as220.tinySQL.sqlparser.Operator getOperator() throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.parser.Token $r1;
        int $i0, $i1;
        int[] $r2;
        ORG.as220.tinySQL.parser.ParseException $r3;
        ORG.as220.tinySQL.sqlparser.Operator r4;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        $r1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r1.<ORG.as220.tinySQL.parser.Token: int kind>;

        lookupswitch($i0)
        {
            case 22: goto label12;
            case 45: goto label13;
            case 77: goto label01;
            case 78: goto label02;
            case 79: goto label03;
            case 80: goto label04;
            case 81: goto label06;
            case 82: goto label05;
            case 83: goto label07;
            case 84: goto label08;
            case 85: goto label09;
            case 86: goto label10;
            case 87: goto label11;
            case 88: goto label14;
            case 89: goto label15;
            case 90: goto label16;
            default: goto label17;
        };

     label01:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(77);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator ADD>;

        goto label18;

     label02:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(78);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator SUB>;

        goto label18;

     label03:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(79);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator MULT>;

        goto label18;

     label04:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(80);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator DIV>;

        goto label18;

     label05:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(82);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator EQUAL>;

        goto label18;

     label06:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(81);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator EQUAL>;

        goto label18;

     label07:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(83);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator NEQUAL>;

        goto label18;

     label08:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(84);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator LEQUAL>;

        goto label18;

     label09:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(85);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator GEQUAL>;

        goto label18;

     label10:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(86);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator LESSER>;

        goto label18;

     label11:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(87);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator GREATER>;

        goto label18;

     label12:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(22);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator AND>;

        goto label18;

     label13:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(45);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator OR>;

        goto label18;

     label14:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(88);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator BETWEEN>;

        goto label18;

     label15:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(89);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator NBETWEEN>;

        goto label18;

     label16:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(90);

        r4 = <ORG.as220.tinySQL.sqlparser.Operator: ORG.as220.tinySQL.sqlparser.Operator LIKE>;

        goto label18;

     label17:
        $r2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r2[16] = $i1;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r3 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r3.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r3;

     label18:
        return r4;
    }

    public final java.util.Vector getSelectTables() throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        java.util.Vector $r1;
        ORG.as220.tinySQL.parser.TinySQLParser$AliasedString $r2, $r4;
        ORG.as220.tinySQL.parser.Token $r3;
        int $i0, $i1;
        int[] $r5;
        java.lang.String r6, r7, r9, r10;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(37);

        r6 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        r7 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getAlias(java.lang.String)>(r6);

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        $r2 = new ORG.as220.tinySQL.parser.TinySQLParser$AliasedString;

        specialinvoke $r2.<ORG.as220.tinySQL.parser.TinySQLParser$AliasedString: void <init>(ORG.as220.tinySQL.parser.TinySQLParser,java.lang.String,java.lang.String)>(r0, r6, r7);

        virtualinvoke $r1.<java.util.Vector: boolean add(java.lang.Object)>($r2);

     label1:
        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r3.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 12: goto label2;
            default: goto label3;
        };

     label2:
        goto label4;

     label3:
        $r5 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r5[17] = $i1;

        goto label5;

     label4:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(12);

        r9 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        r10 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getAlias(java.lang.String)>(r9);

        $r4 = new ORG.as220.tinySQL.parser.TinySQLParser$AliasedString;

        specialinvoke $r4.<ORG.as220.tinySQL.parser.TinySQLParser$AliasedString: void <init>(ORG.as220.tinySQL.parser.TinySQLParser,java.lang.String,java.lang.String)>(r0, r9, r10);

        virtualinvoke $r1.<java.util.Vector: boolean add(java.lang.Object)>($r4);

        goto label1;

     label5:
        return $r1;
    }

    public final ORG.as220.tinySQL.sqlparser.LValue getWhereClauseExpression() throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.sqlparser.LValue r1;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(54);

        r1 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getExpression(int)>(0);

        return r1;
    }

    public final ORG.as220.tinySQL.sqlparser.LValue getOrderBy() throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.sqlparser.LValue r1;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(46);

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(27);

        r1 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getExpression(int)>(0);

        return r1;
    }

    public final ORG.as220.tinySQL.sqlparser.SQLStatement Update(ORG.as220.tinySQL.tinySQLStatement) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        java.util.Vector $r5, $r6;
        ORG.as220.tinySQL.parser.Token $r7;
        int $i0, $i1, $i2, i3;
        ORG.as220.tinySQL.sqlparser.UpdateStatement $r8;
        java.lang.Object $r9;
        java.lang.String $r10, r14;
        ORG.as220.tinySQL.sqlparser.WhereClause $r11;
        int[] $r12;
        ORG.as220.tinySQL.sqlparser.LValue r13;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        $r6 = new java.util.Vector;

        specialinvoke $r6.<java.util.Vector: void <init>()>();

        r13 = null;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(52);

        r14 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: void updateSetColsVals(java.util.Vector,java.util.Vector)>($r5, $r6);

        $r7 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r7.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 54: goto label1;
            default: goto label2;
        };

     label1:
        r13 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getWhereClauseExpression()>();

        goto label3;

     label2:
        $r12 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r12[18] = $i2;

     label3:
        $r8 = new ORG.as220.tinySQL.sqlparser.UpdateStatement;

        specialinvoke $r8.<ORG.as220.tinySQL.sqlparser.UpdateStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        virtualinvoke $r8.<ORG.as220.tinySQL.sqlparser.UpdateStatement: void setTable(java.lang.String)>(r14);

        i3 = 0;

        goto label5;

     label4:
        $r9 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        $r10 = (java.lang.String) $r9;

        virtualinvoke $r8.<ORG.as220.tinySQL.sqlparser.UpdateStatement: void addColumn(java.lang.String)>($r10);

        i3 = i3 + 1;

     label5:
        $i1 = virtualinvoke $r5.<java.util.Vector: int size()>();

        if i3 < $i1 goto label4;

        if r13 == null goto label6;

        $r11 = new ORG.as220.tinySQL.sqlparser.WhereClause;

        specialinvoke $r11.<ORG.as220.tinySQL.sqlparser.WhereClause: void <init>(ORG.as220.tinySQL.sqlparser.ConditionalStatement)>($r8);

        virtualinvoke $r11.<ORG.as220.tinySQL.sqlparser.WhereClause: void setExpression(ORG.as220.tinySQL.sqlparser.LValue)>(r13);

        virtualinvoke $r8.<ORG.as220.tinySQL.sqlparser.UpdateStatement: void setWhereClause(ORG.as220.tinySQL.sqlparser.WhereClause)>($r11);

     label6:
        virtualinvoke $r8.<ORG.as220.tinySQL.sqlparser.UpdateStatement: void setValues(java.util.Vector)>($r6);

        return $r8;
    }

    public final void updateSetColsVals(java.util.Vector, java.util.Vector) throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        java.util.Vector r1, r2;
        ORG.as220.tinySQL.parser.Token $r3;
        int $i0, $i1;
        int[] $r4;
        java.lang.String r5, r7;
        ORG.as220.tinySQL.sqlparser.LValue r6, r8;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: java.util.Vector;

        r2 := @parameter1: java.util.Vector;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(49);

        r5 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(81);

        r6 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getExpression(int)>(0);

        virtualinvoke r1.<java.util.Vector: boolean add(java.lang.Object)>(r5);

        virtualinvoke r2.<java.util.Vector: boolean add(java.lang.Object)>(r6);

     label1:
        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r3.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 12: goto label2;
            default: goto label3;
        };

     label2:
        goto label4;

     label3:
        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r4[19] = $i1;

        goto label5;

     label4:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(12);

        r7 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(81);

        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getExpression(int)>(0);

        virtualinvoke r1.<java.util.Vector: boolean add(java.lang.Object)>(r7);

        virtualinvoke r2.<java.util.Vector: boolean add(java.lang.Object)>(r8);

        goto label1;

     label5:
        return;
    }

    public final ORG.as220.tinySQL.sqlparser.SQLStatement Insert(ORG.as220.tinySQL.tinySQLStatement) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        java.util.Vector $r5, $r6, $r13;
        ORG.as220.tinySQL.parser.Token $r7;
        int $i0, $i1, $i2, $i3, i4, i5;
        ORG.as220.tinySQL.sqlparser.InsertStatement $r8;
        ORG.as220.tinySQL.sqlparser.SelectStatement $r9;
        java.lang.Object $r10, $r12;
        java.lang.String $r11, r17;
        int[] $r14;
        ORG.as220.tinySQL.parser.ParseException $r15;
        ORG.as220.tinySQL.sqlparser.SQLStatement r16;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        $r6 = new java.util.Vector;

        specialinvoke $r6.<java.util.Vector: void <init>()>();

        r16 = null;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(40);

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(41);

        r17 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        $r7 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r7.<ORG.as220.tinySQL.parser.Token: int kind>;

        lookupswitch($i0)
        {
            case 18: goto label02;
            case 48: goto label01;
            case 49: goto label02;
            default: goto label03;
        };

     label01:
        r16 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.SQLStatement Select(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        goto label04;

     label02:
        virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: void insertColsVals(java.util.Vector,java.util.Vector)>($r5, $r6);

        goto label04;

     label03:
        $r14 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r14[20] = $i3;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r15 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r15.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r15;

     label04:
        $r8 = new ORG.as220.tinySQL.sqlparser.InsertStatement;

        specialinvoke $r8.<ORG.as220.tinySQL.sqlparser.InsertStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        virtualinvoke $r8.<ORG.as220.tinySQL.sqlparser.InsertStatement: void setTable(java.lang.String)>(r17);

        if r16 != null goto label09;

        i4 = 0;

        goto label06;

     label05:
        $r10 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>(i4);

        $r11 = (java.lang.String) $r10;

        virtualinvoke $r8.<ORG.as220.tinySQL.sqlparser.InsertStatement: void addColumn(java.lang.String)>($r11);

        i4 = i4 + 1;

     label06:
        $i1 = virtualinvoke $r5.<java.util.Vector: int size()>();

        if i4 < $i1 goto label05;

        i5 = 0;

        goto label08;

     label07:
        $r12 = virtualinvoke $r6.<java.util.Vector: java.lang.Object elementAt(int)>(i5);

        $r13 = (java.util.Vector) $r12;

        virtualinvoke $r8.<ORG.as220.tinySQL.sqlparser.InsertStatement: void addValues(java.util.Vector)>($r13);

        i5 = i5 + 1;

     label08:
        $i2 = virtualinvoke $r6.<java.util.Vector: int size()>();

        if i5 < $i2 goto label07;

        goto label10;

     label09:
        $r9 = (ORG.as220.tinySQL.sqlparser.SelectStatement) r16;

        virtualinvoke $r8.<ORG.as220.tinySQL.sqlparser.InsertStatement: void addSelect(ORG.as220.tinySQL.sqlparser.SelectStatement)>($r9);

     label10:
        return $r8;
    }

    public final void insertColsVals(java.util.Vector, java.util.Vector) throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        java.util.Vector r1, r2;
        ORG.as220.tinySQL.parser.Token $r3;
        int $i0, $i1;
        int[] $r4;
        ORG.as220.tinySQL.parser.ParseException $r6;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: java.util.Vector;

        r2 := @parameter1: java.util.Vector;

        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r3.<ORG.as220.tinySQL.parser.Token: int kind>;

        lookupswitch($i0)
        {
            case 18: goto label2;
            case 49: goto label1;
            default: goto label3;
        };

     label1:
        virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: void insertSetColsVals(java.util.Vector,java.util.Vector)>(r1, r2);

        goto label4;

     label2:
        virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: void insertValuesColsVals(java.util.Vector,java.util.Vector)>(r1, r2);

        goto label4;

     label3:
        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r4[21] = $i1;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r6 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r6.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r6;

     label4:
        return;
    }

    public final void insertSetColsVals(java.util.Vector, java.util.Vector) throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        java.util.Vector r1, r2, $r4;
        ORG.as220.tinySQL.parser.Token $r5;
        int $i0, $i1;
        int[] $r6;
        java.lang.String r7, r9;
        ORG.as220.tinySQL.sqlparser.LValue r8, r10;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: java.util.Vector;

        r2 := @parameter1: java.util.Vector;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        virtualinvoke r2.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(49);

        r7 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(81);

        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getExpression(int)>(0);

        virtualinvoke r1.<java.util.Vector: boolean add(java.lang.Object)>(r7);

        virtualinvoke $r4.<java.util.Vector: boolean add(java.lang.Object)>(r8);

     label1:
        $r5 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r5.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 12: goto label2;
            default: goto label3;
        };

     label2:
        goto label4;

     label3:
        $r6 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r6[22] = $i1;

        goto label5;

     label4:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(12);

        r9 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(81);

        r10 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getExpression(int)>(0);

        virtualinvoke r1.<java.util.Vector: boolean add(java.lang.Object)>(r9);

        virtualinvoke $r4.<java.util.Vector: boolean add(java.lang.Object)>(r10);

        goto label1;

     label5:
        return;
    }

    public final void insertValuesColsVals(java.util.Vector, java.util.Vector) throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        java.util.Vector r1, r2, r9, r10;
        ORG.as220.tinySQL.parser.Token $r3, $r5;
        int $i0, $i1, $i2, $i3;
        int[] $r4, $r6;
        java.lang.String r7, r8;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: java.util.Vector;

        r2 := @parameter1: java.util.Vector;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(18);

        r7 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        virtualinvoke r1.<java.util.Vector: boolean add(java.lang.Object)>(r7);

     label01:
        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r3.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 12: goto label02;
            default: goto label03;
        };

     label02:
        goto label04;

     label03:
        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r4[23] = $i1;

        goto label05;

     label04:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(12);

        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        virtualinvoke r1.<java.util.Vector: boolean add(java.lang.Object)>(r8);

        goto label01;

     label05:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(19);

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(53);

        r9 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.util.Vector getInsertValuesVal()>();

        virtualinvoke r2.<java.util.Vector: boolean add(java.lang.Object)>(r9);

     label06:
        $r5 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i2 = $r5.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i2)
        {
            case 12: goto label07;
            default: goto label08;
        };

     label07:
        goto label09;

     label08:
        $r6 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r6[24] = $i3;

        goto label10;

     label09:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(12);

        r10 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.util.Vector getInsertValuesVal()>();

        virtualinvoke r2.<java.util.Vector: boolean add(java.lang.Object)>(r10);

        goto label06;

     label10:
        return;
    }

    public final java.util.Vector getInsertValuesVal() throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        java.util.Vector $r2;
        ORG.as220.tinySQL.parser.Token $r3;
        int $i0, $i1;
        int[] $r4;
        ORG.as220.tinySQL.sqlparser.LValue r5, r6;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(18);

        r5 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getExpression(int)>(0);

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>(r5);

     label1:
        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r3.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 12: goto label2;
            default: goto label3;
        };

     label2:
        goto label4;

     label3:
        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r4[25] = $i1;

        goto label5;

     label4:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(12);

        r6 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getExpression(int)>(0);

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>(r6);

        goto label1;

     label5:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(19);

        return $r2;
    }

    public final ORG.as220.tinySQL.sqlparser.SQLStatement Delete(ORG.as220.tinySQL.tinySQLStatement) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        ORG.as220.tinySQL.parser.Token $r4;
        int $i0, $i1;
        ORG.as220.tinySQL.sqlparser.DeleteStatement $r5;
        ORG.as220.tinySQL.sqlparser.WhereClause $r6;
        int[] $r7;
        ORG.as220.tinySQL.sqlparser.LValue r8;
        java.lang.String r9;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        r8 = null;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(31);

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(37);

        r9 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r4.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 54: goto label1;
            default: goto label2;
        };

     label1:
        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.LValue getWhereClauseExpression()>();

        goto label3;

     label2:
        $r7 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r7[26] = $i1;

     label3:
        $r5 = new ORG.as220.tinySQL.sqlparser.DeleteStatement;

        specialinvoke $r5.<ORG.as220.tinySQL.sqlparser.DeleteStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        virtualinvoke $r5.<ORG.as220.tinySQL.sqlparser.DeleteStatement: void setTable(java.lang.String)>(r9);

        if r8 == null goto label4;

        $r6 = new ORG.as220.tinySQL.sqlparser.WhereClause;

        specialinvoke $r6.<ORG.as220.tinySQL.sqlparser.WhereClause: void <init>(ORG.as220.tinySQL.sqlparser.ConditionalStatement)>($r5);

        virtualinvoke $r6.<ORG.as220.tinySQL.sqlparser.WhereClause: void setExpression(ORG.as220.tinySQL.sqlparser.LValue)>(r8);

        virtualinvoke $r5.<ORG.as220.tinySQL.sqlparser.DeleteStatement: void setWhereClause(ORG.as220.tinySQL.sqlparser.WhereClause)>($r6);

     label4:
        return $r5;
    }

    public final boolean ifExists() throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(39);

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(36);

        return 1;
    }

    public final boolean ifNotExists() throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(39);

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(43);

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(36);

        return 1;
    }

    public final ORG.as220.tinySQL.sqlparser.SQLStatement DropTable(ORG.as220.tinySQL.tinySQLStatement) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        ORG.as220.tinySQL.parser.Token $r3;
        int $i0, $i1;
        ORG.as220.tinySQL.sqlparser.DropTableStatement $r4;
        int[] $r5;
        boolean z0;
        java.lang.String r6;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        z0 = 0;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(34);

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(50);

        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r3.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 39: goto label1;
            default: goto label2;
        };

     label1:
        z0 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: boolean ifExists()>();

        goto label3;

     label2:
        $r5 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r5[27] = $i1;

     label3:
        r6 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        $r4 = new ORG.as220.tinySQL.sqlparser.DropTableStatement;

        specialinvoke $r4.<ORG.as220.tinySQL.sqlparser.DropTableStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        virtualinvoke $r4.<ORG.as220.tinySQL.sqlparser.DropTableStatement: void setTable(java.lang.String,boolean)>(r6, z0);

        return $r4;
    }

    public final ORG.as220.tinySQL.sqlparser.SQLStatement CompactTable(ORG.as220.tinySQL.tinySQLStatement) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        ORG.as220.tinySQL.sqlparser.CompactTableStatement $r3;
        java.lang.String r4;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(29);

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(50);

        r4 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        $r3 = new ORG.as220.tinySQL.sqlparser.CompactTableStatement;

        specialinvoke $r3.<ORG.as220.tinySQL.sqlparser.CompactTableStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        virtualinvoke $r3.<ORG.as220.tinySQL.sqlparser.CompactTableStatement: void setTable(java.lang.String)>(r4);

        return $r3;
    }

    public final ORG.as220.tinySQL.sqlparser.SQLStatement CreateTable(ORG.as220.tinySQL.tinySQLStatement) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        int i0, i1;
        ORG.as220.tinySQL.sqlparser.CreateTableStatement $r3;
        java.lang.Object $r4;
        ORG.as220.tinySQL.sqlparser.ColumnDefinition $r5;
        java.lang.String r6;
        java.util.Vector r7;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(30);

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(50);

        r6 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        r7 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.util.Vector getColumnDefinitions()>();

        $r3 = new ORG.as220.tinySQL.sqlparser.CreateTableStatement;

        specialinvoke $r3.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        virtualinvoke $r3.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: void setTable(java.lang.String)>(r6);

        i0 = virtualinvoke r7.<java.util.Vector: int size()>();

        i1 = 0;

        goto label2;

     label1:
        $r4 = virtualinvoke r7.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        $r5 = (ORG.as220.tinySQL.sqlparser.ColumnDefinition) $r4;

        virtualinvoke $r3.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: void addColumnDefinition(ORG.as220.tinySQL.sqlparser.ColumnDefinition)>($r5);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return $r3;
    }

    public final java.util.Vector getColumnDefinitions() throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        java.util.Vector $r2;
        ORG.as220.tinySQL.parser.Token $r3;
        int $i0, $i1;
        int[] $r4;
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r5, r6;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(18);

        r5 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.ColumnDefinition getColumnDefinition()>();

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>(r5);

     label1:
        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r3.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 12: goto label2;
            default: goto label3;
        };

     label2:
        goto label4;

     label3:
        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r4[28] = $i1;

        goto label5;

     label4:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(12);

        r6 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.ColumnDefinition getColumnDefinition()>();

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>(r6);

        goto label1;

     label5:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(19);

        return $r2;
    }

    public final ORG.as220.tinySQL.sqlparser.ColumnDefinition getColumnDefinition() throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.sqlparser.ColumnDefinition $r1;
        ORG.as220.tinySQL.parser.Token $r2, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r3, $r5, $r6;
        ORG.as220.tinySQL.parser.ParseException $r4, $r7;
        java.lang.String r8;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        $r1 = new ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        specialinvoke $r1.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: void <init>(java.lang.String)>(r8);

        $r2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r2.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 55: goto label02;
            case 56: goto label01;
            case 57: goto label03;
            case 58: goto label01;
            case 59: goto label01;
            case 60: goto label03;
            case 61: goto label01;
            case 62: goto label03;
            case 63: goto label01;
            case 64: goto label01;
            case 65: goto label01;
            case 66: goto label01;
            case 67: goto label01;
            case 68: goto label02;
            case 69: goto label02;
            case 70: goto label02;
            case 71: goto label02;
            case 72: goto label02;
            case 73: goto label01;
            case 74: goto label01;
            case 75: goto label02;
            case 76: goto label02;
            default: goto label04;
        };

     label01:
        virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: void getSimpleType(ORG.as220.tinySQL.sqlparser.ColumnDefinition)>($r1);

        goto label05;

     label02:
        virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: void getCharType(ORG.as220.tinySQL.sqlparser.ColumnDefinition)>($r1);

        goto label05;

     label03:
        virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: void getNumericType(ORG.as220.tinySQL.sqlparser.ColumnDefinition)>($r1);

        goto label05;

     label04:
        $r6 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r6[29] = $i3;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r7 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r7.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r7;

     label05:
        $r10 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i4 = $r10.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i4)
        {
            case 43: goto label06;
            case 44: goto label06;
            default: goto label10;
        };

     label06:
        $r11 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i5 = $r11.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i5)
        {
            case 43: goto label08;
            case 44: goto label07;
            default: goto label09;
        };

     label07:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(44);

        virtualinvoke $r1.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: void setNullable(boolean)>(1);

        goto label11;

     label08:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(43);

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(44);

        virtualinvoke $r1.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: void setNullable(boolean)>(0);

        goto label11;

     label09:
        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r3[30] = $i1;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r4 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r4.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r4;

     label10:
        $r5 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r5[31] = $i2;

     label11:
        return $r1;
    }

    public final void getNumericType(ORG.as220.tinySQL.sqlparser.ColumnDefinition) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r1;
        int i0, i1, $i2, $i3, $i4, $i6;
        ORG.as220.tinySQL.parser.Token $r2, r8, r9, $r10;
        java.lang.String $r3, $r4;
        int[] $r5, $r6;
        ORG.as220.tinySQL.parser.ParseException $r7;
        byte b5;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        r8 = null;

        $r2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i2 = $r2.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i2)
        {
            case 57: goto label01;
            case 58: goto label04;
            case 59: goto label04;
            case 60: goto label03;
            case 61: goto label04;
            case 62: goto label02;
            default: goto label04;
        };

     label01:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(57);

        b5 = 2;

        goto label05;

     label02:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(62);

        b5 = 3;

        goto label05;

     label03:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(60);

        b5 = 7;

        goto label05;

     label04:
        $r6 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r6[32] = $i4;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r7 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r7.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r7;

     label05:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(18);

        r9 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(8);

        $r10 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i6 = $r10.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i6)
        {
            case 12: goto label06;
            default: goto label07;
        };

     label06:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(12);

        r8 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(8);

        goto label08;

     label07:
        $r5 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r5[33] = $i3;

     label08:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(19);

        virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: void setType(int)>(b5);

        $r3 = r9.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        if r8 == null goto label09;

        $r4 = r8.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: void setSize(int,int)>(i0, i1);

        goto label10;

     label09:
        virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: void setSize(int,int)>(i0, 0);

     label10:
        return;
    }

    public final void getSimpleType(ORG.as220.tinySQL.sqlparser.ColumnDefinition) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r1;
        ORG.as220.tinySQL.parser.Token $r2;
        int $i0, $i1;
        int[] $r3;
        ORG.as220.tinySQL.parser.ParseException $r4;
        byte b2;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        $r2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r2.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 56: goto label01;
            case 57: goto label12;
            case 58: goto label07;
            case 59: goto label11;
            case 60: goto label12;
            case 61: goto label10;
            case 62: goto label12;
            case 63: goto label06;
            case 64: goto label05;
            case 65: goto label02;
            case 66: goto label04;
            case 67: goto label03;
            case 68: goto label12;
            case 69: goto label12;
            case 70: goto label12;
            case 71: goto label12;
            case 72: goto label12;
            case 73: goto label08;
            case 74: goto label09;
            default: goto label12;
        };

     label01:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(56);

        b2 = 4;

        goto label13;

     label02:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(65);

        b2 = -5;

        goto label13;

     label03:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(67);

        b2 = -6;

        goto label13;

     label04:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(66);

        b2 = 5;

        goto label13;

     label05:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(64);

        b2 = 7;

        goto label13;

     label06:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(63);

        b2 = 8;

        goto label13;

     label07:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(58);

        b2 = 91;

        goto label13;

     label08:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(73);

        b2 = 92;

        goto label13;

     label09:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(74);

        b2 = 93;

        goto label13;

     label10:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(61);

        b2 = -7;

        goto label13;

     label11:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(59);

        b2 = -7;

        goto label13;

     label12:
        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r3[34] = $i1;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r4 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r4.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r4;

     label13:
        virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: void setType(int)>(b2);

        return;
    }

    public final void getCharType(ORG.as220.tinySQL.sqlparser.ColumnDefinition) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r1;
        ORG.as220.tinySQL.parser.Token $r2, r5;
        int $i0, $i1, $i3;
        int[] $r3;
        ORG.as220.tinySQL.parser.ParseException $r4;
        short s2;
        java.lang.String $r6;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        $r2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r2.<ORG.as220.tinySQL.parser.Token: int kind>;

        lookupswitch($i0)
        {
            case 55: goto label01;
            case 68: goto label02;
            case 69: goto label03;
            case 70: goto label04;
            case 71: goto label05;
            case 72: goto label06;
            case 75: goto label08;
            case 76: goto label07;
            default: goto label09;
        };

     label01:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(55);

        s2 = 1;

        goto label10;

     label02:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(68);

        s2 = 12;

        goto label10;

     label03:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(69);

        s2 = -1;

        goto label10;

     label04:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(70);

        s2 = -2;

        goto label10;

     label05:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(71);

        s2 = -3;

        goto label10;

     label06:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(72);

        s2 = -4;

        goto label10;

     label07:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(76);

        s2 = 2005;

        goto label10;

     label08:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(75);

        s2 = 2004;

        goto label10;

     label09:
        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r3[35] = $i1;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r4 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r4.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r4;

     label10:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(18);

        r5 = specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(8);

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(19);

        virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: void setType(int)>(s2);

        $r6 = r5.<ORG.as220.tinySQL.parser.Token: java.lang.String image>;

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: void setSize(int)>($i3);

        return;
    }

    public final ORG.as220.tinySQL.sqlparser.SQLStatement AlterTable(ORG.as220.tinySQL.tinySQLStatement) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        ORG.as220.tinySQL.parser.Token $r2, $r3;
        int $i0, $i1, $i2, $i3;
        int[] $r4, $r6;
        ORG.as220.tinySQL.parser.ParseException $r5, $r7;
        ORG.as220.tinySQL.sqlparser.SQLStatement r8;
        java.lang.String r9;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(24);

        $r2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r2.<ORG.as220.tinySQL.parser.Token: int kind>;

        lookupswitch($i0)
        {
            case 30: goto label1;
            case 50: goto label2;
            default: goto label7;
        };

     label1:
        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.SQLStatement AlterCreateTable(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        goto label8;

     label2:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(50);

        r9 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i1 = $r3.<ORG.as220.tinySQL.parser.Token: int kind>;

        lookupswitch($i1)
        {
            case 21: goto label3;
            case 34: goto label4;
            case 47: goto label5;
            default: goto label6;
        };

     label3:
        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.SQLStatement AlterTableAddColumn(ORG.as220.tinySQL.tinySQLStatement,java.lang.String)>(r1, r9);

        goto label8;

     label4:
        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.SQLStatement AlterTableDropColumn(ORG.as220.tinySQL.tinySQLStatement,java.lang.String)>(r1, r9);

        goto label8;

     label5:
        r8 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.SQLStatement AlterTableRenameColumn(ORG.as220.tinySQL.tinySQLStatement,java.lang.String)>(r1, r9);

        goto label8;

     label6:
        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r4[36] = $i2;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r5 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r5.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r5;

     label7:
        $r6 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r6[37] = $i3;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(-1);

        $r7 = new ORG.as220.tinySQL.parser.ParseException;

        specialinvoke $r7.<ORG.as220.tinySQL.parser.ParseException: void <init>()>();

        throw $r7;

     label8:
        return r8;
    }

    public final ORG.as220.tinySQL.sqlparser.SQLStatement AlterTableAddColumn(ORG.as220.tinySQL.tinySQLStatement, java.lang.String) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        java.lang.String r2;
        int i0, $i1, $i2, i3;
        ORG.as220.tinySQL.parser.Token $r4;
        ORG.as220.tinySQL.sqlparser.AlterTableAddColumnStatement $r5;
        java.lang.Object $r6;
        ORG.as220.tinySQL.sqlparser.ColumnDefinition $r7;
        int[] $r8;
        java.util.Vector r9;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(21);

        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i1 = $r4.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i1)
        {
            case 28: goto label1;
            default: goto label2;
        };

     label1:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(28);

        goto label3;

     label2:
        $r8 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r8[38] = $i2;

     label3:
        r9 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.util.Vector getColumnDefinitions()>();

        $r5 = new ORG.as220.tinySQL.sqlparser.AlterTableAddColumnStatement;

        specialinvoke $r5.<ORG.as220.tinySQL.sqlparser.AlterTableAddColumnStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        virtualinvoke $r5.<ORG.as220.tinySQL.sqlparser.AlterTableAddColumnStatement: void setTable(java.lang.String)>(r2);

        i0 = virtualinvoke r9.<java.util.Vector: int size()>();

        i3 = 0;

        goto label5;

     label4:
        $r6 = virtualinvoke r9.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        $r7 = (ORG.as220.tinySQL.sqlparser.ColumnDefinition) $r6;

        virtualinvoke $r5.<ORG.as220.tinySQL.sqlparser.AlterTableAddColumnStatement: void addColumn(ORG.as220.tinySQL.sqlparser.ColumnDefinition)>($r7);

        i3 = i3 + 1;

     label5:
        if i3 < i0 goto label4;

        return $r5;
    }

    public final ORG.as220.tinySQL.sqlparser.SQLStatement AlterTableDropColumn(ORG.as220.tinySQL.tinySQLStatement, java.lang.String) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        java.lang.String r2, $r7;
        int i0, $i1, $i2, i3;
        ORG.as220.tinySQL.parser.Token $r4;
        ORG.as220.tinySQL.sqlparser.AlterTableDropColumnStatement $r5;
        java.lang.Object $r6;
        int[] $r8;
        java.util.Vector r9;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(34);

        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i1 = $r4.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i1)
        {
            case 28: goto label1;
            default: goto label2;
        };

     label1:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(28);

        goto label3;

     label2:
        $r8 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r8[39] = $i2;

     label3:
        r9 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.util.Vector getNames()>();

        $r5 = new ORG.as220.tinySQL.sqlparser.AlterTableDropColumnStatement;

        specialinvoke $r5.<ORG.as220.tinySQL.sqlparser.AlterTableDropColumnStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        virtualinvoke $r5.<ORG.as220.tinySQL.sqlparser.AlterTableDropColumnStatement: void setTable(java.lang.String)>(r2);

        i0 = virtualinvoke r9.<java.util.Vector: int size()>();

        i3 = 0;

        goto label5;

     label4:
        $r6 = virtualinvoke r9.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        $r7 = (java.lang.String) $r6;

        virtualinvoke $r5.<ORG.as220.tinySQL.sqlparser.AlterTableDropColumnStatement: void addColumn(java.lang.String)>($r7);

        i3 = i3 + 1;

     label5:
        if i3 < i0 goto label4;

        return $r5;
    }

    public final ORG.as220.tinySQL.sqlparser.SQLStatement AlterTableRenameColumn(ORG.as220.tinySQL.tinySQLStatement, java.lang.String) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        java.lang.String r2, r9, r10;
        ORG.as220.tinySQL.parser.Token $r4, $r5;
        int $i0, $i1, $i2, $i3;
        ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement $r6;
        int[] $r7, $r8;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(47);

        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r4.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 28: goto label1;
            default: goto label2;
        };

     label1:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(28);

        goto label3;

     label2:
        $r8 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r8[40] = $i3;

     label3:
        r9 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        $r5 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i1 = $r5.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i1)
        {
            case 51: goto label4;
            default: goto label5;
        };

     label4:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(51);

        goto label6;

     label5:
        $r7 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r7[41] = $i2;

     label6:
        r10 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        $r6 = new ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement;

        specialinvoke $r6.<ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        virtualinvoke $r6.<ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement: void setTable(java.lang.String)>(r2);

        virtualinvoke $r6.<ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement: void addColumn(java.lang.String,java.lang.String)>(r9, r10);

        return $r6;
    }

    public final ORG.as220.tinySQL.sqlparser.SQLStatement AlterCreateTable(ORG.as220.tinySQL.tinySQLStatement) throws ORG.as220.tinySQL.parser.ParseException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        ORG.as220.tinySQL.sqlparser.AlterCreateTableStatement $r3;
        ORG.as220.tinySQL.sqlparser.CreateTableStatement $r4;
        ORG.as220.tinySQL.sqlparser.SQLStatement r5;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        r5 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.SQLStatement CreateTable(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        $r3 = new ORG.as220.tinySQL.sqlparser.AlterCreateTableStatement;

        specialinvoke $r3.<ORG.as220.tinySQL.sqlparser.AlterCreateTableStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>(r1);

        $r4 = (ORG.as220.tinySQL.sqlparser.CreateTableStatement) r5;

        virtualinvoke $r3.<ORG.as220.tinySQL.sqlparser.AlterCreateTableStatement: void setCreateTableStatement(ORG.as220.tinySQL.sqlparser.CreateTableStatement)>($r4);

        return $r3;
    }

    public final java.util.Vector getNames() throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        java.util.Vector $r2;
        ORG.as220.tinySQL.parser.Token $r3;
        int $i0, $i1;
        int[] $r4;
        java.lang.String r5, r6;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r5 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>(r5);

     label1:
        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $i0 = $r3.<ORG.as220.tinySQL.parser.Token: int kind>;

        tableswitch($i0)
        {
            case 12: goto label2;
            default: goto label3;
        };

     label2:
        goto label4;

     label3:
        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $r4[42] = $i1;

        goto label5;

     label4:
        specialinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_consume_token(int)>(12);

        r6 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String getName()>();

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>(r6);

        goto label1;

     label5:
        return $r2;
    }

    public void <init>(java.io.InputStream)
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        java.io.InputStream r1;
        int[] $r2, $r3, $r4, $r5, $r6, $r15;
        java.util.Vector $r7;
        ORG.as220.tinySQL.parser.SimpleCharStream $r8, $r10;
        ORG.as220.tinySQL.parser.TinySQLParserTokenManager $r9, $r12;
        ORG.as220.tinySQL.parser.Token $r11, $r13, $r14;
        int i0;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (int)[43];

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1> = $r2;

        $r3 = newarray (int)[43];

        $r3[0] = -520093696;

        $r3[1] = 131073;

        $r3[2] = 8388608;

        $r3[6] = 8388608;

        $r3[7] = 1310976;

        $r3[8] = 4096;

        $r3[9] = 1310976;

        $r3[10] = 33554432;

        $r3[14] = 4194304;

        $r3[15] = 1310976;

        $r3[16] = 4194304;

        $r3[17] = 4096;

        $r3[19] = 4096;

        $r3[20] = 262144;

        $r3[21] = 262144;

        $r3[22] = 4096;

        $r3[23] = 4096;

        $r3[24] = 4096;

        $r3[25] = 4096;

        $r3[28] = 4096;

        $r3[33] = 4096;

        $r3[36] = 2097152;

        $r3[37] = 1073741824;

        $r3[38] = 268435456;

        $r3[39] = 268435456;

        $r3[40] = 268435456;

        $r3[42] = 4096;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_0> = $r3;

        $r4 = newarray (int)[43];

        $r4[0] = 1114372;

        $r4[2] = 2;

        $r4[3] = 32;

        $r4[4] = 4194304;

        $r4[5] = 16384;

        $r4[6] = 2;

        $r4[7] = 4096;

        $r4[9] = 4096;

        $r4[14] = 8192;

        $r4[15] = 4096;

        $r4[16] = 8192;

        $r4[18] = 4194304;

        $r4[20] = 196608;

        $r4[21] = 131072;

        $r4[26] = 4194304;

        $r4[27] = 128;

        $r4[29] = -8388608;

        $r4[30] = 6144;

        $r4[31] = 6144;

        $r4[32] = 1375731712;

        $r4[34] = -1392508928;

        $r4[35] = 8388608;

        $r4[36] = 32772;

        $r4[37] = 262144;

        $r4[41] = 524288;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_1> = $r4;

        $r5 = newarray (int)[43];

        $r5[7] = -134184960;

        $r5[9] = -134184960;

        $r5[11] = 402653184;

        $r5[12] = -1073709056;

        $r5[13] = 939524096;

        $r5[14] = 134209536;

        $r5[15] = 939524096;

        $r5[16] = 134209536;

        $r5[29] = 8191;

        $r5[34] = 1551;

        $r5[35] = 6640;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_2> = $r5;

        $r6 = newarray (int)[43];

        $r6[7] = 161;

        $r6[9] = 161;

        $r6[15] = 161;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_3> = $r6;

        $r7 = new java.util.Vector;

        specialinvoke $r7.<java.util.Vector: void <init>()>();

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.util.Vector jj_expentries> = $r7;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_kind> = -1;

        $r8 = new ORG.as220.tinySQL.parser.SimpleCharStream;

        specialinvoke $r8.<ORG.as220.tinySQL.parser.SimpleCharStream: void <init>(java.io.InputStream,int,int)>(r1, 1, 1);

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.SimpleCharStream jj_input_stream> = $r8;

        $r9 = new ORG.as220.tinySQL.parser.TinySQLParserTokenManager;

        $r10 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.SimpleCharStream jj_input_stream>;

        specialinvoke $r9.<ORG.as220.tinySQL.parser.TinySQLParserTokenManager: void <init>(ORG.as220.tinySQL.parser.SimpleCharStream)>($r10);

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source> = $r9;

        $r11 = new ORG.as220.tinySQL.parser.Token;

        specialinvoke $r11.<ORG.as220.tinySQL.parser.Token: void <init>()>();

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token> = $r11;

        $r13 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token>;

        $r12 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source>;

        $r14 = virtualinvoke $r12.<ORG.as220.tinySQL.parser.TinySQLParserTokenManager: ORG.as220.tinySQL.parser.Token getNextToken()>();

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt> = $r14;

        $r13.<ORG.as220.tinySQL.parser.Token: ORG.as220.tinySQL.parser.Token next> = $r14;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen> = 0;

        i0 = 0;

        goto label2;

     label1:
        $r15 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $r15[i0] = -1;

        i0 = i0 + 1;

     label2:
        if i0 < 43 goto label1;

        return;
    }

    public void ReInit(java.io.InputStream)
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        java.io.InputStream r1;
        ORG.as220.tinySQL.parser.SimpleCharStream $r2, $r3;
        ORG.as220.tinySQL.parser.TinySQLParserTokenManager $r4, $r6;
        ORG.as220.tinySQL.parser.Token $r5, $r7, $r8;
        int[] $r9;
        int i0;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: java.io.InputStream;

        $r2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.SimpleCharStream jj_input_stream>;

        virtualinvoke $r2.<ORG.as220.tinySQL.parser.SimpleCharStream: void ReInit(java.io.InputStream,int,int)>(r1, 1, 1);

        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source>;

        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.SimpleCharStream jj_input_stream>;

        virtualinvoke $r4.<ORG.as220.tinySQL.parser.TinySQLParserTokenManager: void ReInit(ORG.as220.tinySQL.parser.SimpleCharStream)>($r3);

        $r5 = new ORG.as220.tinySQL.parser.Token;

        specialinvoke $r5.<ORG.as220.tinySQL.parser.Token: void <init>()>();

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token> = $r5;

        $r7 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token>;

        $r6 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source>;

        $r8 = virtualinvoke $r6.<ORG.as220.tinySQL.parser.TinySQLParserTokenManager: ORG.as220.tinySQL.parser.Token getNextToken()>();

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt> = $r8;

        $r7.<ORG.as220.tinySQL.parser.Token: ORG.as220.tinySQL.parser.Token next> = $r8;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen> = 0;

        i0 = 0;

        goto label2;

     label1:
        $r9 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $r9[i0] = -1;

        i0 = i0 + 1;

     label2:
        if i0 < 43 goto label1;

        return;
    }

    public void <init>(java.io.Reader)
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        java.io.Reader r1;
        int[] $r2, $r3, $r4, $r5, $r6, $r15;
        java.util.Vector $r7;
        ORG.as220.tinySQL.parser.SimpleCharStream $r8, $r10;
        ORG.as220.tinySQL.parser.TinySQLParserTokenManager $r9, $r12;
        ORG.as220.tinySQL.parser.Token $r11, $r13, $r14;
        int i0;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (int)[43];

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1> = $r2;

        $r3 = newarray (int)[43];

        $r3[0] = -520093696;

        $r3[1] = 131073;

        $r3[2] = 8388608;

        $r3[6] = 8388608;

        $r3[7] = 1310976;

        $r3[8] = 4096;

        $r3[9] = 1310976;

        $r3[10] = 33554432;

        $r3[14] = 4194304;

        $r3[15] = 1310976;

        $r3[16] = 4194304;

        $r3[17] = 4096;

        $r3[19] = 4096;

        $r3[20] = 262144;

        $r3[21] = 262144;

        $r3[22] = 4096;

        $r3[23] = 4096;

        $r3[24] = 4096;

        $r3[25] = 4096;

        $r3[28] = 4096;

        $r3[33] = 4096;

        $r3[36] = 2097152;

        $r3[37] = 1073741824;

        $r3[38] = 268435456;

        $r3[39] = 268435456;

        $r3[40] = 268435456;

        $r3[42] = 4096;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_0> = $r3;

        $r4 = newarray (int)[43];

        $r4[0] = 1114372;

        $r4[2] = 2;

        $r4[3] = 32;

        $r4[4] = 4194304;

        $r4[5] = 16384;

        $r4[6] = 2;

        $r4[7] = 4096;

        $r4[9] = 4096;

        $r4[14] = 8192;

        $r4[15] = 4096;

        $r4[16] = 8192;

        $r4[18] = 4194304;

        $r4[20] = 196608;

        $r4[21] = 131072;

        $r4[26] = 4194304;

        $r4[27] = 128;

        $r4[29] = -8388608;

        $r4[30] = 6144;

        $r4[31] = 6144;

        $r4[32] = 1375731712;

        $r4[34] = -1392508928;

        $r4[35] = 8388608;

        $r4[36] = 32772;

        $r4[37] = 262144;

        $r4[41] = 524288;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_1> = $r4;

        $r5 = newarray (int)[43];

        $r5[7] = -134184960;

        $r5[9] = -134184960;

        $r5[11] = 402653184;

        $r5[12] = -1073709056;

        $r5[13] = 939524096;

        $r5[14] = 134209536;

        $r5[15] = 939524096;

        $r5[16] = 134209536;

        $r5[29] = 8191;

        $r5[34] = 1551;

        $r5[35] = 6640;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_2> = $r5;

        $r6 = newarray (int)[43];

        $r6[7] = 161;

        $r6[9] = 161;

        $r6[15] = 161;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_3> = $r6;

        $r7 = new java.util.Vector;

        specialinvoke $r7.<java.util.Vector: void <init>()>();

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.util.Vector jj_expentries> = $r7;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_kind> = -1;

        $r8 = new ORG.as220.tinySQL.parser.SimpleCharStream;

        specialinvoke $r8.<ORG.as220.tinySQL.parser.SimpleCharStream: void <init>(java.io.Reader,int,int)>(r1, 1, 1);

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.SimpleCharStream jj_input_stream> = $r8;

        $r9 = new ORG.as220.tinySQL.parser.TinySQLParserTokenManager;

        $r10 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.SimpleCharStream jj_input_stream>;

        specialinvoke $r9.<ORG.as220.tinySQL.parser.TinySQLParserTokenManager: void <init>(ORG.as220.tinySQL.parser.SimpleCharStream)>($r10);

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source> = $r9;

        $r11 = new ORG.as220.tinySQL.parser.Token;

        specialinvoke $r11.<ORG.as220.tinySQL.parser.Token: void <init>()>();

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token> = $r11;

        $r13 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token>;

        $r12 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source>;

        $r14 = virtualinvoke $r12.<ORG.as220.tinySQL.parser.TinySQLParserTokenManager: ORG.as220.tinySQL.parser.Token getNextToken()>();

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt> = $r14;

        $r13.<ORG.as220.tinySQL.parser.Token: ORG.as220.tinySQL.parser.Token next> = $r14;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen> = 0;

        i0 = 0;

        goto label2;

     label1:
        $r15 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $r15[i0] = -1;

        i0 = i0 + 1;

     label2:
        if i0 < 43 goto label1;

        return;
    }

    public void ReInit(java.io.Reader)
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        java.io.Reader r1;
        ORG.as220.tinySQL.parser.SimpleCharStream $r2, $r3;
        ORG.as220.tinySQL.parser.TinySQLParserTokenManager $r4, $r6;
        ORG.as220.tinySQL.parser.Token $r5, $r7, $r8;
        int[] $r9;
        int i0;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: java.io.Reader;

        $r2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.SimpleCharStream jj_input_stream>;

        virtualinvoke $r2.<ORG.as220.tinySQL.parser.SimpleCharStream: void ReInit(java.io.Reader,int,int)>(r1, 1, 1);

        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source>;

        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.SimpleCharStream jj_input_stream>;

        virtualinvoke $r4.<ORG.as220.tinySQL.parser.TinySQLParserTokenManager: void ReInit(ORG.as220.tinySQL.parser.SimpleCharStream)>($r3);

        $r5 = new ORG.as220.tinySQL.parser.Token;

        specialinvoke $r5.<ORG.as220.tinySQL.parser.Token: void <init>()>();

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token> = $r5;

        $r7 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token>;

        $r6 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source>;

        $r8 = virtualinvoke $r6.<ORG.as220.tinySQL.parser.TinySQLParserTokenManager: ORG.as220.tinySQL.parser.Token getNextToken()>();

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt> = $r8;

        $r7.<ORG.as220.tinySQL.parser.Token: ORG.as220.tinySQL.parser.Token next> = $r8;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen> = 0;

        i0 = 0;

        goto label2;

     label1:
        $r9 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $r9[i0] = -1;

        i0 = i0 + 1;

     label2:
        if i0 < 43 goto label1;

        return;
    }

    public void <init>(ORG.as220.tinySQL.parser.TinySQLParserTokenManager)
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.parser.TinySQLParserTokenManager r1, $r9;
        int[] $r2, $r3, $r4, $r5, $r6, $r12;
        java.util.Vector $r7;
        ORG.as220.tinySQL.parser.Token $r8, $r10, $r11;
        int i0;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.parser.TinySQLParserTokenManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (int)[43];

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1> = $r2;

        $r3 = newarray (int)[43];

        $r3[0] = -520093696;

        $r3[1] = 131073;

        $r3[2] = 8388608;

        $r3[6] = 8388608;

        $r3[7] = 1310976;

        $r3[8] = 4096;

        $r3[9] = 1310976;

        $r3[10] = 33554432;

        $r3[14] = 4194304;

        $r3[15] = 1310976;

        $r3[16] = 4194304;

        $r3[17] = 4096;

        $r3[19] = 4096;

        $r3[20] = 262144;

        $r3[21] = 262144;

        $r3[22] = 4096;

        $r3[23] = 4096;

        $r3[24] = 4096;

        $r3[25] = 4096;

        $r3[28] = 4096;

        $r3[33] = 4096;

        $r3[36] = 2097152;

        $r3[37] = 1073741824;

        $r3[38] = 268435456;

        $r3[39] = 268435456;

        $r3[40] = 268435456;

        $r3[42] = 4096;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_0> = $r3;

        $r4 = newarray (int)[43];

        $r4[0] = 1114372;

        $r4[2] = 2;

        $r4[3] = 32;

        $r4[4] = 4194304;

        $r4[5] = 16384;

        $r4[6] = 2;

        $r4[7] = 4096;

        $r4[9] = 4096;

        $r4[14] = 8192;

        $r4[15] = 4096;

        $r4[16] = 8192;

        $r4[18] = 4194304;

        $r4[20] = 196608;

        $r4[21] = 131072;

        $r4[26] = 4194304;

        $r4[27] = 128;

        $r4[29] = -8388608;

        $r4[30] = 6144;

        $r4[31] = 6144;

        $r4[32] = 1375731712;

        $r4[34] = -1392508928;

        $r4[35] = 8388608;

        $r4[36] = 32772;

        $r4[37] = 262144;

        $r4[41] = 524288;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_1> = $r4;

        $r5 = newarray (int)[43];

        $r5[7] = -134184960;

        $r5[9] = -134184960;

        $r5[11] = 402653184;

        $r5[12] = -1073709056;

        $r5[13] = 939524096;

        $r5[14] = 134209536;

        $r5[15] = 939524096;

        $r5[16] = 134209536;

        $r5[29] = 8191;

        $r5[34] = 1551;

        $r5[35] = 6640;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_2> = $r5;

        $r6 = newarray (int)[43];

        $r6[7] = 161;

        $r6[9] = 161;

        $r6[15] = 161;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_3> = $r6;

        $r7 = new java.util.Vector;

        specialinvoke $r7.<java.util.Vector: void <init>()>();

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.util.Vector jj_expentries> = $r7;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_kind> = -1;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source> = r1;

        $r8 = new ORG.as220.tinySQL.parser.Token;

        specialinvoke $r8.<ORG.as220.tinySQL.parser.Token: void <init>()>();

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token> = $r8;

        $r10 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token>;

        $r9 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source>;

        $r11 = virtualinvoke $r9.<ORG.as220.tinySQL.parser.TinySQLParserTokenManager: ORG.as220.tinySQL.parser.Token getNextToken()>();

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt> = $r11;

        $r10.<ORG.as220.tinySQL.parser.Token: ORG.as220.tinySQL.parser.Token next> = $r11;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen> = 0;

        i0 = 0;

        goto label2;

     label1:
        $r12 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $r12[i0] = -1;

        i0 = i0 + 1;

     label2:
        if i0 < 43 goto label1;

        return;
    }

    public void ReInit(ORG.as220.tinySQL.parser.TinySQLParserTokenManager)
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.parser.TinySQLParserTokenManager r1, $r3;
        ORG.as220.tinySQL.parser.Token $r2, $r4, $r5;
        int[] $r6;
        int i0;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        r1 := @parameter0: ORG.as220.tinySQL.parser.TinySQLParserTokenManager;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source> = r1;

        $r2 = new ORG.as220.tinySQL.parser.Token;

        specialinvoke $r2.<ORG.as220.tinySQL.parser.Token: void <init>()>();

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token> = $r2;

        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token>;

        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source>;

        $r5 = virtualinvoke $r3.<ORG.as220.tinySQL.parser.TinySQLParserTokenManager: ORG.as220.tinySQL.parser.Token getNextToken()>();

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt> = $r5;

        $r4.<ORG.as220.tinySQL.parser.Token: ORG.as220.tinySQL.parser.Token next> = $r5;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen> = 0;

        i0 = 0;

        goto label2;

     label1:
        $r6 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $r6[i0] = -1;

        i0 = i0 + 1;

     label2:
        if i0 < 43 goto label1;

        return;
    }

    private final ORG.as220.tinySQL.parser.Token jj_consume_token(int) throws ORG.as220.tinySQL.parser.ParseException
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        int i0, $i1, $i2, $i3;
        ORG.as220.tinySQL.parser.Token r1, $r2, $r3, $r5, $r6, $r7, $r8, $r10, $r11, $r12;
        ORG.as220.tinySQL.parser.TinySQLParserTokenManager $r4;
        ORG.as220.tinySQL.parser.ParseException $r9;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        i0 := @parameter0: int;

        r1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token>;

        $r2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token> = $r2;

        $r3 = $r2.<ORG.as220.tinySQL.parser.Token: ORG.as220.tinySQL.parser.Token next>;

        if $r3 == null goto label1;

        $r11 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $r12 = $r11.<ORG.as220.tinySQL.parser.Token: ORG.as220.tinySQL.parser.Token next>;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt> = $r12;

        goto label2;

     label1:
        $r5 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source>;

        $r6 = virtualinvoke $r4.<ORG.as220.tinySQL.parser.TinySQLParserTokenManager: ORG.as220.tinySQL.parser.Token getNextToken()>();

        $r5.<ORG.as220.tinySQL.parser.Token: ORG.as220.tinySQL.parser.Token next> = $r6;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt> = $r6;

     label2:
        $r7 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token>;

        $i1 = $r7.<ORG.as220.tinySQL.parser.Token: int kind>;

        if $i1 != i0 goto label3;

        $i2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $i3 = $i2 + 1;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen> = $i3;

        $r10 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token>;

        return $r10;

     label3:
        $r8 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token>;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt> = $r8;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token> = r1;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_kind> = i0;

        $r9 = virtualinvoke r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.ParseException generateParseException()>();

        throw $r9;
    }

    public final ORG.as220.tinySQL.parser.Token getNextToken()
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        ORG.as220.tinySQL.parser.Token $r1, $r2, $r4, $r5, $r6, $r7, $r8;
        ORG.as220.tinySQL.parser.TinySQLParserTokenManager $r3;
        int $i0, $i1;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        $r1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token> = $r1;

        $r2 = $r1.<ORG.as220.tinySQL.parser.Token: ORG.as220.tinySQL.parser.Token next>;

        if $r2 == null goto label1;

        $r7 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $r8 = $r7.<ORG.as220.tinySQL.parser.Token: ORG.as220.tinySQL.parser.Token next>;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt> = $r8;

        goto label2;

     label1:
        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt>;

        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source>;

        $r5 = virtualinvoke $r3.<ORG.as220.tinySQL.parser.TinySQLParserTokenManager: ORG.as220.tinySQL.parser.Token getNextToken()>();

        $r4.<ORG.as220.tinySQL.parser.Token: ORG.as220.tinySQL.parser.Token next> = $r5;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token jj_nt> = $r5;

     label2:
        $i0 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        $i1 = $i0 + 1;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen> = $i1;

        $r6 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token>;

        return $r6;
    }

    public final ORG.as220.tinySQL.parser.Token getToken(int)
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        int i0, i1;
        ORG.as220.tinySQL.parser.Token $r1, $r3, r4;
        ORG.as220.tinySQL.parser.TinySQLParserTokenManager $r2;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        i0 := @parameter0: int;

        r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token>;

        i1 = 0;

        goto label4;

     label1:
        $r1 = r4.<ORG.as220.tinySQL.parser.Token: ORG.as220.tinySQL.parser.Token next>;

        if $r1 == null goto label2;

        r4 = r4.<ORG.as220.tinySQL.parser.Token: ORG.as220.tinySQL.parser.Token next>;

        goto label3;

     label2:
        $r2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.TinySQLParserTokenManager token_source>;

        $r3 = virtualinvoke $r2.<ORG.as220.tinySQL.parser.TinySQLParserTokenManager: ORG.as220.tinySQL.parser.Token getNextToken()>();

        r4.<ORG.as220.tinySQL.parser.Token: ORG.as220.tinySQL.parser.Token next> = $r3;

        r4 = $r3;

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label1;

        return r4;
    }

    public final ORG.as220.tinySQL.parser.ParseException generateParseException()
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;
        boolean[] r1;
        java.util.Vector $r2, $r11, $r12, $r13, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25;
        int[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r16;
        boolean $z0;
        java.lang.Object $r15;
        ORG.as220.tinySQL.parser.ParseException $r17;
        java.lang.String[] $r18;
        ORG.as220.tinySQL.parser.Token $r19;
        int[][] r20;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        $r2 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.util.Vector jj_expentries>;

        virtualinvoke $r2.<java.util.Vector: void removeAllElements()>();

        r1 = newarray (boolean)[104];

        i21 = 0;

        goto label02;

     label01:
        r1[i21] = 0;

        i21 = i21 + 1;

     label02:
        if i21 < 104 goto label01;

        $i0 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_kind>;

        if $i0 < 0 goto label03;

        $i20 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_kind>;

        r1[$i20] = 1;

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_kind> = -1;

     label03:
        i22 = 0;

        goto label12;

     label04:
        $r3 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1>;

        $i2 = $r3[i22];

        $i1 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int jj_gen>;

        if $i2 != $i1 goto label11;

        i23 = 0;

        goto label10;

     label05:
        $r4 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_0>;

        $i4 = $r4[i22];

        $i3 = 1 << i23;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label06;

        r1[i23] = 1;

     label06:
        $r5 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_1>;

        $i7 = $r5[i22];

        $i6 = 1 << i23;

        $i8 = $i7 & $i6;

        if $i8 == 0 goto label07;

        $i17 = 32 + i23;

        r1[$i17] = 1;

     label07:
        $r6 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_2>;

        $i10 = $r6[i22];

        $i9 = 1 << i23;

        $i11 = $i10 & $i9;

        if $i11 == 0 goto label08;

        $i16 = 64 + i23;

        r1[$i16] = 1;

     label08:
        $r7 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_la1_3>;

        $i13 = $r7[i22];

        $i12 = 1 << i23;

        $i14 = $i13 & $i12;

        if $i14 == 0 goto label09;

        $i15 = 96 + i23;

        r1[$i15] = 1;

     label09:
        i23 = i23 + 1;

     label10:
        if i23 < 32 goto label05;

     label11:
        i22 = i22 + 1;

     label12:
        if i22 < 43 goto label04;

        i24 = 0;

        goto label15;

     label13:
        $z0 = r1[i24];

        if $z0 == 0 goto label14;

        $r8 = newarray (int)[1];

        r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_expentry> = $r8;

        $r9 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_expentry>;

        $r9[0] = i24;

        $r11 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.util.Vector jj_expentries>;

        $r10 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: int[] jj_expentry>;

        virtualinvoke $r11.<java.util.Vector: void addElement(java.lang.Object)>($r10);

     label14:
        i24 = i24 + 1;

     label15:
        if i24 < 104 goto label13;

        $r12 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.util.Vector jj_expentries>;

        $i18 = virtualinvoke $r12.<java.util.Vector: int size()>();

        r20 = newarray (int[])[$i18];

        i25 = 0;

        goto label17;

     label16:
        $r14 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.util.Vector jj_expentries>;

        $r15 = virtualinvoke $r14.<java.util.Vector: java.lang.Object elementAt(int)>(i25);

        $r16 = (int[]) $r15;

        r20[i25] = $r16;

        i25 = i25 + 1;

     label17:
        $r13 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: java.util.Vector jj_expentries>;

        $i19 = virtualinvoke $r13.<java.util.Vector: int size()>();

        if i25 < $i19 goto label16;

        $r17 = new ORG.as220.tinySQL.parser.ParseException;

        $r19 = r0.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.parser.Token token>;

        $r18 = <ORG.as220.tinySQL.parser.TinySQLParser: java.lang.String[] tokenImage>;

        specialinvoke $r17.<ORG.as220.tinySQL.parser.ParseException: void <init>(ORG.as220.tinySQL.parser.Token,int[][],java.lang.String[])>($r19, r20, $r18);

        return $r17;
    }

    public final void enable_tracing()
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        return;
    }

    public final void disable_tracing()
    {
        ORG.as220.tinySQL.parser.TinySQLParser r0;

        r0 := @this: ORG.as220.tinySQL.parser.TinySQLParser;

        return;
    }
}
