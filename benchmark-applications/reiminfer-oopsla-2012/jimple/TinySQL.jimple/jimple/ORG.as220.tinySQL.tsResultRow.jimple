public class ORG.as220.tinySQL.tsResultRow extends ORG.as220.tinySQL.tsRow
{
    private ORG.as220.tinySQL.tsRow prototype;
    private ORG.as220.tinySQL.tsRow row;
    private ORG.as220.tinySQL.tsColumn[] myColumns;
    private java.lang.Object[] cache;
    private int[] translationTable;
    private boolean[] evalStack;

    public void <init>(java.util.Vector)
    {
        ORG.as220.tinySQL.tsResultRow r0;
        java.util.Vector r1, $r4;
        ORG.as220.tinySQL.tsPhysicalRow $r3;

        r0 := @this: ORG.as220.tinySQL.tsResultRow;

        r1 := @parameter0: java.util.Vector;

        specialinvoke r0.<ORG.as220.tinySQL.tsRow: void <init>()>();

        $r3 = new ORG.as220.tinySQL.tsPhysicalRow;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        specialinvoke $r3.<ORG.as220.tinySQL.tsPhysicalRow: void <init>(java.util.Vector)>($r4);

        specialinvoke r0.<ORG.as220.tinySQL.tsResultRow: void init(java.util.Vector,ORG.as220.tinySQL.tsRow)>(r1, $r3);

        return;
    }

    public void <init>(java.util.Vector, ORG.as220.tinySQL.tsRow)
    {
        ORG.as220.tinySQL.tsResultRow r0;
        java.util.Vector r1;
        ORG.as220.tinySQL.tsRow r2;

        r0 := @this: ORG.as220.tinySQL.tsResultRow;

        r1 := @parameter0: java.util.Vector;

        r2 := @parameter1: ORG.as220.tinySQL.tsRow;

        specialinvoke r0.<ORG.as220.tinySQL.tsRow: void <init>()>();

        specialinvoke r0.<ORG.as220.tinySQL.tsResultRow: void init(java.util.Vector,ORG.as220.tinySQL.tsRow)>(r1, r2);

        return;
    }

    private void init(java.util.Vector, ORG.as220.tinySQL.tsRow)
    {
        ORG.as220.tinySQL.tsResultRow r0;
        java.util.Vector r1;
        ORG.as220.tinySQL.tsRow r2;
        int i0, $i1, i2;
        ORG.as220.tinySQL.tsColumn r3;
        ORG.as220.tinySQL.tsColumn[] $r4, $r7;
        int[] $r5, $r8;
        java.lang.Object $r6;
        java.lang.String $r9;
        java.lang.Object[] $r10;
        boolean[] $r11;

        r0 := @this: ORG.as220.tinySQL.tsResultRow;

        r1 := @parameter0: java.util.Vector;

        r2 := @parameter1: ORG.as220.tinySQL.tsRow;

        i0 = virtualinvoke r1.<java.util.Vector: int size()>();

        $r4 = newarray (ORG.as220.tinySQL.tsColumn)[i0];

        r0.<ORG.as220.tinySQL.tsResultRow: ORG.as220.tinySQL.tsColumn[] myColumns> = $r4;

        $r5 = newarray (int)[i0];

        r0.<ORG.as220.tinySQL.tsResultRow: int[] translationTable> = $r5;

        i2 = 0;

        goto label2;

     label1:
        $r6 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r3 = (ORG.as220.tinySQL.tsColumn) $r6;

        $r7 = r0.<ORG.as220.tinySQL.tsResultRow: ORG.as220.tinySQL.tsColumn[] myColumns>;

        $r7[i2] = r3;

        $r8 = r0.<ORG.as220.tinySQL.tsResultRow: int[] translationTable>;

        $r9 = virtualinvoke r3.<ORG.as220.tinySQL.tsColumn: java.lang.String getPhysicalName()>();

        $i1 = virtualinvoke r2.<ORG.as220.tinySQL.tsRow: int findColumn(java.lang.String)>($r9);

        $r8[i2] = $i1;

        i2 = i2 + 1;

     label2:
        if i2 < i0 goto label1;

        r0.<ORG.as220.tinySQL.tsResultRow: ORG.as220.tinySQL.tsRow prototype> = r2;

        $r10 = newarray (java.lang.Object)[i0];

        r0.<ORG.as220.tinySQL.tsResultRow: java.lang.Object[] cache> = $r10;

        $r11 = newarray (boolean)[i0];

        r0.<ORG.as220.tinySQL.tsResultRow: boolean[] evalStack> = $r11;

        r0.<ORG.as220.tinySQL.tsResultRow: ORG.as220.tinySQL.tsRow row> = r2;

        return;
    }

    public void <init>(ORG.as220.tinySQL.tsRow)
    {
        ORG.as220.tinySQL.tsResultRow r0;
        ORG.as220.tinySQL.tsRow r1;
        java.util.Vector $r3;
        int $i0, i1;
        ORG.as220.tinySQL.tsColumn $r4;

        r0 := @this: ORG.as220.tinySQL.tsResultRow;

        r1 := @parameter0: ORG.as220.tinySQL.tsRow;

        specialinvoke r0.<ORG.as220.tinySQL.tsRow: void <init>()>();

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        i1 = 0;

        goto label2;

     label1:
        $r4 = virtualinvoke r1.<ORG.as220.tinySQL.tsRow: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i1);

        virtualinvoke $r3.<java.util.Vector: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 1;

     label2:
        $i0 = virtualinvoke r1.<ORG.as220.tinySQL.tsRow: int size()>();

        if i1 < $i0 goto label1;

        specialinvoke r0.<ORG.as220.tinySQL.tsResultRow: void init(java.util.Vector,ORG.as220.tinySQL.tsRow)>($r3, r1);

        return;
    }

    public void <init>(ORG.as220.tinySQL.tsResultRow)
    {
        ORG.as220.tinySQL.tsResultRow r0, r1;
        int i0;
        ORG.as220.tinySQL.tsColumn[] $r2;
        int[] $r3;
        ORG.as220.tinySQL.tsRow $r4;
        java.lang.Object[] $r5;
        boolean[] $r6;

        r0 := @this: ORG.as220.tinySQL.tsResultRow;

        r1 := @parameter0: ORG.as220.tinySQL.tsResultRow;

        specialinvoke r0.<ORG.as220.tinySQL.tsRow: void <init>()>();

        i0 = virtualinvoke r1.<ORG.as220.tinySQL.tsResultRow: int size()>();

        $r2 = r1.<ORG.as220.tinySQL.tsResultRow: ORG.as220.tinySQL.tsColumn[] myColumns>;

        r0.<ORG.as220.tinySQL.tsResultRow: ORG.as220.tinySQL.tsColumn[] myColumns> = $r2;

        $r3 = r1.<ORG.as220.tinySQL.tsResultRow: int[] translationTable>;

        r0.<ORG.as220.tinySQL.tsResultRow: int[] translationTable> = $r3;

        $r4 = r1.<ORG.as220.tinySQL.tsResultRow: ORG.as220.tinySQL.tsRow prototype>;

        r0.<ORG.as220.tinySQL.tsResultRow: ORG.as220.tinySQL.tsRow prototype> = $r4;

        $r5 = newarray (java.lang.Object)[i0];

        r0.<ORG.as220.tinySQL.tsResultRow: java.lang.Object[] cache> = $r5;

        $r6 = newarray (boolean)[i0];

        r0.<ORG.as220.tinySQL.tsResultRow: boolean[] evalStack> = $r6;

        return;
    }

    public void setParent(ORG.as220.tinySQL.tsRow)
    {
        ORG.as220.tinySQL.tsResultRow r0;
        ORG.as220.tinySQL.tsRow r1;
        java.lang.NullPointerException $r2;

        r0 := @this: ORG.as220.tinySQL.tsResultRow;

        r1 := @parameter0: ORG.as220.tinySQL.tsRow;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Parent may not be null");

        throw $r2;

     label1:
        r0.<ORG.as220.tinySQL.tsResultRow: ORG.as220.tinySQL.tsRow row> = r1;

        return;
    }

    private final int lookup(int)
    {
        ORG.as220.tinySQL.tsResultRow r0;
        int i0, i1;
        int[] $r1;

        r0 := @this: ORG.as220.tinySQL.tsResultRow;

        i0 := @parameter0: int;

        $r1 = r0.<ORG.as220.tinySQL.tsResultRow: int[] translationTable>;

        i1 = $r1[i0];

        return i1;
    }

    public synchronized java.lang.Object get(int) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tsResultRow r0;
        int i0, i1;
        ORG.as220.tinySQL.tsColumn r1;
        ORG.as220.tinySQL.sqlparser.LValue r2;
        boolean[] $r3, $r4, $r11;
        boolean $z0;
        java.lang.Object[] $r5, $r6;
        ORG.as220.tinySQL.tinySQLException $r7;
        ORG.as220.tinySQL.tsRow $r8;
        java.lang.Object $r9, r10;

        r0 := @this: ORG.as220.tinySQL.tsResultRow;

        i0 := @parameter0: int;

        i1 = specialinvoke r0.<ORG.as220.tinySQL.tsResultRow: int lookup(int)>(i0);

        if i1 == -1 goto label1;

        $r8 = r0.<ORG.as220.tinySQL.tsResultRow: ORG.as220.tinySQL.tsRow row>;

        $r9 = virtualinvoke $r8.<ORG.as220.tinySQL.tsRow: java.lang.Object get(int)>(i1);

        return $r9;

     label1:
        $r3 = r0.<ORG.as220.tinySQL.tsResultRow: boolean[] evalStack>;

        $z0 = $r3[i0];

        if $z0 == 0 goto label2;

        staticinvoke <ORG.as220.tinySQL.util.Log: void warn(java.lang.String)>("Self-Referenced column detected, returning null");

        $r7 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r7.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Self-Referenced column detected");

        throw $r7;

     label2:
        $r4 = r0.<ORG.as220.tinySQL.tsResultRow: boolean[] evalStack>;

        $r4[i0] = 1;

        $r5 = r0.<ORG.as220.tinySQL.tsResultRow: java.lang.Object[] cache>;

        r10 = $r5[i0];

        if r10 != null goto label3;

        r1 = virtualinvoke r0.<ORG.as220.tinySQL.tsResultRow: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i0);

        r2 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.sqlparser.LValue getExpression()>();

        if r2 == null goto label3;

        r10 = interfaceinvoke r2.<ORG.as220.tinySQL.sqlparser.LValue: java.lang.Object evaluate(ORG.as220.tinySQL.tsRow)>(r0);

        $r6 = r0.<ORG.as220.tinySQL.tsResultRow: java.lang.Object[] cache>;

        $r6[i0] = r10;

     label3:
        $r11 = r0.<ORG.as220.tinySQL.tsResultRow: boolean[] evalStack>;

        $r11[i0] = 0;

        return r10;
    }

    public ORG.as220.tinySQL.tsColumn getColumnDefinition(int)
    {
        ORG.as220.tinySQL.tsResultRow r0;
        int i0;
        ORG.as220.tinySQL.tsColumn[] $r1;
        ORG.as220.tinySQL.tsColumn $r2;

        r0 := @this: ORG.as220.tinySQL.tsResultRow;

        i0 := @parameter0: int;

        $r1 = r0.<ORG.as220.tinySQL.tsResultRow: ORG.as220.tinySQL.tsColumn[] myColumns>;

        $r2 = $r1[i0];

        return $r2;
    }

    public int size()
    {
        ORG.as220.tinySQL.tsResultRow r0;
        ORG.as220.tinySQL.tsColumn[] $r1;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tsResultRow;

        $r1 = r0.<ORG.as220.tinySQL.tsResultRow: ORG.as220.tinySQL.tsColumn[] myColumns>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public void refresh() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tsResultRow r0;
        java.lang.Object[] $r1;
        ORG.as220.tinySQL.tsRow $r2;

        r0 := @this: ORG.as220.tinySQL.tsResultRow;

        $r1 = r0.<ORG.as220.tinySQL.tsResultRow: java.lang.Object[] cache>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r1, null);

        $r2 = r0.<ORG.as220.tinySQL.tsResultRow: ORG.as220.tinySQL.tsRow row>;

        virtualinvoke $r2.<ORG.as220.tinySQL.tsRow: void refresh()>();

        return;
    }

    public java.lang.String toString()
    {
        ORG.as220.tinySQL.tsResultRow r0;
        ORG.as220.tinySQL.tsColumn r2;
        java.lang.StringBuffer $r4;
        java.lang.String $r6, $r12;
        java.lang.Object $r9;
        java.lang.Exception $r13;
        int i0, $i1;

        r0 := @this: ORG.as220.tinySQL.tsResultRow;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        i0 = 0;

        goto label7;

     label1:
        if i0 == 0 goto label2;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        r2 = virtualinvoke r0.<ORG.as220.tinySQL.tsResultRow: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r6 = virtualinvoke r2.<ORG.as220.tinySQL.tsColumn: java.lang.String getDisplayName()>();

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

     label3:
        $r9 = virtualinvoke r0.<ORG.as220.tinySQL.tsResultRow: java.lang.Object get(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<!EXCEPTION>");

     label6:
        i0 = i0 + 1;

     label7:
        $i1 = virtualinvoke r0.<ORG.as220.tinySQL.tsResultRow: int size()>();

        if i0 < $i1 goto label1;

        $r12 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;

        catch java.lang.Exception from label3 to label4 with label5;
    }
}
