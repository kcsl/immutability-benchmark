public class ORG.as220.tinySQL.textFileTable extends ORG.as220.tinySQL.tinySQLTable
{
    private java.lang.String dataDir;
    private ORG.as220.tinySQL.textFileConverter converter;
    private java.util.Vector column_info;
    private java.io.RandomAccessFile ftbl;
    private static final int COLUMN_SIZE;
    private static final int COLUMN_TYPE;
    private static final int COLUMN_POS;
    private int _record_length;
    private int _rowCount;
    private java.lang.String encoding;
    private byte[] delpref;
    private byte[] delpost;
    private byte[] colpref;
    private byte[] colpost;
    private byte[] rowpref;
    private byte[] rowpost;
    private byte[] tablepref;
    private byte[] tablepost;
    private static final byte[] NOT_DELETED;
    private static final byte[] IS_DELETED;
    private java.lang.String defext;
    private java.lang.String tableext;
    private static final int ROW_UNREAD;
    private static final int ROW_DELETED;
    private static final int ROW_NOT_DELETED;
    private byte[] deletedRows;
    private ORG.as220.tinySQL.textFile databaseEngine;
    private int deleteMode;
    private int insertMode;
    private boolean readonly;
    private boolean ignoreFirst;
    private boolean ignoreLast;
    private ORG.as220.tinySQL.textFileRow prototype;
    private boolean compressTableCalled;

    static void <clinit>()
    {
        byte[] $r0, $r1;

        <ORG.as220.tinySQL.textFileTable: int ROW_NOT_DELETED> = 1;

        <ORG.as220.tinySQL.textFileTable: int ROW_DELETED> = -1;

        <ORG.as220.tinySQL.textFileTable: int ROW_UNREAD> = 0;

        <ORG.as220.tinySQL.textFileTable: int COLUMN_POS> = 2;

        <ORG.as220.tinySQL.textFileTable: int COLUMN_TYPE> = 1;

        <ORG.as220.tinySQL.textFileTable: int COLUMN_SIZE> = 0;

        $r0 = newarray (byte)[1];

        $r0[0] = 78;

        <ORG.as220.tinySQL.textFileTable: byte[] NOT_DELETED> = $r0;

        $r1 = newarray (byte)[1];

        $r1[0] = 89;

        <ORG.as220.tinySQL.textFileTable: byte[] IS_DELETED> = $r1;

        return;
    }

    public void <init>(java.lang.String, java.lang.String, ORG.as220.tinySQL.textFile) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileTable r0;
        java.lang.String r1, r2, $r5, $r6, $r7, $r18, $r19, $r22, $r24, $r28, $r29, $r32, $r34, $r41, $r45, $r48;
        ORG.as220.tinySQL.textFile r3;
        boolean $z0, $z1, $z2, $z3;
        byte[] $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        int $i0, $i1;
        java.io.RandomAccessFile $r16, $r26, $r37;
        java.lang.StringBuilder $r17, $r20, $r21, $r23, $r27, $r30, $r31, $r33, $r40, $r42, $r43, $r44, $r46, $r47;
        ORG.as220.tinySQL.textFileRow $r25;
        java.lang.Exception $r35, $r38;
        ORG.as220.tinySQL.tinySQLException $r36, $r39;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: ORG.as220.tinySQL.textFile;

        specialinvoke r0.<ORG.as220.tinySQL.tinySQLTable: void <init>(java.lang.String)>(r2);

        r0.<ORG.as220.tinySQL.textFileTable: int _rowCount> = -1;

        r0.<ORG.as220.tinySQL.textFileTable: boolean compressTableCalled> = 0;

        $r5 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: java.lang.String getEncoding()>();

        r0.<ORG.as220.tinySQL.textFileTable: java.lang.String encoding> = $r5;

        $z0 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: boolean isReadOnly()>();

        r0.<ORG.as220.tinySQL.textFileTable: boolean readonly> = $z0;

        r0.<ORG.as220.tinySQL.textFileTable: ORG.as220.tinySQL.textFile databaseEngine> = r3;

        $z1 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: boolean isIgnoringFirstColumnPrefix()>();

        r0.<ORG.as220.tinySQL.textFileTable: boolean ignoreFirst> = $z1;

        $z2 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: boolean isIgnoringLastColumnPostfix()>();

        r0.<ORG.as220.tinySQL.textFileTable: boolean ignoreLast> = $z2;

        $r6 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: java.lang.String getDefinitionExtension()>();

        r0.<ORG.as220.tinySQL.textFileTable: java.lang.String defext> = $r6;

        $r7 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: java.lang.String getTableExtension()>();

        r0.<ORG.as220.tinySQL.textFileTable: java.lang.String tableext> = $r7;

        r0.<ORG.as220.tinySQL.textFileTable: java.lang.String dataDir> = r1;

        $r8 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: byte[] getDelPrefix()>();

        r0.<ORG.as220.tinySQL.textFileTable: byte[] delpref> = $r8;

        $r9 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: byte[] getDelPostfix()>();

        r0.<ORG.as220.tinySQL.textFileTable: byte[] delpost> = $r9;

        $r10 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: byte[] getRowPrefix()>();

        r0.<ORG.as220.tinySQL.textFileTable: byte[] rowpref> = $r10;

        $r11 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: byte[] getRowPostfix()>();

        r0.<ORG.as220.tinySQL.textFileTable: byte[] rowpost> = $r11;

        $r12 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: byte[] getColumnPrefix()>();

        r0.<ORG.as220.tinySQL.textFileTable: byte[] colpref> = $r12;

        $r13 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: byte[] getColumnPostfix()>();

        r0.<ORG.as220.tinySQL.textFileTable: byte[] colpost> = $r13;

        $r14 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: byte[] getTablePrefix()>();

        r0.<ORG.as220.tinySQL.textFileTable: byte[] tablepref> = $r14;

        $r15 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: byte[] getTablePostfix()>();

        r0.<ORG.as220.tinySQL.textFileTable: byte[] tablepost> = $r15;

        $i0 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: int getInsertMode()>();

        r0.<ORG.as220.tinySQL.textFileTable: int insertMode> = $i0;

        $i1 = virtualinvoke r3.<ORG.as220.tinySQL.textFile: int getDeleteMode()>();

        r0.<ORG.as220.tinySQL.textFileTable: int deleteMode> = $i1;

     label01:
        $z3 = r0.<ORG.as220.tinySQL.textFileTable: boolean readonly>;

        if $z3 == 0 goto label02;

        $r26 = new java.io.RandomAccessFile;

        $r27 = new java.lang.StringBuilder;

        $r28 = r0.<ORG.as220.tinySQL.textFileTable: java.lang.String dataDir>;

        $r29 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r28);

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>($r29);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r32 = r0.<ORG.as220.tinySQL.textFileTable: java.lang.String tableext>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r34, "r");

        r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl> = $r26;

        goto label05;

     label02:
        $r16 = new java.io.RandomAccessFile;

        $r17 = new java.lang.StringBuilder;

        $r18 = r0.<ORG.as220.tinySQL.textFileTable: java.lang.String dataDir>;

        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r18);

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>($r19);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r22 = r0.<ORG.as220.tinySQL.textFileTable: java.lang.String tableext>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r24, "rw");

        r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl> = $r16;

     label03:
        goto label05;

     label04:
        $r38 := @caughtexception;

        $r39 = new ORG.as220.tinySQL.tinySQLException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not open the table ");

        $r41 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: java.lang.String getName()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r45 = r0.<ORG.as220.tinySQL.textFileTable: java.lang.String tableext>;

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>($r48);

        throw $r39;

     label05:
        virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: void readColumnInfo()>();

     label06:
        goto label12;

     label07:
        $r36 := @caughtexception;

     label08:
        $r37 = r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl>;

        virtualinvoke $r37.<java.io.RandomAccessFile: void close()>();

     label09:
        goto label11;

     label10:
        $r35 := @caughtexception;

     label11:
        throw $r36;

     label12:
        $r25 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: ORG.as220.tinySQL.textFileRow createInsertRowPrototype()>();

        r0.<ORG.as220.tinySQL.textFileTable: ORG.as220.tinySQL.textFileRow prototype> = $r25;

        return;

        catch java.lang.Exception from label01 to label03 with label04;
        catch ORG.as220.tinySQL.tinySQLException from label05 to label06 with label07;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    public void setRecordLength(int)
    {
        ORG.as220.tinySQL.textFileTable r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        i0 := @parameter0: int;

        r0.<ORG.as220.tinySQL.textFileTable: int _record_length> = i0;

        return;
    }

    public void setRowCount(int)
    {
        ORG.as220.tinySQL.textFileTable r0;
        int i0, $i1, $i2, $i3;
        byte[] r1, $r2, $r3, $r4;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        i0 := @parameter0: int;

        r0.<ORG.as220.tinySQL.textFileTable: int _rowCount> = i0;

        r1 = newarray (byte)[i0];

        $r2 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        if $r2 == null goto label1;

        $r4 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        $r3 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        $i2 = lengthof $r3;

        $i1 = lengthof r1;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i3);

     label1:
        r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows> = r1;

        return;
    }

    public ORG.as220.tinySQL.tinySQLConverter getConverter() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileTable r0;
        ORG.as220.tinySQL.textFileConverter $r2, $r3, $r4;
        ORG.as220.tinySQL.textFile $r5;
        java.lang.String $r6;
        ORG.as220.tinySQL.textFileQuoting $r7;
        java.lang.Exception $r8;
        ORG.as220.tinySQL.tinySQLException $r9;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        $r2 = r0.<ORG.as220.tinySQL.textFileTable: ORG.as220.tinySQL.textFileConverter converter>;

        if $r2 != null goto label4;

     label1:
        $r4 = new ORG.as220.tinySQL.textFileConverter;

        $r6 = r0.<ORG.as220.tinySQL.textFileTable: java.lang.String encoding>;

        $r5 = r0.<ORG.as220.tinySQL.textFileTable: ORG.as220.tinySQL.textFile databaseEngine>;

        $r7 = virtualinvoke $r5.<ORG.as220.tinySQL.textFile: ORG.as220.tinySQL.textFileQuoting getQuoting()>();

        specialinvoke $r4.<ORG.as220.tinySQL.textFileConverter: void <init>(java.lang.String,ORG.as220.tinySQL.textFileQuoting)>($r6, $r7);

        r0.<ORG.as220.tinySQL.textFileTable: ORG.as220.tinySQL.textFileConverter converter> = $r4;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r9.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r8);

        throw $r9;

     label4:
        $r3 = r0.<ORG.as220.tinySQL.textFileTable: ORG.as220.tinySQL.textFileConverter converter>;

        return $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean close() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileTable r0;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        ORG.as220.tinySQL.textFile $r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r7, $r9, $r11, $r13, $r24, $r26;
        java.lang.String $r3, $r6, $r8, $r10, $r12, $r14, $r25, $r27;
        java.lang.Object $r15;
        java.io.IOException $r16;
        ORG.as220.tinySQL.tinySQLException $r17;
        java.sql.SQLException $r18;
        java.util.Enumeration r19;
        ORG.as220.tinySQL.tinySQLTableView r20;
        ORG.as220.tinySQL.tinySQLConnection r21;
        java.sql.Statement r22;
        java.io.RandomAccessFile $r28;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        $z0 = r0.<ORG.as220.tinySQL.textFileTable: boolean compressTableCalled>;

        if $z0 != 0 goto label03;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("About to close table ");

        $r12 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void info(java.lang.String)>($r14);

        r19 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: java.util.Enumeration getViews()>();

        goto label02;

     label01:
        $r15 = interfaceinvoke r19.<java.util.Enumeration: java.lang.Object nextElement()>();

        r20 = (ORG.as220.tinySQL.tinySQLTableView) $r15;

        virtualinvoke r20.<ORG.as220.tinySQL.tinySQLTableView: void close()>();

     label02:
        $z2 = interfaceinvoke r19.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 != 0 goto label01;

     label03:
        $i0 = r0.<ORG.as220.tinySQL.textFileTable: int deleteMode>;

        if $i0 != 2 goto label08;

        $z1 = r0.<ORG.as220.tinySQL.textFileTable: boolean compressTableCalled>;

        if $z1 != 0 goto label08;

        r0.<ORG.as220.tinySQL.textFileTable: boolean compressTableCalled> = 1;

        $i1 = specialinvoke r0.<ORG.as220.tinySQL.textFileTable: int findDeletedRow()>();

        if $i1 == -1 goto label08;

        $r1 = r0.<ORG.as220.tinySQL.textFileTable: ORG.as220.tinySQL.textFile databaseEngine>;

        r21 = virtualinvoke $r1.<ORG.as220.tinySQL.textFile: ORG.as220.tinySQL.tinySQLConnection getConnection()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("COMPACT TABLE ");

        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" before close");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void info(java.lang.String)>($r6);

     label04:
        r22 = interfaceinvoke r21.<java.sql.Connection: java.sql.Statement createStatement()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("COMPACT TABLE ");

        $r8 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r22.<java.sql.Statement: int executeUpdate(java.lang.String)>($r10);

        interfaceinvoke r22.<java.sql.Statement: void close()>();

     label05:
        goto label07;

     label06:
        $r18 := @caughtexception;

     label07:
        return 0;

     label08:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Closing table ");

        $r25 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: java.lang.String getName()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void info(java.lang.String)>($r27);

     label09:
        $r28 = r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl>;

        virtualinvoke $r28.<java.io.RandomAccessFile: void close()>();

     label10:
        goto label12;

     label11:
        $r16 := @caughtexception;

        $r17 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r17.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r16);

        throw $r17;

     label12:
        return 1;

        catch java.sql.SQLException from label04 to label05 with label06;
        catch java.io.IOException from label09 to label10 with label11;
    }

    private int findDeletedRow()
    {
        ORG.as220.tinySQL.textFileTable r0;
        byte[] $r1, $r2;
        int $i0, i2;
        byte $b1;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        i2 = 0;

        goto label3;

     label1:
        $r2 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        $b1 = $r2[i2];

        if $b1 != -1 goto label2;

        return i2;

     label2:
        i2 = i2 + 1;

     label3:
        $r1 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        $i0 = lengthof $r1;

        if i2 < $i0 goto label1;

        return -1;
    }

    private int getNextInsertRow() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileTable r0;
        int i0, $i1, $i2, $i5, $i6, $i7, $i8, i9, $i10;
        boolean z0;
        java.lang.StringBuilder $r1, $r2, $r6, $r7;
        java.lang.String $r3, $r8;
        byte[] $r4, $r5, $r9;
        byte $b3, $b4;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        $i1 = r0.<ORG.as220.tinySQL.textFileTable: int insertMode>;

        if $i1 != 2 goto label1;

        $i8 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int getRowCount()>();

        return $i8;

     label1:
        i0 = specialinvoke r0.<ORG.as220.tinySQL.textFileTable: int findDeletedRow()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("FindDeletedRow returned : ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void debug(java.lang.String)>($r3);

        if i0 == -1 goto label2;

        return i0;

     label2:
        $i2 = r0.<ORG.as220.tinySQL.textFileTable: int insertMode>;

        if $i2 != 0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("RowCount: ");

        $i6 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int getRowCount()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void debug(java.lang.String)>($r8);

        $i7 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int getRowCount()>();

        return $i7;

     label3:
        i9 = 0;

        goto label7;

     label4:
        $r4 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        $b3 = $r4[i9];

        if $b3 != -1 goto label5;

        return i9;

     label5:
        $r5 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        $b4 = $r5[i9];

        if $b4 != 0 goto label6;

        z0 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: boolean isDeleted(int)>(i9);

        if z0 == 0 goto label6;

        return i9;

     label6:
        i9 = i9 + 1;

     label7:
        $r9 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        $i10 = lengthof $r9;

        if i9 < $i10 goto label4;

        $i5 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int getRowCount()>();

        return $i5;
    }

    public ORG.as220.tinySQL.tsColumn getColumnDefinition(int)
    {
        ORG.as220.tinySQL.textFileTable r0;
        int i0, $i1, $i2;
        java.util.Vector $r1, $r3;
        java.lang.Object $r2, $r4;
        ORG.as220.tinySQL.tsColumn r5;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        i0 := @parameter0: int;

        $i1 = r0.<ORG.as220.tinySQL.textFileTable: int deleteMode>;

        if $i1 != -1 goto label1;

        $r3 = r0.<ORG.as220.tinySQL.textFileTable: java.util.Vector column_info>;

        $i2 = i0 + 1;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object get(int)>($i2);

        r5 = (ORG.as220.tinySQL.tsColumn) $r4;

        goto label2;

     label1:
        $r1 = r0.<ORG.as220.tinySQL.textFileTable: java.util.Vector column_info>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(i0);

        r5 = (ORG.as220.tinySQL.tsColumn) $r2;

     label2:
        if r5 != null goto label3;

        return null;

     label3:
        return r5;
    }

    public ORG.as220.tinySQL.tsRawRow getInsertRow()
    {
        ORG.as220.tinySQL.textFileTable r0;
        ORG.as220.tinySQL.textFileRow $r2, $r3, $r4;
        byte[] $r5;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        $r2 = new ORG.as220.tinySQL.textFileRow;

        $r3 = r0.<ORG.as220.tinySQL.textFileTable: ORG.as220.tinySQL.textFileRow prototype>;

        specialinvoke $r2.<ORG.as220.tinySQL.textFileRow: void <init>(ORG.as220.tinySQL.textFileRow)>($r3);

        $r4 = r0.<ORG.as220.tinySQL.textFileTable: ORG.as220.tinySQL.textFileRow prototype>;

        $r5 = virtualinvoke $r4.<ORG.as220.tinySQL.textFileRow: byte[] getData()>();

        virtualinvoke $r2.<ORG.as220.tinySQL.textFileRow: void setData(byte[])>($r5);

        return $r2;
    }

    public ORG.as220.tinySQL.textFileRow createInsertRowPrototype() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileTable r0;
        byte[] r2, $r6, $r7, $r8, $r13, $r14, $r15, $r16;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7, $i8;
        ORG.as220.tinySQL.textFileRow $r3;
        java.util.Vector $r4;
        ORG.as220.tinySQL.tinySQLConverter $r5;
        boolean $z0, $z1;
        java.lang.StringBuilder $r9, $r11;
        java.io.PrintStream $r10;
        java.lang.String $r12;
        ORG.as220.tinySQL.tsColumn $r17;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        $r3 = new ORG.as220.tinySQL.textFileRow;

        $r4 = r0.<ORG.as220.tinySQL.textFileTable: java.util.Vector column_info>;

        $r5 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: ORG.as220.tinySQL.tinySQLConverter getConverter()>();

        specialinvoke $r3.<ORG.as220.tinySQL.textFileRow: void <init>(java.util.Vector,ORG.as220.tinySQL.tinySQLConverter)>($r4, $r5);

        $i1 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int getRecordLength()>();

        r2 = newarray (byte)[$i1];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r2, 32);

        $r6 = r0.<ORG.as220.tinySQL.textFileTable: byte[] rowpref>;

        i4 = specialinvoke r0.<ORG.as220.tinySQL.textFileTable: int setRawData(byte[],byte[],int)>($r6, r2, 0);

        $i2 = r0.<ORG.as220.tinySQL.textFileTable: int deleteMode>;

        if $i2 != -1 goto label1;

        $r14 = r0.<ORG.as220.tinySQL.textFileTable: byte[] delpref>;

        i5 = specialinvoke r0.<ORG.as220.tinySQL.textFileTable: int setRawData(byte[],byte[],int)>($r14, r2, i4);

        $r15 = <ORG.as220.tinySQL.textFileTable: byte[] NOT_DELETED>;

        i6 = specialinvoke r0.<ORG.as220.tinySQL.textFileTable: int setRawData(byte[],byte[],int)>($r15, r2, i5);

        $r16 = r0.<ORG.as220.tinySQL.textFileTable: byte[] delpost>;

        i4 = specialinvoke r0.<ORG.as220.tinySQL.textFileTable: int setRawData(byte[],byte[],int)>($r16, r2, i6);

     label1:
        i0 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int getColumnCount()>();

        i7 = 0;

        goto label7;

     label2:
        $z0 = r0.<ORG.as220.tinySQL.textFileTable: boolean ignoreFirst>;

        if $z0 == 0 goto label3;

        if i7 == 0 goto label4;

     label3:
        $r7 = r0.<ORG.as220.tinySQL.textFileTable: byte[] colpref>;

        i4 = specialinvoke r0.<ORG.as220.tinySQL.textFileTable: int setRawData(byte[],byte[],int)>($r7, r2, i4);

     label4:
        $r17 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i7);

        $i8 = virtualinvoke $r17.<ORG.as220.tinySQL.tsColumn: int getSize()>();

        i4 = i4 + $i8;

        $z1 = r0.<ORG.as220.tinySQL.textFileTable: boolean ignoreLast>;

        if $z1 == 0 goto label5;

        $i3 = i0 - 1;

        if i7 == $i3 goto label6;

     label5:
        $r8 = r0.<ORG.as220.tinySQL.textFileTable: byte[] colpost>;

        i4 = specialinvoke r0.<ORG.as220.tinySQL.textFileTable: int setRawData(byte[],byte[],int)>($r8, r2, i4);

     label6:
        i7 = i7 + 1;

     label7:
        if i7 < i0 goto label2;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("___");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r13 = r0.<ORG.as220.tinySQL.textFileTable: byte[] rowpost>;

        specialinvoke r0.<ORG.as220.tinySQL.textFileTable: int setRawData(byte[],byte[],int)>($r13, r2, i4);

        virtualinvoke $r3.<ORG.as220.tinySQL.textFileRow: void setData(byte[])>(r2);

        return $r3;
    }

    private int setRawData(byte[], byte[], int)
    {
        ORG.as220.tinySQL.textFileTable r0;
        byte[] r1, r2;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        $i1 = lengthof r1;

        if $i1 != 0 goto label1;

        return i0;

     label1:
        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, i0, $i2);

        $i3 = lengthof r1;

        $i4 = i0 + $i3;

        return $i4;
    }

    public synchronized void updateRow(int, ORG.as220.tinySQL.tsRawRow) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileTable r0;
        int i0, $i1;
        ORG.as220.tinySQL.tsRawRow r1;
        byte[] r2;
        boolean $z0, $z1;
        ORG.as220.tinySQL.tinySQLException $r3, $r6, $r8;
        java.io.RandomAccessFile $r4, $r5;
        long $l2;
        java.io.IOException $r7;
        ORG.as220.tinySQL.textFileRow r9;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        i0 := @parameter0: int;

        r1 := @parameter1: ORG.as220.tinySQL.tsRawRow;

        $z0 = r0.<ORG.as220.tinySQL.textFileTable: boolean readonly>;

        if $z0 == 0 goto label1;

        $r6 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r6.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Database is readonly");

        throw $r6;

     label1:
        $z1 = r1 instanceof ORG.as220.tinySQL.textFileRow;

        if $z1 == 0 goto label5;

     label2:
        r9 = (ORG.as220.tinySQL.textFileRow) r1;

        r2 = virtualinvoke r9.<ORG.as220.tinySQL.textFileRow: byte[] getData()>();

        $r4 = r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl>;

        $i1 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int calcRowPosition(int)>(i0);

        $l2 = (long) $i1;

        virtualinvoke $r4.<java.io.RandomAccessFile: void seek(long)>($l2);

        $r5 = r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl>;

        virtualinvoke $r5.<java.io.RandomAccessFile: void write(byte[])>(r2);

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        $r8 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r8.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r7);

        throw $r8;

     label5:
        $r3 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("updateRow expects a native data row");

        throw $r3;

     label6:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public int insertRow(ORG.as220.tinySQL.tsRawRow) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileTable r0;
        ORG.as220.tinySQL.tsRawRow r1;
        boolean $z0;
        java.io.RandomAccessFile $r3, $r9, $r10, $r13;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        int $i0, $i1, $i3, $i4, i5;
        java.lang.String $r8;
        long $l2;
        byte[] $r11, $r12;
        ORG.as220.tinySQL.tinySQLException $r14, $r16;
        java.lang.Exception $r15;
        java.lang.Throwable $r17;
        ORG.as220.tinySQL.textFileRow r18;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        r1 := @parameter0: ORG.as220.tinySQL.tsRawRow;

        $z0 = r0.<ORG.as220.tinySQL.textFileTable: boolean readonly>;

        if $z0 == 0 goto label1;

        $r14 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r14.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Database is readonly");

        throw $r14;

     label1:
        $r3 = r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl>;

        entermonitor $r3;

     label2:
        r18 = (ORG.as220.tinySQL.textFileRow) r1;

        i5 = specialinvoke r0.<ORG.as220.tinySQL.textFileTable: int getNextInsertRow()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Insering in row : ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int getRowCount()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void debug(java.lang.String)>($r8);

        $r9 = r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl>;

        $i1 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int calcRowPosition(int)>(i5);

        $l2 = (long) $i1;

        virtualinvoke $r9.<java.io.RandomAccessFile: void seek(long)>($l2);

        $r10 = r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl>;

        $r11 = virtualinvoke r18.<ORG.as220.tinySQL.textFileRow: byte[] getData()>();

        virtualinvoke $r10.<java.io.RandomAccessFile: void write(byte[])>($r11);

        $r13 = r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl>;

        $r12 = r0.<ORG.as220.tinySQL.textFileTable: byte[] tablepost>;

        virtualinvoke $r13.<java.io.RandomAccessFile: void write(byte[])>($r12);

        $i3 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int getRowCount()>();

        if i5 != $i3 goto label5;

        $i4 = i5 + 1;

        virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: void setRowCount(int)>($i4);

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;

        $r16 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r16.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r15);

        throw $r16;

     label5:
        exitmonitor $r3;

     label6:
        goto label9;

     label7:
        $r17 := @caughtexception;

        exitmonitor $r3;

     label8:
        throw $r17;

     label9:
        return i5;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int getRowCount()
    {
        ORG.as220.tinySQL.textFileTable r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        $i0 = r0.<ORG.as220.tinySQL.textFileTable: int _rowCount>;

        return $i0;
    }

    public int getColumnCount()
    {
        ORG.as220.tinySQL.textFileTable r0;
        int $i0, $i1, $i2, $i3;
        java.util.Vector $r1, $r2;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        $i0 = r0.<ORG.as220.tinySQL.textFileTable: int deleteMode>;

        if $i0 != -1 goto label1;

        $r2 = r0.<ORG.as220.tinySQL.textFileTable: java.util.Vector column_info>;

        $i2 = virtualinvoke $r2.<java.util.Vector: int size()>();

        $i3 = $i2 - 1;

        return $i3;

     label1:
        $r1 = r0.<ORG.as220.tinySQL.textFileTable: java.util.Vector column_info>;

        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        return $i1;
    }

    public ORG.as220.tinySQL.tsRawRow getRow(int) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileTable r0;
        int i0, $i1, $i2, $i4, $i5, $i6;
        byte[] r1, $r6, $r7, $r8;
        java.io.RandomAccessFile $r3, $r4, $r5;
        long $l3;
        boolean $z0;
        java.io.IOException $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.String $r17;
        ORG.as220.tinySQL.tinySQLException $r18;
        java.lang.Throwable $r19;
        ORG.as220.tinySQL.textFileRow $r21;
        java.util.Vector $r22;
        ORG.as220.tinySQL.tinySQLConverter $r23;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int getRecordLength()>();

        r1 = newarray (byte)[$i1];

        $r3 = r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl>;

        entermonitor $r3;

     label01:
        $r4 = r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl>;

        $i2 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int calcRowPosition(int)>(i0);

        $l3 = (long) $i2;

        virtualinvoke $r4.<java.io.RandomAccessFile: void seek(long)>($l3);

        $r5 = r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl>;

        virtualinvoke $r5.<java.io.RandomAccessFile: void readFully(byte[])>(r1);

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to read record[");

        $i5 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int calcRowPosition(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i6 = lengthof r1;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void error(java.lang.String,java.lang.Exception)>($r17, $r9);

        $r18 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r18.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r9);

        throw $r18;

     label04:
        exitmonitor $r3;

     label05:
        goto label08;

     label06:
        $r19 := @caughtexception;

        exitmonitor $r3;

     label07:
        throw $r19;

     label08:
        $i4 = lengthof r1;

        if $i4 <= 0 goto label10;

        $z0 = specialinvoke r0.<ORG.as220.tinySQL.textFileTable: boolean isDeleted(byte[],int)>(r1, i0);

        if $z0 == 0 goto label09;

        $r8 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        $r8[i0] = -1;

        goto label11;

     label09:
        $r7 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        $r7[i0] = 1;

        goto label11;

     label10:
        $r6 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        $r6[i0] = 1;

     label11:
        $r21 = new ORG.as220.tinySQL.textFileRow;

        $r22 = r0.<ORG.as220.tinySQL.textFileTable: java.util.Vector column_info>;

        $r23 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: ORG.as220.tinySQL.tinySQLConverter getConverter()>();

        specialinvoke $r21.<ORG.as220.tinySQL.textFileRow: void <init>(java.util.Vector,ORG.as220.tinySQL.tinySQLConverter)>($r22, $r23);

        virtualinvoke $r21.<ORG.as220.tinySQL.textFileRow: void setData(byte[])>(r1);

        return $r21;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    private java.lang.Object getColumn(int, java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileTable r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.String r1, r4;
        ORG.as220.tinySQL.tsColumn r2;
        ORG.as220.tinySQL.tinySQLConverter r5;
        java.util.Vector $r6;
        java.lang.Object $r7, $r8;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r6 = r0.<ORG.as220.tinySQL.textFileTable: java.util.Vector column_info>;

        $r7 = virtualinvoke $r6.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        r2 = (ORG.as220.tinySQL.tsColumn) $r7;

        $i3 = virtualinvoke r2.<ORG.as220.tinySQL.tsColumn: int getType()>();

        staticinvoke <ORG.as220.tinySQL.textFileTable: java.lang.String typeToLiteral(int)>($i3);

        i1 = virtualinvoke r2.<ORG.as220.tinySQL.tsColumn: int getSize()>();

        i2 = virtualinvoke r2.<ORG.as220.tinySQL.tsColumn: int getBytePosition()>();

        $i4 = i2 + i1;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i2, $i4);

        r5 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: ORG.as220.tinySQL.tinySQLConverter getConverter()>();

        $r8 = virtualinvoke r5.<ORG.as220.tinySQL.tinySQLConverter: java.lang.Object convertNativeToJDBC(ORG.as220.tinySQL.tsColumn,java.lang.Object)>(r2, r4);

        return $r8;
    }

    public void deleteRow(int) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileTable r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r19, $r20;
        java.lang.String $r7, $r21;
        byte[] $r8, $r11, $r12, $r13;
        java.io.RandomAccessFile $r9, $r10, $r14;
        long $l10;
        ORG.as220.tinySQL.tinySQLException $r15, $r16, $r17;
        java.io.IOException $r18;
        java.lang.Throwable $r22;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        i0 := @parameter0: int;

        $z0 = r0.<ORG.as220.tinySQL.textFileTable: boolean readonly>;

        if $z0 == 0 goto label01;

        $r17 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r17.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Database is readonly");

        throw $r17;

     label01:
        $i1 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int getRowCount()>();

        if i0 < $i1 goto label02;

        $r16 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r16.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("No such record");

        throw $r16;

     label02:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("DeleteMode : ");

        $i2 = r0.<ORG.as220.tinySQL.textFileTable: int deleteMode>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" DELETE ROW ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void debug(java.lang.String)>($r7);

        $i3 = r0.<ORG.as220.tinySQL.textFileTable: int deleteMode>;

        if $i3 != 1 goto label03;

        $r15 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r15.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Deletion of records has been disabled");

        throw $r15;

     label03:
        $r8 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        $r8[i0] = -1;

        $i4 = r0.<ORG.as220.tinySQL.textFileTable: int deleteMode>;

        if $i4 != -1 goto label11;

        $r9 = r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl>;

        entermonitor $r9;

     label04:
        $r10 = r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl>;

        $i5 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int calcRowPosition(int)>(i0);

        $r11 = r0.<ORG.as220.tinySQL.textFileTable: byte[] rowpref>;

        $i6 = lengthof $r11;

        $i8 = $i5 + $i6;

        $r12 = r0.<ORG.as220.tinySQL.textFileTable: byte[] delpref>;

        $i7 = lengthof $r12;

        $i9 = $i8 + $i7;

        $l10 = (long) $i9;

        virtualinvoke $r10.<java.io.RandomAccessFile: void seek(long)>($l10);

        $r14 = r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl>;

        $r13 = <ORG.as220.tinySQL.textFileTable: byte[] IS_DELETED>;

        virtualinvoke $r14.<java.io.RandomAccessFile: void write(byte[])>($r13);

     label05:
        goto label07;

     label06:
        $r18 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to read record: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void error(java.lang.String,java.lang.Exception)>($r21, $r18);

     label07:
        exitmonitor $r9;

     label08:
        goto label11;

     label09:
        $r22 := @caughtexception;

        exitmonitor $r9;

     label10:
        throw $r22;

     label11:
        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    protected int calcRowPosition(int)
    {
        ORG.as220.tinySQL.textFileTable r0;
        int i0, $i1, $i2, $i3, $i4;
        byte[] $r1;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: int getRecordLength()>();

        $i3 = i0 * $i1;

        $r1 = r0.<ORG.as220.tinySQL.textFileTable: byte[] tablepref>;

        $i2 = lengthof $r1;

        $i4 = $i3 + $i2;

        return $i4;
    }

    public boolean isDeleted(int) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileTable r0;
        int i0, $i1;
        byte[] $r1, $r2;
        byte $b2, $b3;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        i0 := @parameter0: int;

        $i1 = r0.<ORG.as220.tinySQL.textFileTable: int deleteMode>;

        if $i1 != 1 goto label1;

        return 0;

     label1:
        $r1 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        $b2 = $r1[i0];

        if $b2 != 0 goto label2;

        virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: ORG.as220.tinySQL.tsRawRow getRow(int)>(i0);

     label2:
        $r2 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        $b3 = $r2[i0];

        if $b3 != -1 goto label3;

        return 1;

     label3:
        return 0;
    }

    private boolean isDeleted(byte[], int)
    {
        ORG.as220.tinySQL.textFileTable r0;
        byte[] r1, $r2, $r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5;
        byte $b6, $b7, $b8;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = r0.<ORG.as220.tinySQL.textFileTable: int deleteMode>;

        if $i1 != 1 goto label1;

        return 0;

     label1:
        $i2 = r0.<ORG.as220.tinySQL.textFileTable: int deleteMode>;

        if $i2 != 2 goto label3;

        $r4 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        $b7 = $r4[i0];

        if $b7 != -1 goto label2;

        return 1;

     label2:
        $r5 = r0.<ORG.as220.tinySQL.textFileTable: byte[] deletedRows>;

        $b8 = $r5[i0];

        if $b8 != 1 goto label3;

        return 0;

     label3:
        $r2 = r0.<ORG.as220.tinySQL.textFileTable: byte[] rowpref>;

        $i4 = lengthof $r2;

        $r3 = r0.<ORG.as220.tinySQL.textFileTable: byte[] delpref>;

        $i3 = lengthof $r3;

        $i5 = $i4 + $i3;

        $b6 = r1[$i5];

        if $b6 != 89 goto label4;

        return 1;

     label4:
        return 0;
    }

    protected void readColumnInfo() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.textFileTable r0;
        java.lang.String r1, $r5, $r6, $r8, $r10, $r12, $r17, $r18, $r23, $r30, $r41;
        int i0, $i3, $i5, $i7, $i13, $i14, i15, i16, $i18, i19;
        java.util.Vector $r2;
        java.io.FileInputStream $r3, r34;
        java.lang.StringBuilder $r4, $r7, $r9, $r11, $r20, $r22, $r28, $r29, $r37, $r38, $r39, $r40;
        java.io.BufferedReader $r13;
        java.io.InputStreamReader $r14;
        java.io.StreamTokenizer $r15;
        byte[] $r16, $r19, $r25, $r26, $r31;
        boolean $z0, $z1, $z2, z3;
        java.io.PrintStream $r21;
        java.io.RandomAccessFile $r24;
        long $l4, $l6, $l8, $l9, $l11, $l12, l20;
        byte $b10, b17;
        ORG.as220.tinySQL.tinySQLException $r27, $r44;
        java.io.IOException $r32;
        java.lang.Exception $r33;
        double $d0;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        z3 = 0;

        r34 = null;

     label01:
        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<ORG.as220.tinySQL.textFileTable: java.util.Vector column_info> = $r2;

        $r3 = new java.io.FileInputStream;

        $r4 = new java.lang.StringBuilder;

        $r5 = r0.<ORG.as220.tinySQL.textFileTable: java.lang.String dataDir>;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r8 = virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = r0.<ORG.as220.tinySQL.textFileTable: java.lang.String defext>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.lang.String)>($r12);

        r34 = $r3;

        z3 = 1;

        $r13 = new java.io.BufferedReader;

        $r14 = new java.io.InputStreamReader;

        specialinvoke $r14.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r3);

        specialinvoke $r13.<java.io.BufferedReader: void <init>(java.io.Reader)>($r14);

        $r15 = new java.io.StreamTokenizer;

        specialinvoke $r15.<java.io.StreamTokenizer: void <init>(java.io.Reader)>($r13);

        virtualinvoke $r15.<java.io.StreamTokenizer: void whitespaceChars(int,int)>(124, 124);

        virtualinvoke $r15.<java.io.StreamTokenizer: void wordChars(int,int)>(48, 122);

        virtualinvoke $r15.<java.io.StreamTokenizer: void eolIsSignificant(boolean)>(0);

        virtualinvoke $r15.<java.io.StreamTokenizer: void parseNumbers()>();

        i15 = 0;

        $r16 = r0.<ORG.as220.tinySQL.textFileTable: byte[] rowpref>;

        i16 = lengthof $r16;

        goto label05;

     label02:
        b17 = 1;

        $r17 = $r15.<java.io.StreamTokenizer: java.lang.String sval>;

        $z0 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("NUMERIC");

        if $z0 == 0 goto label03;

        b17 = 2;

        goto label04;

     label03:
        $r18 = $r15.<java.io.StreamTokenizer: java.lang.String sval>;

        $z1 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("DATE");

        if $z1 == 0 goto label04;

        b17 = 91;

     label04:
        virtualinvoke $r15.<java.io.StreamTokenizer: int nextToken()>();

        r1 = $r15.<java.io.StreamTokenizer: java.lang.String sval>;

        virtualinvoke $r15.<java.io.StreamTokenizer: int nextToken()>();

        $d0 = $r15.<java.io.StreamTokenizer: double nval>;

        i0 = (int) $d0;

        i16 = specialinvoke r0.<ORG.as220.tinySQL.textFileTable: int addColumnDefinition(java.lang.String,int,int,int,int)>(r1, b17, i0, i16, i15);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>("RecordLength [");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i15);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void debug(java.lang.String)>($r41);

        i15 = i15 + 1;

     label05:
        $i18 = virtualinvoke $r15.<java.io.StreamTokenizer: int nextToken()>();

        if $i18 != -1 goto label02;

        virtualinvoke $r3.<java.io.FileInputStream: void close()>();

        z3 = 0;

        $r19 = r0.<ORG.as220.tinySQL.textFileTable: byte[] rowpost>;

        $i3 = lengthof $r19;

        i19 = i16 + $i3;

        $z2 = r0.<ORG.as220.tinySQL.textFileTable: boolean ignoreLast>;

        if $z2 == 0 goto label06;

        $r31 = r0.<ORG.as220.tinySQL.textFileTable: byte[] colpost>;

        $i14 = lengthof $r31;

        i19 = i19 - $i14;

     label06:
        $r21 = <java.lang.System: java.io.PrintStream out>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("RecordLength: ");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i19);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r23);

        virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: void setRecordLength(int)>(i19);

        $r24 = r0.<ORG.as220.tinySQL.textFileTable: java.io.RandomAccessFile ftbl>;

        $l4 = virtualinvoke $r24.<java.io.RandomAccessFile: long length()>();

        $r25 = r0.<ORG.as220.tinySQL.textFileTable: byte[] tablepref>;

        $i5 = lengthof $r25;

        $l6 = (long) $i5;

        $l9 = $l4 - $l6;

        $r26 = r0.<ORG.as220.tinySQL.textFileTable: byte[] tablepost>;

        $i7 = lengthof $r26;

        $l8 = (long) $i7;

        l20 = $l9 - $l8;

        $b10 = l20 cmp 0L;

        if $b10 >= 0 goto label07;

        $r27 = new ORG.as220.tinySQL.tinySQLException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("TableError negative data size: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l20);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>($r30);

        throw $r27;

     label07:
        $l11 = (long) i19;

        $l12 = l20 / $l11;

        $i13 = (int) $l12;

        virtualinvoke r0.<ORG.as220.tinySQL.textFileTable: void setRowCount(int)>($i13);

     label08:
        goto label14;

     label09:
        $r33 := @caughtexception;

     label10:
        if z3 == 0 goto label13;

        virtualinvoke r34.<java.io.FileInputStream: void close()>();

     label11:
        goto label13;

     label12:
        $r32 := @caughtexception;

     label13:
        $r44 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r44.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r33);

        throw $r44;

     label14:
        return;

        catch java.lang.Exception from label01 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label12;
    }

    private int addColumnDefinition(java.lang.String, int, int, int, int)
    {
        ORG.as220.tinySQL.textFileTable r0;
        java.lang.String r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, $i15, $i16, i17;
        ORG.as220.tinySQL.tsColumn $r2, $r4;
        byte[] $r3, $r5, $r7, $r8, $r12;
        boolean $z0, $z2;
        java.util.Vector $r6, $r11;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $i4 = r0.<ORG.as220.tinySQL.textFileTable: int deleteMode>;

        if $i4 != -1 goto label1;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("_DELETED");

        if $z2 == 0 goto label1;

        $r4 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r4.<ORG.as220.tinySQL.tsColumn: void <init>(ORG.as220.tinySQL.tinySQLTableView,java.lang.String)>(null, r1);

        $r5 = r0.<ORG.as220.tinySQL.textFileTable: byte[] delpref>;

        $i7 = lengthof $r5;

        $i8 = i2 + $i7;

        virtualinvoke $r4.<ORG.as220.tinySQL.tsColumn: void setBytePosition(int)>($i8);

        virtualinvoke $r4.<ORG.as220.tinySQL.tsColumn: void setType(int)>(i0);

        virtualinvoke $r4.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(i1);

        virtualinvoke $r4.<ORG.as220.tinySQL.tsColumn: void setTablePosition(int)>(i3);

        $r6 = r0.<ORG.as220.tinySQL.textFileTable: java.util.Vector column_info>;

        virtualinvoke $r6.<java.util.Vector: boolean add(java.lang.Object)>($r4);

        $i10 = i1 + i2;

        $r7 = r0.<ORG.as220.tinySQL.textFileTable: byte[] delpref>;

        $i9 = lengthof $r7;

        $i12 = $i10 + $i9;

        $r8 = r0.<ORG.as220.tinySQL.textFileTable: byte[] delpost>;

        $i11 = lengthof $r8;

        i13 = $i12 + $i11;

        return i13;

     label1:
        $r2 = new ORG.as220.tinySQL.tsColumn;

        specialinvoke $r2.<ORG.as220.tinySQL.tsColumn: void <init>(ORG.as220.tinySQL.tinySQLTableView,java.lang.String)>(null, r1);

        $r3 = r0.<ORG.as220.tinySQL.textFileTable: byte[] colpref>;

        $i5 = lengthof $r3;

        i14 = i2 + $i5;

        $z0 = r0.<ORG.as220.tinySQL.textFileTable: boolean ignoreFirst>;

        if $z0 == 0 goto label4;

        $i6 = r0.<ORG.as220.tinySQL.textFileTable: int deleteMode>;

        if $i6 != -1 goto label2;

        if i3 == 1 goto label3;

     label2:
        if i3 != 0 goto label4;

     label3:
        i14 = i2;

     label4:
        virtualinvoke $r2.<ORG.as220.tinySQL.tsColumn: void setBytePosition(int)>(i14);

        virtualinvoke $r2.<ORG.as220.tinySQL.tsColumn: void setType(int)>(i0);

        virtualinvoke $r2.<ORG.as220.tinySQL.tsColumn: void setSize(int)>(i1);

        virtualinvoke $r2.<ORG.as220.tinySQL.tsColumn: void setTablePosition(int)>(i3);

        $r11 = r0.<ORG.as220.tinySQL.textFileTable: java.util.Vector column_info>;

        virtualinvoke $r11.<java.util.Vector: boolean add(java.lang.Object)>($r2);

        $i15 = i1 + i14;

        $r12 = r0.<ORG.as220.tinySQL.textFileTable: byte[] colpost>;

        $i16 = lengthof $r12;

        i17 = $i15 + $i16;

        return i17;
    }

    protected static java.lang.String typeToLiteral(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        return "CHAR";

     label1:
        if i0 != 2 goto label2;

        return "NUMERIC";

     label2:
        if i0 != -7 goto label3;

        return "BOOLEAN";

     label3:
        if i0 != 4 goto label4;

        return "NUMERIC";

     label4:
        if i0 != -2 goto label5;

        return "BINARY";

     label5:
        if i0 != 91 goto label6;

        return "DATE";

     label6:
        return "CHAR";
    }

    public int getRecordLength()
    {
        ORG.as220.tinySQL.textFileTable r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.textFileTable;

        $i0 = r0.<ORG.as220.tinySQL.textFileTable: int _record_length>;

        return $i0;
    }
}
