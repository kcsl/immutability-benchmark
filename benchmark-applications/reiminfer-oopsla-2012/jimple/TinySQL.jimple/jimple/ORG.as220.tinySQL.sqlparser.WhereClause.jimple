public class ORG.as220.tinySQL.sqlparser.WhereClause extends java.lang.Object
{
    private ORG.as220.tinySQL.sqlparser.LValue expression;
    private java.util.Vector tableColumns;
    private ORG.as220.tinySQL.sqlparser.ConditionalStatement parent;
    private boolean lastReturnValue;
    private boolean evaluatedOnce;
    private java.lang.Object[] cache;
    private int[] cachePos;

    public void <init>(ORG.as220.tinySQL.sqlparser.ConditionalStatement)
    {
        ORG.as220.tinySQL.sqlparser.WhereClause r0;
        ORG.as220.tinySQL.sqlparser.ConditionalStatement r1;
        ORG.as220.tinySQL.sqlparser.StaticValue $r2;
        java.lang.Boolean $r3;
        java.util.Vector $r4;

        r0 := @this: ORG.as220.tinySQL.sqlparser.WhereClause;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.ConditionalStatement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new ORG.as220.tinySQL.sqlparser.StaticValue;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r2.<ORG.as220.tinySQL.sqlparser.StaticValue: void <init>(java.lang.Object)>($r3);

        r0.<ORG.as220.tinySQL.sqlparser.WhereClause: ORG.as220.tinySQL.sqlparser.LValue expression> = $r2;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.util.Vector tableColumns> = $r4;

        r0.<ORG.as220.tinySQL.sqlparser.WhereClause: ORG.as220.tinySQL.sqlparser.ConditionalStatement parent> = r1;

        return;
    }

    public void setExpression(ORG.as220.tinySQL.sqlparser.LValue) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.WhereClause r0;
        ORG.as220.tinySQL.sqlparser.LValue r1;
        java.util.Vector r2, $r5, $r6;
        ORG.as220.tinySQL.sqlparser.ConditionalStatement $r3;
        java.util.Enumeration $r4;
        java.lang.NullPointerException $r7;

        r0 := @this: ORG.as220.tinySQL.sqlparser.WhereClause;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.LValue;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>()>();

        throw $r7;

     label1:
        $r3 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: ORG.as220.tinySQL.sqlparser.ConditionalStatement parent>;

        $r4 = interfaceinvoke $r3.<ORG.as220.tinySQL.sqlparser.ConditionalStatement: java.util.Enumeration getTables()>();

        $r5 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.util.Vector buildVector(java.util.Enumeration)>($r4);

        r2 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.util.Vector resolveTableColumns(ORG.as220.tinySQL.sqlparser.LValue,java.util.Vector)>(r1, $r5);

        $r6 = new java.util.Vector;

        specialinvoke $r6.<java.util.Vector: void <init>(java.util.Collection)>(r2);

        r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.util.Vector tableColumns> = $r6;

        r0.<ORG.as220.tinySQL.sqlparser.WhereClause: ORG.as220.tinySQL.sqlparser.LValue expression> = r1;

        r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.lang.Object[] cache> = null;

        return;
    }

    public ORG.as220.tinySQL.sqlparser.LValue getExpression()
    {
        ORG.as220.tinySQL.sqlparser.WhereClause r0;
        ORG.as220.tinySQL.sqlparser.LValue $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.WhereClause;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: ORG.as220.tinySQL.sqlparser.LValue expression>;

        return $r1;
    }

    public boolean isMatch(ORG.as220.tinySQL.tsRow) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.WhereClause r0;
        ORG.as220.tinySQL.tsRow r1;
        java.lang.Object r2, $r5, $r18, $r22, r24;
        java.util.Vector $r3, $r12, $r14, $r17;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8;
        boolean $z0, $z1, $z2, $z3, z4;
        ORG.as220.tinySQL.sqlparser.LValue $r4;
        java.lang.Object[] $r6, $r7, $r9, $r10, $r11, $r13, $r16, $r21;
        int[] $r8, $r15, $r20;
        java.lang.String $r19;
        ORG.as220.tinySQL.tsColumn r23;
        java.lang.Boolean r25;

        r0 := @this: ORG.as220.tinySQL.sqlparser.WhereClause;

        r1 := @parameter0: ORG.as220.tinySQL.tsRow;

        z4 = 0;

        $r3 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.util.Vector tableColumns>;

        $i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if $i0 <= 0 goto label08;

        $r6 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.lang.Object[] cache>;

        if $r6 != null goto label03;

        $r12 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.util.Vector tableColumns>;

        $i1 = virtualinvoke $r12.<java.util.Vector: int size()>();

        $r13 = newarray (java.lang.Object)[$i1];

        r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.lang.Object[] cache> = $r13;

        $r14 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.util.Vector tableColumns>;

        $i2 = virtualinvoke $r14.<java.util.Vector: int size()>();

        $r15 = newarray (int)[$i2];

        r0.<ORG.as220.tinySQL.sqlparser.WhereClause: int[] cachePos> = $r15;

        $r16 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.lang.Object[] cache>;

        i3 = lengthof $r16;

        i4 = 0;

        goto label02;

     label01:
        $r17 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.util.Vector tableColumns>;

        $r18 = virtualinvoke $r17.<java.util.Vector: java.lang.Object elementAt(int)>(i4);

        r23 = (ORG.as220.tinySQL.tsColumn) $r18;

        $r19 = virtualinvoke r23.<ORG.as220.tinySQL.tsColumn: java.lang.String getPhysicalName()>();

        i5 = virtualinvoke r1.<ORG.as220.tinySQL.tsRow: int findColumn(java.lang.String)>($r19);

        $r20 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: int[] cachePos>;

        $r20[i4] = i5;

        $r21 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.lang.Object[] cache>;

        $r22 = virtualinvoke r1.<ORG.as220.tinySQL.tsRow: java.lang.Object get(int)>(i5);

        $r21[i4] = $r22;

        i4 = i4 + 1;

     label02:
        if i4 < i3 goto label01;

        z4 = 1;

        goto label09;

     label03:
        $r7 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.lang.Object[] cache>;

        i6 = lengthof $r7;

        i7 = 0;

        goto label07;

     label04:
        $r8 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: int[] cachePos>;

        i8 = $r8[i7];

        $r9 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.lang.Object[] cache>;

        r24 = $r9[i7];

        r2 = virtualinvoke r1.<ORG.as220.tinySQL.tsRow: java.lang.Object get(int)>(i8);

        if r2 == null goto label06;

        if r24 == null goto label05;

        if r2 == r24 goto label06;

        $z3 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r24);

        if $z3 != 0 goto label06;

        $r11 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.lang.Object[] cache>;

        $r11[i7] = r2;

        z4 = 1;

        goto label06;

     label05:
        $r10 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.lang.Object[] cache>;

        $r10[i7] = r2;

        z4 = 1;

     label06:
        i7 = i7 + 1;

     label07:
        if i7 < i6 goto label04;

        goto label09;

     label08:
        $z0 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: boolean evaluatedOnce>;

        if $z0 != 0 goto label09;

        z4 = 1;

     label09:
        if z4 == 0 goto label10;

        r0.<ORG.as220.tinySQL.sqlparser.WhereClause: boolean evaluatedOnce> = 1;

        $r4 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: ORG.as220.tinySQL.sqlparser.LValue expression>;

        $r5 = interfaceinvoke $r4.<ORG.as220.tinySQL.sqlparser.LValue: java.lang.Object evaluate(ORG.as220.tinySQL.tsRow)>(r1);

        r25 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.lang.Boolean convertToBoolean(java.lang.Object)>($r5);

        $z2 = virtualinvoke r25.<java.lang.Boolean: boolean booleanValue()>();

        r0.<ORG.as220.tinySQL.sqlparser.WhereClause: boolean lastReturnValue> = $z2;

     label10:
        $z1 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: boolean lastReturnValue>;

        return $z1;
    }

    public java.lang.String toString()
    {
        ORG.as220.tinySQL.sqlparser.WhereClause r0;
        java.lang.StringBuilder $r1, $r4;
        ORG.as220.tinySQL.sqlparser.LValue $r2;
        java.lang.String $r3, $r5;

        r0 := @this: ORG.as220.tinySQL.sqlparser.WhereClause;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("WHERE ");

        $r2 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: ORG.as220.tinySQL.sqlparser.LValue expression>;

        $r3 = interfaceinvoke $r2.<ORG.as220.tinySQL.sqlparser.LValue: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public java.util.Vector getColumns()
    {
        ORG.as220.tinySQL.sqlparser.WhereClause r0;
        java.util.Vector $r1, $r2;

        r0 := @this: ORG.as220.tinySQL.sqlparser.WhereClause;

        $r1 = new java.util.Vector;

        $r2 = r0.<ORG.as220.tinySQL.sqlparser.WhereClause: java.util.Vector tableColumns>;

        specialinvoke $r1.<java.util.Vector: void <init>(java.util.Collection)>($r2);

        return $r1;
    }

    public java.util.Vector getParameters()
    {
        ORG.as220.tinySQL.sqlparser.WhereClause r0;
        java.util.Vector $r2;
        ORG.as220.tinySQL.sqlparser.LValue $r3;

        r0 := @this: ORG.as220.tinySQL.sqlparser.WhereClause;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.WhereClause: ORG.as220.tinySQL.sqlparser.LValue getExpression()>();

        staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: void getParameterElements(java.util.Vector,ORG.as220.tinySQL.sqlparser.LValue)>($r2, $r3);

        return $r2;
    }
}
