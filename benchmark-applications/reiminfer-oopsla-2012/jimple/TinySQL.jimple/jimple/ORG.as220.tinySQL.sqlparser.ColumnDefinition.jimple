public class ORG.as220.tinySQL.sqlparser.ColumnDefinition extends java.lang.Object
{
    private java.lang.String name;
    private int type;
    private int size;
    private int decimals;
    private boolean nullable;

    public void <init>(java.lang.String)
    {
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r0;
        java.lang.String r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: java.lang.String name> = r1;

        return;
    }

    public java.lang.String getName()
    {
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r0;
        java.lang.String $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: java.lang.String name>;

        return $r1;
    }

    public void setType(int)
    {
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r0;
        int i0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        i0 := @parameter0: int;

        r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int type> = i0;

        return;
    }

    public int getType()
    {
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        $i0 = r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int type>;

        return $i0;
    }

    public void setSize(int) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r0;
        int i0;
        ORG.as220.tinySQL.tinySQLException $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r1 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r1.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Size must be > 0");

        throw $r1;

     label1:
        r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int size> = i0;

        r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int decimals> = 0;

        return;
    }

    public void setSize(int, int) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r0;
        int i0, i1;
        ORG.as220.tinySQL.tinySQLException $r1, $r2;

        r0 := @this: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 > i1 goto label1;

        $r2 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r2.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Decimals may not be greater or equal to size");

        throw $r2;

     label1:
        if i0 > 0 goto label2;

        $r1 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r1.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Size must be > 0");

        throw $r1;

     label2:
        r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int size> = i0;

        r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int decimals> = i1;

        return;
    }

    public int getSize()
    {
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        $i0 = r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int size>;

        return $i0;
    }

    public int getDecimals()
    {
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r0;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        $i0 = r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int decimals>;

        return $i0;
    }

    public void setNullable(boolean)
    {
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r0;
        boolean z0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        z0 := @parameter0: boolean;

        r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: boolean nullable> = z0;

        return;
    }

    public boolean isNullable()
    {
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r0;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        $z0 = r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: boolean nullable>;

        return $z0;
    }

    public ORG.as220.tinySQL.tsColumn getColumn()
    {
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r0;
        ORG.as220.tinySQL.tsColumn $r2;
        java.lang.String $r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        $r2 = new ORG.as220.tinySQL.tsColumn;

        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: java.lang.String getName()>();

        specialinvoke $r2.<ORG.as220.tinySQL.tsColumn: void <init>(java.lang.String)>($r3);

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int getSize()>();

        if $i0 <= 0 goto label1;

        $i2 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int getSize()>();

        $i3 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int getDecimals()>();

        virtualinvoke $r2.<ORG.as220.tinySQL.tsColumn: void setSize(int,int)>($i2, $i3);

     label1:
        $i1 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int getType()>();

        virtualinvoke $r2.<ORG.as220.tinySQL.tsColumn: void setType(int)>($i1);

        $z0 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: boolean isNullable()>();

        virtualinvoke $r2.<ORG.as220.tinySQL.tsColumn: void setNullable(boolean)>($z0);

        return $r2;
    }

    public java.lang.String toString()
    {
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r0;
        java.lang.StringBuffer $r2;
        java.lang.String $r4, $r7, $r14;
        int $i0, $i1, $i2, $i3;

        r0 := @this: ORG.as220.tinySQL.sqlparser.ColumnDefinition;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("( ");

        $r4 = r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: java.lang.String name>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; type= ");

        $i0 = r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int type>;

        $r7 = staticinvoke <ORG.as220.tinySQL.sqlparser.ParserUtils: java.lang.String typeToLiteral(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; size= ");

        $i1 = r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int size>;

        if $i1 != 0 goto label1;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DEFAULT )");

        goto label2;

     label1:
        $i2 = r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int size>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; decimals= ");

        $i3 = r0.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: int decimals>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");

     label2:
        $r14 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r14;
    }
}
