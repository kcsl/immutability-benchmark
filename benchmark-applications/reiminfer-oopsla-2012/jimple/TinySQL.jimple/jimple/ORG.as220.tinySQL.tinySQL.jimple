public abstract class ORG.as220.tinySQL.tinySQL extends java.lang.Object
{
    private java.util.Hashtable tables;
    private ORG.as220.tinySQL.tinySQLConnection connection;

    public void <init>()
    {
        ORG.as220.tinySQL.tinySQL r0;
        java.util.Hashtable $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<ORG.as220.tinySQL.tinySQL: java.util.Hashtable tables> = $r1;

        return;
    }

    public ORG.as220.tinySQL.tinySQLConnection getConnection()
    {
        ORG.as220.tinySQL.tinySQL r0;
        ORG.as220.tinySQL.tinySQLConnection $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        $r1 = r0.<ORG.as220.tinySQL.tinySQL: ORG.as220.tinySQL.tinySQLConnection connection>;

        return $r1;
    }

    public void setConnection(ORG.as220.tinySQL.tinySQLConnection)
    {
        ORG.as220.tinySQL.tinySQL r0;
        ORG.as220.tinySQL.tinySQLConnection r1;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLConnection;

        r0.<ORG.as220.tinySQL.tinySQL: ORG.as220.tinySQL.tinySQLConnection connection> = r1;

        return;
    }

    public ORG.as220.tinySQL.sqlparser.SQLStatement parse(ORG.as220.tinySQL.tinySQLStatement, java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        java.lang.String r2, $r11, $r16;
        java.io.StringReader $r5;
        ORG.as220.tinySQL.parser.TinySQLParser $r6;
        java.lang.Exception $r7;
        ORG.as220.tinySQL.tinySQLException $r8, $r13;
        java.lang.StringBuilder $r9, $r10, $r14, $r15;
        ORG.as220.tinySQL.parser.ParseException $r12;
        ORG.as220.tinySQL.sqlparser.SQLStatement r17;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        r2 := @parameter1: java.lang.String;

        $r5 = new java.io.StringReader;

        specialinvoke $r5.<java.io.StringReader: void <init>(java.lang.String)>(r2);

        $r6 = new ORG.as220.tinySQL.parser.TinySQLParser;

        specialinvoke $r6.<ORG.as220.tinySQL.parser.TinySQLParser: void <init>(java.io.Reader)>($r5);

     label1:
        r17 = virtualinvoke $r6.<ORG.as220.tinySQL.parser.TinySQLParser: ORG.as220.tinySQL.sqlparser.SQLStatement getStatement(ORG.as220.tinySQL.tinySQLStatement)>(r1);

     label2:
        goto label5;

     label3:
        $r12 := @caughtexception;

        $r13 = new ORG.as220.tinySQL.tinySQLException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Parse error: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label4:
        $r7 := @caughtexception;

        $r8 = new ORG.as220.tinySQL.tinySQLException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error while generating statement: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>($r11, $r7);

        throw $r8;

     label5:
        return r17;

        catch ORG.as220.tinySQL.parser.ParseException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public ORG.as220.tinySQL.tsResultSet SelectStatement(ORG.as220.tinySQL.sqlparser.SelectStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        ORG.as220.tinySQL.sqlparser.SelectStatement r1;
        java.util.Enumeration r2;
        ORG.as220.tinySQL.sqlparser.WhereClause r4;
        ORG.as220.tinySQL.tinySQLStatement r5;
        int i0, $i1, $i2, i3;
        java.util.Vector $r7, $r13, $r16, r19, r22;
        boolean $z0;
        java.lang.Object $r8, $r10, $r11;
        java.util.Hashtable $r9;
        ORG.as220.tinySQL.tsWeakPhysicalRow $r14;
        ORG.as220.tinySQL.tsResultSet $r15;
        java.sql.SQLException $r17;
        ORG.as220.tinySQL.tinySQLTableView r18, r21;
        ORG.as220.tinySQL.tsColumn r20;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.SelectStatement;

        r2 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Enumeration getTables()>();

        $r7 = new java.util.Vector;

        specialinvoke $r7.<java.util.Vector: void <init>()>();

        goto label2;

     label1:
        $r8 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r18 = (ORG.as220.tinySQL.tinySQLTableView) $r8;

        virtualinvoke $r7.<java.util.Vector: boolean add(java.lang.Object)>(r18);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        r19 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector getTableColumns()>();

        r4 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.sqlparser.WhereClause getWhereClause()>();

        r5 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.tinySQLStatement getStatement()>();

        $r9 = new java.util.Hashtable;

        specialinvoke $r9.<java.util.Hashtable: void <init>()>();

        i0 = virtualinvoke r19.<java.util.Vector: int size()>();

        i3 = 0;

        goto label5;

     label3:
        $r10 = virtualinvoke r19.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r20 = (ORG.as220.tinySQL.tsColumn) $r10;

        r21 = virtualinvoke r20.<ORG.as220.tinySQL.tsColumn: ORG.as220.tinySQL.tinySQLTableView getTable()>();

        $r11 = virtualinvoke $r9.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r21);

        r22 = (java.util.Vector) $r11;

        if r22 != null goto label4;

        $r13 = new java.util.Vector;

        specialinvoke $r13.<java.util.Vector: void <init>()>();

        r22 = $r13;

     label4:
        virtualinvoke r22.<java.util.Vector: boolean add(java.lang.Object)>(r20);

        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r21, r22);

        i3 = i3 + 1;

     label5:
        if i3 < i0 goto label3;

        $r14 = new ORG.as220.tinySQL.tsWeakPhysicalRow;

        specialinvoke $r14.<ORG.as220.tinySQL.tsWeakPhysicalRow: void <init>(java.util.Vector)>(r19);

        $r15 = new ORG.as220.tinySQL.tsResultSet;

        $r16 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.SelectStatement: java.util.Vector getResultColumns()>();

        specialinvoke $r15.<ORG.as220.tinySQL.tsResultSet: void <init>(ORG.as220.tinySQL.tsPhysicalRow,java.util.Vector,java.util.Hashtable,ORG.as220.tinySQL.sqlparser.WhereClause,ORG.as220.tinySQL.tinySQL)>($r14, $r16, $r9, r4, r0);

     label6:
        $i1 = virtualinvoke r5.<ORG.as220.tinySQL.tinySQLStatement: int getFetchSize()>();

        virtualinvoke $r15.<ORG.as220.tinySQL.tsResultSet: void setFetchSize(int)>($i1);

        $i2 = virtualinvoke r5.<ORG.as220.tinySQL.tinySQLStatement: int getResultSetType()>();

        virtualinvoke $r15.<ORG.as220.tinySQL.tsResultSet: void setType(int)>($i2);

     label7:
        goto label9;

     label8:
        $r17 := @caughtexception;

        staticinvoke <ORG.as220.tinySQL.util.Log: void warn(java.lang.String)>("Caught SQLException while setting Fetchsize and ResultSetType");

        staticinvoke <ORG.as220.tinySQL.util.Log: void warn(java.lang.String)>("   This event not expected to occur and will be ignored.");

        virtualinvoke $r17.<java.sql.SQLException: void printStackTrace()>();

     label9:
        return $r15;

        catch java.sql.SQLException from label6 to label7 with label8;
    }

    public int continueQuery(ORG.as220.tinySQL.tsResultSet) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        ORG.as220.tinySQL.tsResultSet r1;
        java.util.Vector r2, r15, r17;
        java.util.Hashtable r3;
        ORG.as220.tinySQL.tsPhysicalRow r4, $r11;
        int $i0, $i1, $i2, i3, i4;
        java.util.Stack $r6;
        java.lang.Object $r7, $r8, $r9, $r12, $r13;
        boolean $z0, $z1, $z2, z3, z4;
        ORG.as220.tinySQL.sqlparser.WhereClause $r10;
        ORG.as220.tinySQL.tinySQLTableView r14, r16;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: ORG.as220.tinySQL.tsResultSet;

        r2 = virtualinvoke r1.<ORG.as220.tinySQL.tsResultSet: java.util.Vector getTables()>();

        $i0 = virtualinvoke r2.<java.util.Vector: int size()>();

        if $i0 != 0 goto label1;

        staticinvoke <ORG.as220.tinySQL.util.Log: void info(java.lang.String)>("No Tables in select, signaling end-of-file");

        return -1;

     label1:
        r3 = virtualinvoke r1.<ORG.as220.tinySQL.tsResultSet: java.util.Hashtable getColumns()>();

        i3 = virtualinvoke r1.<ORG.as220.tinySQL.tsResultSet: int getLevel()>();

        r4 = virtualinvoke r1.<ORG.as220.tinySQL.tsResultSet: ORG.as220.tinySQL.tsPhysicalRow createPhysicalRow()>();

        $r6 = new java.util.Stack;

        specialinvoke $r6.<java.util.Stack: void <init>()>();

        i4 = 0;

        goto label4;

     label2:
        $r7 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(i4);

        r14 = (ORG.as220.tinySQL.tinySQLTableView) $r7;

        $r8 = virtualinvoke r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r14);

        r15 = (java.util.Vector) $r8;

        $z0 = virtualinvoke r14.<ORG.as220.tinySQL.tinySQLTableView: boolean isBeforeFirst()>();

        if $z0 != 0 goto label3;

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void addColumnsToRow(java.util.Vector,ORG.as220.tinySQL.tsPhysicalRow,ORG.as220.tinySQL.tinySQLTableView)>(r15, r4, r14);

     label3:
        virtualinvoke $r6.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r14);

        i4 = i4 + 1;

     label4:
        if i4 <= i3 goto label2;

        goto label9;

     label5:
        $r9 = virtualinvoke $r6.<java.util.Stack: java.lang.Object peek()>();

        r16 = (ORG.as220.tinySQL.tinySQLTableView) $r9;

        z3 = 0;

        $z1 = virtualinvoke r16.<ORG.as220.tinySQL.tinySQLTableView: boolean nextNonDeleted()>();

        if $z1 == 0 goto label7;

        $r12 = virtualinvoke r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r16);

        r17 = (java.util.Vector) $r12;

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void addColumnsToRow(java.util.Vector,ORG.as220.tinySQL.tsPhysicalRow,ORG.as220.tinySQL.tinySQLTableView)>(r17, r4, r16);

        $i1 = i3 + 1;

        $i2 = virtualinvoke r2.<java.util.Vector: int size()>();

        if $i1 >= $i2 goto label6;

        i3 = i3 + 1;

        $r13 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        virtualinvoke $r6.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r13);

        goto label8;

     label6:
        z3 = 1;

        goto label8;

     label7:
        i3 = i3 + -1;

        virtualinvoke r16.<ORG.as220.tinySQL.tinySQLTableView: boolean beforeFirst()>();

        virtualinvoke $r6.<java.util.Stack: java.lang.Object pop()>();

     label8:
        if z3 == 0 goto label9;

        $r10 = virtualinvoke r1.<ORG.as220.tinySQL.tsResultSet: ORG.as220.tinySQL.sqlparser.WhereClause getWhereClause()>();

        $z2 = virtualinvoke $r10.<ORG.as220.tinySQL.sqlparser.WhereClause: boolean isMatch(ORG.as220.tinySQL.tsRow)>(r4);

        if $z2 == 0 goto label9;

        $r11 = new ORG.as220.tinySQL.tsPhysicalRow;

        specialinvoke $r11.<ORG.as220.tinySQL.tsPhysicalRow: void <init>(ORG.as220.tinySQL.tsPhysicalRow)>(r4);

        z4 = virtualinvoke r1.<ORG.as220.tinySQL.tsResultSet: boolean addPhysicalRow(ORG.as220.tinySQL.tsPhysicalRow)>($r11);

        if z4 != 0 goto label9;

        return i3;

     label9:
        if i3 > -1 goto label5;

        return i3;
    }

    protected void addColumnsToRow(java.util.Vector, ORG.as220.tinySQL.tsPhysicalRow, ORG.as220.tinySQL.tinySQLTableView) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        java.util.Vector r1;
        ORG.as220.tinySQL.tsPhysicalRow r2;
        ORG.as220.tinySQL.tinySQLTableView r3;
        int i0, i1, $i2, i3;
        ORG.as220.tinySQL.tsColumn r4;
        java.lang.Object r5, $r6;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: java.util.Vector;

        r2 := @parameter1: ORG.as220.tinySQL.tsPhysicalRow;

        r3 := @parameter2: ORG.as220.tinySQL.tinySQLTableView;

        i0 = virtualinvoke r1.<java.util.Vector: int size()>();

        i3 = 0;

        goto label2;

     label1:
        $r6 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r4 = (ORG.as220.tinySQL.tsColumn) $r6;

        $i2 = virtualinvoke r4.<ORG.as220.tinySQL.tsColumn: int getTablePosition()>();

        r5 = virtualinvoke r3.<ORG.as220.tinySQL.tinySQLTableView: java.lang.Object getColumn(int)>($i2);

        i1 = virtualinvoke r4.<ORG.as220.tinySQL.tsColumn: int getResultPosition()>();

        virtualinvoke r2.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>(i1, r5);

        i3 = i3 + 1;

     label2:
        if i3 < i0 goto label1;

        return;
    }

    public int DeleteStatement(ORG.as220.tinySQL.sqlparser.DeleteStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        ORG.as220.tinySQL.sqlparser.DeleteStatement r1;
        ORG.as220.tinySQL.tinySQLTableView r2;
        ORG.as220.tinySQL.sqlparser.WhereClause r3, $r6;
        ORG.as220.tinySQL.tsPhysicalRow $r5;
        java.util.Vector $r7;
        boolean $z1, $z2;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.DeleteStatement;

        i0 = 0;

        r2 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.tinySQLTableView getTable()>();

        r3 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.sqlparser.WhereClause getWhereClause()>();

        $r5 = new ORG.as220.tinySQL.tsPhysicalRow;

        $r6 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.DeleteStatement: ORG.as220.tinySQL.sqlparser.WhereClause getWhereClause()>();

        $r7 = virtualinvoke $r6.<ORG.as220.tinySQL.sqlparser.WhereClause: java.util.Vector getColumns()>();

        specialinvoke $r5.<ORG.as220.tinySQL.tsPhysicalRow: void <init>(java.util.Vector)>($r7);

        virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: boolean beforeFirst()>();

        goto label2;

     label1:
        virtualinvoke $r5.<ORG.as220.tinySQL.tsPhysicalRow: void refresh()>();

        $z1 = virtualinvoke r3.<ORG.as220.tinySQL.sqlparser.WhereClause: boolean isMatch(ORG.as220.tinySQL.tsRow)>($r5);

        if $z1 == 0 goto label2;

        virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: void deleteRow()>();

        i0 = i0 + 1;

     label2:
        $z2 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: boolean nextNonDeleted()>();

        if $z2 != 0 goto label1;

        virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: void close()>();

        return i0;
    }

    public int UpdateStatement(ORG.as220.tinySQL.sqlparser.UpdateStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        ORG.as220.tinySQL.sqlparser.UpdateStatement r1;
        ORG.as220.tinySQL.tinySQLTableView r2;
        ORG.as220.tinySQL.sqlparser.WhereClause r3;
        java.util.Vector r4;
        ORG.as220.tinySQL.tsResultRow r6;
        ORG.as220.tinySQL.tsPhysicalRow $r7;
        boolean $z1, $z2;
        int i0;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.UpdateStatement;

        r2 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.UpdateStatement: ORG.as220.tinySQL.tinySQLTableView getTable()>();

        r3 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.UpdateStatement: ORG.as220.tinySQL.sqlparser.WhereClause getWhereClause()>();

        i0 = 0;

        r4 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.UpdateStatement: java.util.Vector getColumns()>();

        $r7 = new ORG.as220.tinySQL.tsPhysicalRow;

        specialinvoke $r7.<ORG.as220.tinySQL.tsPhysicalRow: void <init>(java.util.Vector)>(r4);

        r6 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.UpdateStatement: ORG.as220.tinySQL.tsResultRow getValues()>();

        virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: boolean beforeFirst()>();

        goto label2;

     label1:
        virtualinvoke $r7.<ORG.as220.tinySQL.tsPhysicalRow: void refresh()>();

        $z1 = virtualinvoke r3.<ORG.as220.tinySQL.sqlparser.WhereClause: boolean isMatch(ORG.as220.tinySQL.tsRow)>($r7);

        if $z1 == 0 goto label2;

        virtualinvoke r6.<ORG.as220.tinySQL.tsResultRow: void setParent(ORG.as220.tinySQL.tsRow)>($r7);

        virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: void updateRow(ORG.as220.tinySQL.tsRow)>(r6);

        i0 = i0 + 1;

     label2:
        $z2 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: boolean nextNonDeleted()>();

        if $z2 != 0 goto label1;

        virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: void close()>();

        return i0;
    }

    public int InsertStatement(ORG.as220.tinySQL.sqlparser.InsertStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        ORG.as220.tinySQL.sqlparser.InsertStatement r1;
        ORG.as220.tinySQL.tinySQLTableView r2;
        ORG.as220.tinySQL.tinySQLResultSet r3;
        java.lang.String[] r5;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7;
        java.lang.Object $r7, $r12;
        ORG.as220.tinySQL.tsPhysicalRow $r8;
        ORG.as220.tinySQL.tsColumn $r9;
        java.lang.String $r10, $r11;
        ORG.as220.tinySQL.tinySQLException $r13, $r15;
        java.sql.SQLException $r14;
        java.lang.Throwable $r16;
        java.util.Vector r17, r19;
        ORG.as220.tinySQL.sqlparser.SelectStatement r18;
        ORG.as220.tinySQL.tsRow r20;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.InsertStatement;

        i3 = 0;

        r2 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.InsertStatement: ORG.as220.tinySQL.tinySQLTableView getTable()>();

     label01:
        $z0 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.InsertStatement: boolean hasSubSelect()>();

        if $z0 == 0 goto label09;

        r17 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.InsertStatement: java.util.Vector getColumns()>();

        i4 = virtualinvoke r17.<java.util.Vector: int size()>();

        r18 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.InsertStatement: ORG.as220.tinySQL.sqlparser.SelectStatement getSelect()>();

        $z1 = virtualinvoke r18.<ORG.as220.tinySQL.sqlparser.SelectStatement: boolean execute()>();

        if $z1 != 0 goto label02;

        $r13 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r13.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Select did not return a statement");

        throw $r13;

     label02:
        r3 = virtualinvoke r18.<ORG.as220.tinySQL.sqlparser.SelectStatement: ORG.as220.tinySQL.tinySQLResultSet getResultSet()>();

        $r8 = new ORG.as220.tinySQL.tsPhysicalRow;

        specialinvoke $r8.<ORG.as220.tinySQL.tsPhysicalRow: void <init>(java.util.Vector)>(r17);

        $i1 = virtualinvoke $r8.<ORG.as220.tinySQL.tsPhysicalRow: int size()>();

        r5 = newarray (java.lang.String)[$i1];

        i5 = 0;

        goto label04;

     label03:
        $r9 = virtualinvoke $r8.<ORG.as220.tinySQL.tsPhysicalRow: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i5);

        $r10 = virtualinvoke $r9.<ORG.as220.tinySQL.tsColumn: java.lang.String getPhysicalName()>();

        r5[i5] = $r10;

        i5 = i5 + 1;

     label04:
        $i2 = lengthof r5;

        if i5 < $i2 goto label03;

        goto label08;

     label05:
        i6 = 0;

        goto label07;

     label06:
        $r11 = r5[i6];

        $r12 = interfaceinvoke r3.<java.sql.ResultSet: java.lang.Object getObject(java.lang.String)>($r11);

        virtualinvoke $r8.<ORG.as220.tinySQL.tsPhysicalRow: void put(int,java.lang.Object)>(i6, $r12);

        i6 = i6 + 1;

     label07:
        if i6 < i4 goto label06;

        virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: void insertRow(ORG.as220.tinySQL.tsRow)>($r8);

        i3 = i3 + 1;

     label08:
        $z2 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>();

        if $z2 != 0 goto label05;

        interfaceinvoke r3.<java.sql.ResultSet: void close()>();

        goto label15;

     label09:
        r19 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.InsertStatement: java.util.Vector getValues()>();

        i7 = 0;

        goto label11;

     label10:
        $r7 = virtualinvoke r19.<java.util.Vector: java.lang.Object elementAt(int)>(i7);

        r20 = (ORG.as220.tinySQL.tsRow) $r7;

        virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: void insertRow(ORG.as220.tinySQL.tsRow)>(r20);

        i3 = i3 + 1;

        i7 = i7 + 1;

     label11:
        $i0 = virtualinvoke r19.<java.util.Vector: int size()>();

        if i7 < $i0 goto label10;

     label12:
        goto label15;

     label13:
        $r14 := @caughtexception;

        $r15 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r15.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String,java.lang.Exception)>("Insert failed", $r14);

        throw $r15;

     label14:
        $r16 := @caughtexception;

        virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: void close()>();

        throw $r16;

     label15:
        virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: void close()>();

        return i3;

        catch java.sql.SQLException from label01 to label12 with label13;
        catch java.lang.Throwable from label01 to label14 with label14;
    }

    protected abstract void db_createTable(java.lang.String, java.util.Vector) throws java.io.IOException, ORG.as220.tinySQL.tinySQLException;

    protected void db_copyTableMeta(java.lang.String, java.lang.String, java.util.Vector) throws java.io.IOException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        java.lang.String r1, r2;
        java.util.Vector r3;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Vector;

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_createTable(java.lang.String,java.util.Vector)>(r2, r3);

        return;
    }

    protected abstract void db_removeTable(java.lang.String) throws java.io.IOException, ORG.as220.tinySQL.tinySQLException;

    protected abstract void db_renameTable(java.lang.String, java.lang.String) throws java.io.IOException, ORG.as220.tinySQL.tinySQLException;

    public abstract boolean CreateTable(ORG.as220.tinySQL.sqlparser.CreateTableStatement) throws ORG.as220.tinySQL.tinySQLException;

    public boolean AlterTableAddCol(ORG.as220.tinySQL.sqlparser.AlterTableAddColumnStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        ORG.as220.tinySQL.sqlparser.AlterTableAddColumnStatement r1;
        ORG.as220.tinySQL.tinySQLTableView r2;
        java.lang.String r3, r4, r5, r9, $r11, $r14;
        ORG.as220.tinySQL.tsColumn r8, $r17, r32;
        java.lang.StringBuilder $r10, $r12, $r13, $r15;
        java.util.Vector $r16, $r18, r30;
        int $i0, $i1, i2, i3, i4, i5, i6;
        java.lang.Object $r19, $r24;
        ORG.as220.tinySQL.sqlparser.InsertStatement $r20;
        ORG.as220.tinySQL.tinySQLStatement $r21, $r23;
        ORG.as220.tinySQL.sqlparser.SelectStatement $r22;
        ORG.as220.tinySQL.sqlparser.ColumnValue $r25;
        ORG.as220.tinySQL.tinySQLException $r26, $r28;
        java.lang.Exception $r27;
        ORG.as220.tinySQL.tinySQLTable r29;
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r31;
        boolean z2;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.AlterTableAddColumnStatement;

        r2 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterTableAddColumnStatement: ORG.as220.tinySQL.tinySQLTableView getTable()>();

        r3 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String getName()>();

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void closeTable(java.lang.String)>(r3);

        $r10 = new java.lang.StringBuilder;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_tmp_ATAC_ORG");

        r4 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.StringBuilder;

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_tmp_ATAC");

        r5 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label01:
        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_removeTable(java.lang.String)>(r4);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_removeTable(java.lang.String)>(r5);

        r29 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: ORG.as220.tinySQL.tinySQLTable openTable(java.lang.String)>(r3);

        $r16 = new java.util.Vector;

        specialinvoke $r16.<java.util.Vector: void <init>()>();

        i2 = virtualinvoke r29.<ORG.as220.tinySQL.tinySQLTable: int getColumnCount()>();

        i3 = 0;

        goto label03;

     label02:
        $r17 = virtualinvoke r29.<ORG.as220.tinySQL.tinySQLTable: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i3);

        virtualinvoke $r16.<java.util.Vector: void addElement(java.lang.Object)>($r17);

        i3 = i3 + 1;

     label03:
        if i3 < i2 goto label02;

        r30 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterTableAddColumnStatement: java.util.Vector getColumns()>();

        $r18 = new java.util.Vector;

        specialinvoke $r18.<java.util.Vector: void <init>(java.util.Collection)>($r16);

        i4 = 0;

        goto label05;

     label04:
        $r19 = virtualinvoke r30.<java.util.Vector: java.lang.Object elementAt(int)>(i4);

        r31 = (ORG.as220.tinySQL.sqlparser.ColumnDefinition) $r19;

        r32 = virtualinvoke r31.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: ORG.as220.tinySQL.tsColumn getColumn()>();

        virtualinvoke $r18.<java.util.Vector: boolean add(java.lang.Object)>(r32);

        i4 = i4 + 1;

     label05:
        $i0 = virtualinvoke r30.<java.util.Vector: int size()>();

        if i4 < $i0 goto label04;

        virtualinvoke r29.<ORG.as220.tinySQL.tinySQLTable: boolean close()>();

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_copyTableMeta(java.lang.String,java.lang.String,java.util.Vector)>(r3, r5, $r18);

        $r20 = new ORG.as220.tinySQL.sqlparser.InsertStatement;

        $r21 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterTableAddColumnStatement: ORG.as220.tinySQL.tinySQLStatement getStatement()>();

        specialinvoke $r20.<ORG.as220.tinySQL.sqlparser.InsertStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>($r21);

        virtualinvoke $r20.<ORG.as220.tinySQL.sqlparser.InsertStatement: void setTable(java.lang.String)>(r5);

        $r22 = new ORG.as220.tinySQL.sqlparser.SelectStatement;

        $r23 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterTableAddColumnStatement: ORG.as220.tinySQL.tinySQLStatement getStatement()>();

        specialinvoke $r22.<ORG.as220.tinySQL.sqlparser.SelectStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>($r23);

        virtualinvoke $r22.<ORG.as220.tinySQL.sqlparser.SelectStatement: void addTable(java.lang.String,java.lang.String)>(r3, r3);

        i5 = virtualinvoke $r16.<java.util.Vector: int size()>();

        i6 = 0;

        goto label07;

     label06:
        $r24 = virtualinvoke $r16.<java.util.Vector: java.lang.Object elementAt(int)>(i6);

        r8 = (ORG.as220.tinySQL.tsColumn) $r24;

        r9 = virtualinvoke r8.<ORG.as220.tinySQL.tsColumn: java.lang.String getFQName()>();

        $r25 = new ORG.as220.tinySQL.sqlparser.ColumnValue;

        specialinvoke $r25.<ORG.as220.tinySQL.sqlparser.ColumnValue: void <init>(java.lang.String)>(r9);

        virtualinvoke $r22.<ORG.as220.tinySQL.sqlparser.SelectStatement: void addColumn(ORG.as220.tinySQL.sqlparser.LValue,java.lang.String)>($r25, r9);

        virtualinvoke $r20.<ORG.as220.tinySQL.sqlparser.InsertStatement: void addColumn(java.lang.String)>(r9);

        i6 = i6 + 1;

     label07:
        if i6 < i5 goto label06;

        virtualinvoke $r20.<ORG.as220.tinySQL.sqlparser.InsertStatement: void addSelect(ORG.as220.tinySQL.sqlparser.SelectStatement)>($r22);

        z2 = virtualinvoke $r20.<ORG.as220.tinySQL.sqlparser.InsertStatement: boolean execute()>();

        if z2 == 0 goto label08;

        $r26 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r26.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Insert .. select returned a resultSet?!");

        throw $r26;

     label08:
        $i1 = virtualinvoke $r20.<ORG.as220.tinySQL.sqlparser.InsertStatement: int getUpdateCount()>();

        virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterTableAddColumnStatement: void setUpdateCount(int)>($i1);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void closeTable(java.lang.String)>(r3);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void closeTable(java.lang.String)>(r5);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_renameTable(java.lang.String,java.lang.String)>(r3, r4);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_renameTable(java.lang.String,java.lang.String)>(r5, r3);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_removeTable(java.lang.String)>(r4);

     label09:
        goto label11;

     label10:
        $r27 := @caughtexception;

        $r28 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r28.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r27);

        throw $r28;

     label11:
        return 0;

        catch java.lang.Exception from label01 to label09 with label10;
    }

    public boolean AlterCreateTable(ORG.as220.tinySQL.sqlparser.AlterCreateTableStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        ORG.as220.tinySQL.sqlparser.AlterCreateTableStatement r1;
        java.lang.String r2, r3, r4, r8, $r10, $r13, $r17, r31;
        ORG.as220.tinySQL.tinySQLTable r5, r6;
        int i0, $i1, $i2, $i3, i4, i5, $i6, i7;
        java.lang.StringBuilder $r9, $r11, $r12, $r14;
        java.util.Vector $r15, $r18;
        ORG.as220.tinySQL.tsColumn $r16, $r19;
        ORG.as220.tinySQL.sqlparser.InsertStatement $r20;
        ORG.as220.tinySQL.tinySQLStatement $r21, $r23;
        ORG.as220.tinySQL.sqlparser.SelectStatement $r22;
        java.lang.Object $r24;
        ORG.as220.tinySQL.sqlparser.ColumnValue $r25;
        ORG.as220.tinySQL.tinySQLException $r26, $r28;
        java.lang.Exception $r27;
        ORG.as220.tinySQL.sqlparser.CreateTableStatement r29;
        boolean z5;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.AlterCreateTableStatement;

     label01:
        r29 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterCreateTableStatement: ORG.as220.tinySQL.sqlparser.CreateTableStatement getCreateTableStatement()>();

        r2 = virtualinvoke r29.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: java.lang.String getTable()>();

        $r9 = new java.lang.StringBuilder;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>($r10);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_tmp_ACT");

        r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.StringBuilder;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_tmp_ACT_ORG");

        r4 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r29.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: void setTable(java.lang.String)>(r3);

        virtualinvoke r29.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: boolean execute()>();

        r5 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: ORG.as220.tinySQL.tinySQLTable openTable(java.lang.String)>(r2);

        r6 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: ORG.as220.tinySQL.tinySQLTable openTable(java.lang.String)>(r3);

        $r15 = new java.util.Vector;

        specialinvoke $r15.<java.util.Vector: void <init>()>();

        i4 = 0;

        goto label03;

     label02:
        $r16 = virtualinvoke r6.<ORG.as220.tinySQL.tinySQLTable: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i4);

        $r17 = virtualinvoke $r16.<ORG.as220.tinySQL.tsColumn: java.lang.String getPhysicalName()>();

        virtualinvoke $r15.<java.util.Vector: boolean add(java.lang.Object)>($r17);

        i4 = i4 + 1;

     label03:
        $i1 = virtualinvoke r6.<ORG.as220.tinySQL.tinySQLTable: int getColumnCount()>();

        if i4 < $i1 goto label02;

        $r18 = new java.util.Vector;

        specialinvoke $r18.<java.util.Vector: void <init>()>();

        i5 = 0;

        goto label06;

     label04:
        $r19 = virtualinvoke r5.<ORG.as220.tinySQL.tinySQLTable: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i5);

        r31 = virtualinvoke $r19.<ORG.as220.tinySQL.tsColumn: java.lang.String getPhysicalName()>();

        $i2 = virtualinvoke $r15.<java.util.Vector: int indexOf(java.lang.Object)>(r31);

        if $i2 == -1 goto label05;

        virtualinvoke $r18.<java.util.Vector: boolean add(java.lang.Object)>(r31);

     label05:
        i5 = i5 + 1;

     label06:
        $i6 = virtualinvoke r5.<ORG.as220.tinySQL.tinySQLTable: int getColumnCount()>();

        if i5 < $i6 goto label04;

        virtualinvoke r5.<ORG.as220.tinySQL.tinySQLTable: boolean close()>();

        virtualinvoke r6.<ORG.as220.tinySQL.tinySQLTable: boolean close()>();

        $r20 = new ORG.as220.tinySQL.sqlparser.InsertStatement;

        $r21 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterCreateTableStatement: ORG.as220.tinySQL.tinySQLStatement getStatement()>();

        specialinvoke $r20.<ORG.as220.tinySQL.sqlparser.InsertStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>($r21);

        virtualinvoke $r20.<ORG.as220.tinySQL.sqlparser.InsertStatement: void setTable(java.lang.String)>(r3);

        $r22 = new ORG.as220.tinySQL.sqlparser.SelectStatement;

        $r23 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterCreateTableStatement: ORG.as220.tinySQL.tinySQLStatement getStatement()>();

        specialinvoke $r22.<ORG.as220.tinySQL.sqlparser.SelectStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>($r23);

        virtualinvoke $r22.<ORG.as220.tinySQL.sqlparser.SelectStatement: void addTable(java.lang.String,java.lang.String)>(r2, r2);

        i0 = virtualinvoke $r18.<java.util.Vector: int size()>();

        i7 = 0;

        goto label08;

     label07:
        $r24 = virtualinvoke $r18.<java.util.Vector: java.lang.Object elementAt(int)>(i7);

        r8 = (java.lang.String) $r24;

        $r25 = new ORG.as220.tinySQL.sqlparser.ColumnValue;

        specialinvoke $r25.<ORG.as220.tinySQL.sqlparser.ColumnValue: void <init>(java.lang.String)>(r8);

        virtualinvoke $r22.<ORG.as220.tinySQL.sqlparser.SelectStatement: void addColumn(ORG.as220.tinySQL.sqlparser.LValue,java.lang.String)>($r25, r8);

        virtualinvoke $r20.<ORG.as220.tinySQL.sqlparser.InsertStatement: void addColumn(java.lang.String)>(r8);

        i7 = i7 + 1;

     label08:
        if i7 < i0 goto label07;

        virtualinvoke $r20.<ORG.as220.tinySQL.sqlparser.InsertStatement: void addSelect(ORG.as220.tinySQL.sqlparser.SelectStatement)>($r22);

        z5 = virtualinvoke $r20.<ORG.as220.tinySQL.sqlparser.InsertStatement: boolean execute()>();

        if z5 == 0 goto label09;

        $r26 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r26.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Insert .. select returned a resultSet?!");

        throw $r26;

     label09:
        $i3 = virtualinvoke $r20.<ORG.as220.tinySQL.sqlparser.InsertStatement: int getUpdateCount()>();

        virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterCreateTableStatement: void setUpdateCount(int)>($i3);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void closeTable(java.lang.String)>(r2);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void closeTable(java.lang.String)>(r3);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_renameTable(java.lang.String,java.lang.String)>(r2, r4);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_renameTable(java.lang.String,java.lang.String)>(r3, r2);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_removeTable(java.lang.String)>(r4);

     label10:
        goto label12;

     label11:
        $r27 := @caughtexception;

        $r28 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r28.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r27);

        throw $r28;

     label12:
        return 0;

        catch java.lang.Exception from label01 to label10 with label11;
    }

    public boolean AlterTableDropCol(ORG.as220.tinySQL.sqlparser.AlterTableDropColumnStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        ORG.as220.tinySQL.sqlparser.AlterTableDropColumnStatement r1;
        ORG.as220.tinySQL.tinySQLTableView r2;
        java.lang.String r3, r4, r5, r8, $r10, $r13, $r22;
        ORG.as220.tinySQL.tsColumn r7, $r16, r34;
        java.lang.StringBuilder $r9, $r11, $r12, $r14, $r18, $r19, $r20, $r21;
        java.util.Vector $r15, r33;
        java.lang.Object $r17, $r27;
        ORG.as220.tinySQL.sqlparser.InsertStatement $r23;
        ORG.as220.tinySQL.tinySQLStatement $r24, $r26;
        ORG.as220.tinySQL.sqlparser.SelectStatement $r25;
        ORG.as220.tinySQL.sqlparser.ColumnValue $r28;
        int $i0, i1, i2, i3, i4, $i5, i6, i7;
        ORG.as220.tinySQL.tinySQLException $r29, $r31;
        java.lang.Exception $r30;
        ORG.as220.tinySQL.tinySQLTable r32;
        boolean z1;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.AlterTableDropColumnStatement;

        r2 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterTableDropColumnStatement: ORG.as220.tinySQL.tinySQLTableView getTable()>();

        r3 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String getName()>();

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void closeTable(java.lang.String)>(r3);

        $r9 = new java.lang.StringBuilder;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>($r10);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_tmp_ATAC_ORG");

        r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.StringBuilder;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_tmp_ATAC");

        r5 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label01:
        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_removeTable(java.lang.String)>(r4);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_removeTable(java.lang.String)>(r5);

        r32 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: ORG.as220.tinySQL.tinySQLTable openTable(java.lang.String)>(r3);

        $r15 = new java.util.Vector;

        specialinvoke $r15.<java.util.Vector: void <init>()>();

        i1 = virtualinvoke r32.<ORG.as220.tinySQL.tinySQLTable: int getColumnCount()>();

        i2 = 0;

        goto label03;

     label02:
        $r16 = virtualinvoke r32.<ORG.as220.tinySQL.tinySQLTable: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i2);

        virtualinvoke $r15.<java.util.Vector: void addElement(java.lang.Object)>($r16);

        i2 = i2 + 1;

     label03:
        if i2 < i1 goto label02;

        r33 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterTableDropColumnStatement: java.util.Vector getColumns()>();

        i3 = 0;

        goto label07;

     label04:
        $r17 = virtualinvoke r33.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r34 = (ORG.as220.tinySQL.tsColumn) $r17;

        i4 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: int findColumn(ORG.as220.tinySQL.tsColumn,java.util.Vector)>(r34, $r15);

        if i4 != -1 goto label05;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("ALTER TABLE ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": There is no such column: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r34);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void warn(java.lang.String)>($r22);

        goto label06;

     label05:
        virtualinvoke $r15.<java.util.Vector: void removeElementAt(int)>(i4);

     label06:
        i3 = i3 + 1;

     label07:
        $i5 = virtualinvoke r33.<java.util.Vector: int size()>();

        if i3 < $i5 goto label04;

        virtualinvoke r32.<ORG.as220.tinySQL.tinySQLTable: boolean close()>();

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_copyTableMeta(java.lang.String,java.lang.String,java.util.Vector)>(r3, r5, $r15);

        $r23 = new ORG.as220.tinySQL.sqlparser.InsertStatement;

        $r24 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterTableDropColumnStatement: ORG.as220.tinySQL.tinySQLStatement getStatement()>();

        specialinvoke $r23.<ORG.as220.tinySQL.sqlparser.InsertStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>($r24);

        virtualinvoke $r23.<ORG.as220.tinySQL.sqlparser.InsertStatement: void setTable(java.lang.String)>(r5);

        $r25 = new ORG.as220.tinySQL.sqlparser.SelectStatement;

        $r26 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterTableDropColumnStatement: ORG.as220.tinySQL.tinySQLStatement getStatement()>();

        specialinvoke $r25.<ORG.as220.tinySQL.sqlparser.SelectStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>($r26);

        virtualinvoke $r25.<ORG.as220.tinySQL.sqlparser.SelectStatement: void addTable(java.lang.String,java.lang.String)>(r3, r3);

        i6 = virtualinvoke $r15.<java.util.Vector: int size()>();

        i7 = 0;

        goto label09;

     label08:
        $r27 = virtualinvoke $r15.<java.util.Vector: java.lang.Object elementAt(int)>(i7);

        r7 = (ORG.as220.tinySQL.tsColumn) $r27;

        r8 = virtualinvoke r7.<ORG.as220.tinySQL.tsColumn: java.lang.String getFQName()>();

        $r28 = new ORG.as220.tinySQL.sqlparser.ColumnValue;

        specialinvoke $r28.<ORG.as220.tinySQL.sqlparser.ColumnValue: void <init>(java.lang.String)>(r8);

        virtualinvoke $r25.<ORG.as220.tinySQL.sqlparser.SelectStatement: void addColumn(ORG.as220.tinySQL.sqlparser.LValue,java.lang.String)>($r28, r8);

        virtualinvoke $r23.<ORG.as220.tinySQL.sqlparser.InsertStatement: void addColumn(java.lang.String)>(r8);

        i7 = i7 + 1;

     label09:
        if i7 < i6 goto label08;

        virtualinvoke $r23.<ORG.as220.tinySQL.sqlparser.InsertStatement: void addSelect(ORG.as220.tinySQL.sqlparser.SelectStatement)>($r25);

        z1 = virtualinvoke $r23.<ORG.as220.tinySQL.sqlparser.InsertStatement: boolean execute()>();

        if z1 == 0 goto label10;

        $r29 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r29.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Insert .. select returned a resultSet?!");

        throw $r29;

     label10:
        $i0 = virtualinvoke $r23.<ORG.as220.tinySQL.sqlparser.InsertStatement: int getUpdateCount()>();

        virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterTableDropColumnStatement: void setUpdateCount(int)>($i0);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void closeTable(java.lang.String)>(r3);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void closeTable(java.lang.String)>(r5);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_renameTable(java.lang.String,java.lang.String)>(r3, r4);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_renameTable(java.lang.String,java.lang.String)>(r5, r3);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_removeTable(java.lang.String)>(r4);

     label11:
        goto label13;

     label12:
        $r30 := @caughtexception;

        $r31 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r31.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r30);

        throw $r31;

     label13:
        return 0;

        catch java.lang.Exception from label01 to label11 with label12;
    }

    public int findColumn(ORG.as220.tinySQL.tsColumn, java.util.Vector)
    {
        ORG.as220.tinySQL.tinySQL r0;
        ORG.as220.tinySQL.tsColumn r1, r3;
        java.util.Vector r2;
        int i0, i1;
        java.lang.Object $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: ORG.as220.tinySQL.tsColumn;

        r2 := @parameter1: java.util.Vector;

        i0 = virtualinvoke r2.<java.util.Vector: int size()>();

        i1 = 0;

        goto label3;

     label1:
        $r4 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r3 = (ORG.as220.tinySQL.tsColumn) $r4;

        $r5 = virtualinvoke r3.<ORG.as220.tinySQL.tsColumn: java.lang.String getPhysicalName()>();

        $z0 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: boolean isValidName(java.lang.String)>($r5);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return -1;
    }

    public boolean AlterTableRenameCol(ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement r1;
        ORG.as220.tinySQL.tinySQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement;

        $r2 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r2.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("ALTER TABLE RENAME is not supported by this implementation");

        throw $r2;
    }

    public void DropTable(ORG.as220.tinySQL.sqlparser.DropTableStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        ORG.as220.tinySQL.sqlparser.DropTableStatement r1;
        ORG.as220.tinySQL.tinySQLTableView r2;
        java.lang.Exception $r3;
        ORG.as220.tinySQL.tinySQLException $r4;
        java.lang.String r5;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.DropTableStatement;

        r2 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.DropTableStatement: ORG.as220.tinySQL.tinySQLTableView getTable()>();

     label1:
        r5 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String getName()>();

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void closeTable(java.lang.String)>(r5);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_removeTable(java.lang.String)>(r5);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r4.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r3);

        throw $r4;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public abstract ORG.as220.tinySQL.tinySQLTable openTable(java.lang.String) throws ORG.as220.tinySQL.tinySQLException;

    public void closeTable(java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        java.lang.String r1, $r8;
        ORG.as220.tinySQL.tinySQLTable r2;
        java.util.Hashtable $r3, $r9;
        java.lang.Object $r4;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<ORG.as220.tinySQL.tinySQL: java.util.Hashtable tables>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (ORG.as220.tinySQL.tinySQLTable) $r4;

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTable: boolean close()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<ORG.as220.tinySQL.tinySQL: java.util.Hashtable tables>;

        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1);

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("TinySQL: Table ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" closed.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void debug(java.lang.String)>($r8);

     label2:
        return;
    }

    public void close()
    {
        ORG.as220.tinySQL.tinySQL r0;
        java.util.Enumeration r1;
        java.lang.String r2, $r10;
        java.util.Hashtable $r4;
        java.lang.Object $r5;
        ORG.as220.tinySQL.tinySQLException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        $r4 = r0.<ORG.as220.tinySQL.tinySQL: java.util.Hashtable tables>;

        r1 = virtualinvoke $r4.<java.util.Hashtable: java.util.Enumeration keys()>();

        goto label5;

     label1:
        $r5 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r2 = (java.lang.String) $r5;

     label2:
        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void closeTable(java.lang.String)>(r2);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Table ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not closed cleanly");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void warn(java.lang.String)>($r10);

     label5:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        return;

        catch ORG.as220.tinySQL.tinySQLException from label2 to label3 with label4;
    }

    public ORG.as220.tinySQL.tinySQLTableView getTable(java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        java.lang.String r1, $r11;
        java.util.Hashtable $r3, $r6;
        java.lang.Object $r4;
        ORG.as220.tinySQL.tinySQLTableView $r5;
        java.lang.StringBuilder $r8, $r9, $r10;
        ORG.as220.tinySQL.tinySQLTable r12;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<ORG.as220.tinySQL.tinySQL: java.util.Hashtable tables>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r12 = (ORG.as220.tinySQL.tinySQLTable) $r4;

        if r12 != null goto label1;

        r12 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: ORG.as220.tinySQL.tinySQLTable openTable(java.lang.String)>(r1);

        $r6 = r0.<ORG.as220.tinySQL.tinySQL: java.util.Hashtable tables>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r12);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("TinySQL: Table ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" opened.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void debug(java.lang.String)>($r11);

     label1:
        $r5 = new ORG.as220.tinySQL.tinySQLTableView;

        specialinvoke $r5.<ORG.as220.tinySQL.tinySQLTableView: void <init>(ORG.as220.tinySQL.tinySQLTable)>(r12);

        return $r5;
    }

    public void CompactTable(ORG.as220.tinySQL.sqlparser.CompactTableStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQL r0;
        ORG.as220.tinySQL.sqlparser.CompactTableStatement r1;
        ORG.as220.tinySQL.tinySQLTableView r2, r27;
        java.lang.String r3, r4, r5, r9, $r11, $r14;
        ORG.as220.tinySQL.tsColumn r8, $r17;
        java.lang.StringBuilder $r10, $r12, $r13, $r15;
        java.util.Vector $r16;
        ORG.as220.tinySQL.sqlparser.InsertStatement $r18;
        ORG.as220.tinySQL.tinySQLStatement $r19, $r21;
        ORG.as220.tinySQL.sqlparser.SelectStatement $r20;
        java.lang.Object $r22;
        ORG.as220.tinySQL.sqlparser.ColumnValue $r23;
        ORG.as220.tinySQL.tinySQLException $r24, $r26;
        java.lang.Exception $r25;
        int i0, i1, i2, i3;
        boolean z0;

        r0 := @this: ORG.as220.tinySQL.tinySQL;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.CompactTableStatement;

        r2 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.CompactTableStatement: ORG.as220.tinySQL.tinySQLTableView getTable()>();

        r3 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String getName()>();

        $r10 = new java.lang.StringBuilder;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_tmp_CPT_ORG");

        r4 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new java.lang.StringBuilder;

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_tmp_CPT");

        r5 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_removeTable(java.lang.String)>(r4);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_removeTable(java.lang.String)>(r5);

        r27 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: ORG.as220.tinySQL.tinySQLTableView getTable(java.lang.String)>(r3);

        $r16 = new java.util.Vector;

        specialinvoke $r16.<java.util.Vector: void <init>()>();

        i0 = virtualinvoke r27.<ORG.as220.tinySQL.tinySQLTableView: int getColumnCount()>();

        i1 = 0;

        goto label3;

     label2:
        $r17 = virtualinvoke r27.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i1);

        virtualinvoke $r16.<java.util.Vector: void addElement(java.lang.Object)>($r17);

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_copyTableMeta(java.lang.String,java.lang.String,java.util.Vector)>(r3, r5, $r16);

        $r18 = new ORG.as220.tinySQL.sqlparser.InsertStatement;

        $r19 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.CompactTableStatement: ORG.as220.tinySQL.tinySQLStatement getStatement()>();

        specialinvoke $r18.<ORG.as220.tinySQL.sqlparser.InsertStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>($r19);

        virtualinvoke $r18.<ORG.as220.tinySQL.sqlparser.InsertStatement: void setTable(java.lang.String)>(r5);

        $r20 = new ORG.as220.tinySQL.sqlparser.SelectStatement;

        $r21 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.CompactTableStatement: ORG.as220.tinySQL.tinySQLStatement getStatement()>();

        specialinvoke $r20.<ORG.as220.tinySQL.sqlparser.SelectStatement: void <init>(ORG.as220.tinySQL.tinySQLStatement)>($r21);

        virtualinvoke $r20.<ORG.as220.tinySQL.sqlparser.SelectStatement: void addTable(java.lang.String,java.lang.String)>(r3, r3);

        i2 = virtualinvoke $r16.<java.util.Vector: int size()>();

        i3 = 0;

        goto label5;

     label4:
        $r22 = virtualinvoke $r16.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r8 = (ORG.as220.tinySQL.tsColumn) $r22;

        r9 = virtualinvoke r8.<ORG.as220.tinySQL.tsColumn: java.lang.String getPhysicalName()>();

        $r23 = new ORG.as220.tinySQL.sqlparser.ColumnValue;

        specialinvoke $r23.<ORG.as220.tinySQL.sqlparser.ColumnValue: void <init>(java.lang.String)>(r9);

        virtualinvoke $r20.<ORG.as220.tinySQL.sqlparser.SelectStatement: void addColumn(ORG.as220.tinySQL.sqlparser.LValue,java.lang.String)>($r23, r9);

        virtualinvoke $r18.<ORG.as220.tinySQL.sqlparser.InsertStatement: void addColumn(java.lang.String)>(r9);

        i3 = i3 + 1;

     label5:
        if i3 < i2 goto label4;

        virtualinvoke $r18.<ORG.as220.tinySQL.sqlparser.InsertStatement: void addSelect(ORG.as220.tinySQL.sqlparser.SelectStatement)>($r20);

        z0 = virtualinvoke $r18.<ORG.as220.tinySQL.sqlparser.InsertStatement: boolean execute()>();

        if z0 == 0 goto label6;

        $r24 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r24.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("Insert .. select returned a resultSet?!");

        throw $r24;

     label6:
        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void closeTable(java.lang.String)>(r3);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void closeTable(java.lang.String)>(r5);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_renameTable(java.lang.String,java.lang.String)>(r3, r4);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_renameTable(java.lang.String,java.lang.String)>(r5, r3);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQL: void db_removeTable(java.lang.String)>(r4);

     label7:
        goto label9;

     label8:
        $r25 := @caughtexception;

        $r26 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r26.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r25);

        throw $r26;

     label9:
        return;

        catch java.lang.Exception from label1 to label7 with label8;
    }
}
