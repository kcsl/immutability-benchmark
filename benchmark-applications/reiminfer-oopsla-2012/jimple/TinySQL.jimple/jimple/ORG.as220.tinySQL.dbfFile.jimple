public class ORG.as220.tinySQL.dbfFile extends ORG.as220.tinySQL.tinySQL
{
    public static final int INSERT_DEFAULT;
    public static final int INSERT_SIZE;
    public static final int INSERT_SPEED;
    private java.lang.String dataDir;
    private java.lang.String encoding;
    private boolean autoEnc;
    private boolean readOnly;
    private java.util.Properties p;
    private short tabletype;
    private int deleteMode;
    private int insertMode;

    public void <init>(java.lang.String, java.util.Properties)
    {
        ORG.as220.tinySQL.dbfFile r0;
        java.lang.String r1;
        java.util.Properties r2;

        r0 := @this: ORG.as220.tinySQL.dbfFile;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Properties;

        specialinvoke r0.<ORG.as220.tinySQL.tinySQL: void <init>()>();

        r0.<ORG.as220.tinySQL.dbfFile: java.lang.String dataDir> = r1;

        virtualinvoke r0.<ORG.as220.tinySQL.dbfFile: void setProperties(java.util.Properties)>(r2);

        return;
    }

    public void setProperties(java.util.Properties)
    {
        ORG.as220.tinySQL.dbfFile r0;
        java.util.Properties r1;
        java.lang.String r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;
        short $s0;
        java.lang.NullPointerException $r7;

        r0 := @this: ORG.as220.tinySQL.dbfFile;

        r1 := @parameter0: java.util.Properties;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>()>();

        throw $r7;

     label1:
        r0.<ORG.as220.tinySQL.dbfFile: java.util.Properties p> = r1;

        $r3 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("encoding", "Cp1252");

        r0.<ORG.as220.tinySQL.dbfFile: java.lang.String encoding> = $r3;

        $r4 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("autoenc", "true");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        r0.<ORG.as220.tinySQL.dbfFile: boolean autoEnc> = $z0;

        $r5 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("readonly", "false");

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        r0.<ORG.as220.tinySQL.dbfFile: boolean readOnly> = $z1;

        $r6 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("tabletype", "db3");

        $s0 = specialinvoke r0.<ORG.as220.tinySQL.dbfFile: short getTableType(java.lang.String)>($r6);

        r0.<ORG.as220.tinySQL.dbfFile: short tabletype> = $s0;

        r2 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("config.insert", "default");

        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("speed");

        if $z2 == 0 goto label2;

        r0.<ORG.as220.tinySQL.dbfFile: int insertMode> = 2;

        goto label4;

     label2:
        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("size");

        if $z3 == 0 goto label3;

        r0.<ORG.as220.tinySQL.dbfFile: int deleteMode> = 1;

        goto label4;

     label3:
        r0.<ORG.as220.tinySQL.dbfFile: int deleteMode> = 0;

     label4:
        return;
    }

    private short getTableType(java.lang.String)
    {
        ORG.as220.tinySQL.dbfFile r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;

        r0 := @this: ORG.as220.tinySQL.dbfFile;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("db3");

        if $z0 == 0 goto label01;

        return 3;

     label01:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("db3memo");

        if $z1 == 0 goto label02;

        return 131;

     label02:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("db4memo");

        if $z2 == 0 goto label03;

        return 139;

     label03:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("db4sqlsys");

        if $z3 == 0 goto label04;

        return 99;

     label04:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("db4sqlmemo");

        if $z4 == 0 goto label05;

        return 203;

     label05:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("db4sql");

        if $z5 == 0 goto label06;

        return 67;

     label06:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("db2");

        if $z6 == 0 goto label07;

        return 2;

     label07:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("foxbase");

        if $z7 == 0 goto label08;

        return 251;

     label08:
        $z8 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("foxpro2");

        if $z8 == 0 goto label09;

        return 245;

     label09:
        $z9 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("visualfoxpro");

        if $z9 == 0 goto label10;

        return 48;

     label10:
        return 3;
    }

    public void setReadOnly(boolean)
    {
        ORG.as220.tinySQL.dbfFile r0;
        boolean z0;

        r0 := @this: ORG.as220.tinySQL.dbfFile;

        z0 := @parameter0: boolean;

        r0.<ORG.as220.tinySQL.dbfFile: boolean readOnly> = z0;

        return;
    }

    public boolean isReadOnly()
    {
        ORG.as220.tinySQL.dbfFile r0;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.dbfFile;

        $z0 = r0.<ORG.as220.tinySQL.dbfFile: boolean readOnly>;

        return $z0;
    }

    public boolean CreateTable(ORG.as220.tinySQL.sqlparser.CreateTableStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.dbfFile r0;
        ORG.as220.tinySQL.sqlparser.CreateTableStatement r1;
        java.util.Vector r2, $r6;
        int i0, i1;
        ORG.as220.tinySQL.sqlparser.ColumnDefinition r4;
        ORG.as220.tinySQL.tsColumn r5;
        boolean $z1;
        java.lang.Object $r7;
        ORG.as220.tinySQL.tinySQLException $r8, $r10;
        java.io.IOException $r9;
        java.lang.String r11;

        r0 := @this: ORG.as220.tinySQL.dbfFile;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.CreateTableStatement;

     label1:
        $z1 = r0.<ORG.as220.tinySQL.dbfFile: boolean readOnly>;

        if $z1 == 0 goto label2;

        $r8 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r8.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("dbfFile is in readonly mode");

        throw $r8;

     label2:
        r11 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: java.lang.String getTable()>();

        r2 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.CreateTableStatement: java.util.Vector getColumnDefinitions()>();

        i0 = virtualinvoke r2.<java.util.Vector: int size()>();

        $r6 = new java.util.Vector;

        specialinvoke $r6.<java.util.Vector: void <init>()>();

        i1 = 0;

        goto label4;

     label3:
        $r7 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r4 = (ORG.as220.tinySQL.sqlparser.ColumnDefinition) $r7;

        r5 = virtualinvoke r4.<ORG.as220.tinySQL.sqlparser.ColumnDefinition: ORG.as220.tinySQL.tsColumn getColumn()>();

        virtualinvoke $r6.<java.util.Vector: boolean add(java.lang.Object)>(r5);

        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label3;

        virtualinvoke r0.<ORG.as220.tinySQL.dbfFile: void db_createTable(java.lang.String,java.util.Vector)>(r11, $r6);

     label5:
        return 0;

     label6:
        $r9 := @caughtexception;

        $r10 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r10.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r9);

        throw $r10;

        catch java.io.IOException from label1 to label5 with label6;
    }

    public boolean AlterTableRenameCol(ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.dbfFile r0;
        ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement r1;
        java.lang.String r2, r3, $r11, $r12, $r13, $r19, $r21;
        java.util.Vector r5, r6;
        ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement$RenameColumnTuple r7;
        ORG.as220.tinySQL.tsColumn r8;
        boolean $z0;
        ORG.as220.tinySQL.tinySQLTableView $r9;
        java.lang.StringBuilder $r10, $r14, $r15, $r16;
        java.io.RandomAccessFile $r17;
        ORG.as220.tinySQL.DBFHeader $r18;
        int $i0, $i1, i2;
        java.lang.Object $r20;
        ORG.as220.tinySQL.tinySQLException $r22, $r24;
        java.lang.Exception $r23;

        r0 := @this: ORG.as220.tinySQL.dbfFile;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement;

        $z0 = r0.<ORG.as220.tinySQL.dbfFile: boolean readOnly>;

        if $z0 == 0 goto label1;

        $r22 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r22.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("dbfFile is in readonly mode");

        throw $r22;

     label1:
        $r9 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement: ORG.as220.tinySQL.tinySQLTableView getTable()>();

        r2 = virtualinvoke $r9.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String getName()>();

        $r10 = new java.lang.StringBuilder;

        $r11 = r0.<ORG.as220.tinySQL.dbfFile: java.lang.String dataDir>;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11);

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $r13 = <java.io.File: java.lang.String separator>;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".DBF");

        r3 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<ORG.as220.tinySQL.dbfFile: void closeTable(java.lang.String)>(r2);

     label2:
        $r17 = new java.io.RandomAccessFile;

        specialinvoke $r17.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r3, "rw");

        $r18 = new ORG.as220.tinySQL.DBFHeader;

        $r19 = r0.<ORG.as220.tinySQL.dbfFile: java.lang.String encoding>;

        specialinvoke $r18.<ORG.as220.tinySQL.DBFHeader: void <init>(java.lang.String,boolean)>($r19, 1);

        virtualinvoke $r18.<ORG.as220.tinySQL.DBFHeader: void initializeHeader(java.io.RandomAccessFile)>($r17);

        virtualinvoke $r18.<ORG.as220.tinySQL.DBFHeader: void readColHeader(java.io.RandomAccessFile)>($r17);

        r5 = virtualinvoke $r18.<ORG.as220.tinySQL.DBFHeader: java.util.Vector getFields()>();

        r6 = virtualinvoke r1.<ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement: java.util.Vector getColumns()>();

        i2 = 0;

        goto label4;

     label3:
        $r20 = virtualinvoke r6.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r7 = (ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement$RenameColumnTuple) $r20;

        r8 = r7.<ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement$RenameColumnTuple: ORG.as220.tinySQL.tsColumn oldcol>;

        $r21 = r7.<ORG.as220.tinySQL.sqlparser.AlterTableRenameColumnStatement$RenameColumnTuple: java.lang.String newname>;

        virtualinvoke r8.<ORG.as220.tinySQL.tsColumn: void setPhysicalName(java.lang.String)>($r21);

        $i1 = virtualinvoke r8.<ORG.as220.tinySQL.tsColumn: int getTablePosition()>();

        virtualinvoke r5.<java.util.Vector: void setElementAt(java.lang.Object,int)>(r8, $i1);

        i2 = i2 + 1;

     label4:
        $i0 = virtualinvoke r6.<java.util.Vector: int size()>();

        if i2 < $i0 goto label3;

        virtualinvoke $r18.<ORG.as220.tinySQL.DBFHeader: void setColDefinitions(java.util.Vector)>(r5);

        virtualinvoke $r18.<ORG.as220.tinySQL.DBFHeader: void writeFileHeader(java.io.RandomAccessFile)>($r17);

        virtualinvoke $r18.<ORG.as220.tinySQL.DBFHeader: void writeColHeader(java.io.RandomAccessFile)>($r17);

        virtualinvoke $r17.<java.io.RandomAccessFile: void close()>();

     label5:
        goto label7;

     label6:
        $r23 := @caughtexception;

        $r24 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r24.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.Exception)>($r23);

        throw $r24;

     label7:
        return 0;

        catch java.lang.Exception from label2 to label5 with label6;
    }

    public ORG.as220.tinySQL.tinySQLTable openTable(java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.dbfFile r0;
        java.lang.String r1, $r3, $r4;
        ORG.as220.tinySQL.dbfFileTable $r2;
        boolean $z0, $z1;

        r0 := @this: ORG.as220.tinySQL.dbfFile;

        r1 := @parameter0: java.lang.String;

        $r2 = new ORG.as220.tinySQL.dbfFileTable;

        $r4 = r0.<ORG.as220.tinySQL.dbfFile: java.lang.String dataDir>;

        $r3 = r0.<ORG.as220.tinySQL.dbfFile: java.lang.String encoding>;

        $z1 = r0.<ORG.as220.tinySQL.dbfFile: boolean readOnly>;

        $z0 = r0.<ORG.as220.tinySQL.dbfFile: boolean autoEnc>;

        specialinvoke $r2.<ORG.as220.tinySQL.dbfFileTable: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>($r4, r1, $r3, $z1, $z0);

        return $r2;
    }

    protected void db_removeTable(java.lang.String) throws ORG.as220.tinySQL.tinySQLException, java.io.IOException
    {
        ORG.as220.tinySQL.dbfFile r0;
        java.lang.String r1, $r3, $r4, $r5, $r9;
        boolean $z0;
        java.lang.StringBuilder $r2, $r6, $r7, $r8;
        ORG.as220.tinySQL.tinySQLException $r10;

        r0 := @this: ORG.as220.tinySQL.dbfFile;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<ORG.as220.tinySQL.dbfFile: boolean readOnly>;

        if $z0 == 0 goto label1;

        $r10 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r10.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("dbfFile is in readonly mode");

        throw $r10;

     label1:
        $r2 = new java.lang.StringBuilder;

        $r3 = r0.<ORG.as220.tinySQL.dbfFile: java.lang.String dataDir>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = <java.io.File: java.lang.String separator>;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".DBF");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.Utils: void delFile(java.lang.String)>($r9);

        return;
    }

    protected void db_renameTable(java.lang.String, java.lang.String) throws ORG.as220.tinySQL.tinySQLException, java.io.IOException
    {
        ORG.as220.tinySQL.dbfFile r0;
        java.lang.String r1, r2, r3, r4, $r6, $r7, $r8, $r13, $r14, $r15, $r25;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r9, $r10, $r11, $r12, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r24;
        java.io.IOException $r19;
        ORG.as220.tinySQL.tinySQLException $r26;

        r0 := @this: ORG.as220.tinySQL.dbfFile;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<ORG.as220.tinySQL.dbfFile: boolean readOnly>;

        if $z0 == 0 goto label1;

        $r26 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r26.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("dbfFile is in readonly mode");

        throw $r26;

     label1:
        $r5 = new java.lang.StringBuilder;

        $r6 = r0.<ORG.as220.tinySQL.dbfFile: java.lang.String dataDir>;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);

        $r8 = <java.io.File: java.lang.String separator>;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".DBF");

        r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.StringBuilder;

        $r13 = r0.<ORG.as220.tinySQL.dbfFile: java.lang.String dataDir>;

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r13);

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>($r14);

        $r15 = <java.io.File: java.lang.String separator>;

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".DBF");

        r4 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = staticinvoke <ORG.as220.tinySQL.Utils: boolean renameFile(java.lang.String,java.lang.String)>(r3, r4);

        if $z1 != 0 goto label2;

        $r19 = new java.io.IOException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Renaming of ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r25);

        throw $r19;

     label2:
        return;
    }

    protected void db_createTable(java.lang.String, java.util.Vector) throws java.io.IOException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.dbfFile r0;
        java.lang.String r1, $r5, $r6;
        java.util.Vector r2;
        int i0;
        boolean $z0;
        ORG.as220.tinySQL.DBFHeader $r4;
        short $s1;
        ORG.as220.tinySQL.tinySQLException $r7;

        r0 := @this: ORG.as220.tinySQL.dbfFile;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Vector;

        $z0 = r0.<ORG.as220.tinySQL.dbfFile: boolean readOnly>;

        if $z0 == 0 goto label1;

        $r7 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r7.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("dbfFile is in readonly mode");

        throw $r7;

     label1:
        i0 = virtualinvoke r2.<java.util.Vector: int size()>();

        $r4 = new ORG.as220.tinySQL.DBFHeader;

        $s1 = r0.<ORG.as220.tinySQL.dbfFile: short tabletype>;

        $r5 = r0.<ORG.as220.tinySQL.dbfFile: java.lang.String encoding>;

        specialinvoke $r4.<ORG.as220.tinySQL.DBFHeader: void <init>(int,short,java.lang.String)>(i0, $s1, $r5);

        $r6 = r0.<ORG.as220.tinySQL.dbfFile: java.lang.String dataDir>;

        virtualinvoke $r4.<ORG.as220.tinySQL.DBFHeader: void create(java.lang.String,java.lang.String)>($r6, r1);

        virtualinvoke $r4.<ORG.as220.tinySQL.DBFHeader: void setColDefinitions(java.util.Vector)>(r2);

        virtualinvoke $r4.<ORG.as220.tinySQL.DBFHeader: void close()>();

        return;
    }

    protected void db_copyTableMeta(java.lang.String, java.lang.String, java.util.Vector) throws java.io.IOException, ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.dbfFile r0;
        java.lang.String r1, r2, $r8, $r9, $r11, $r12;
        java.util.Vector r3;
        ORG.as220.tinySQL.DBFHeader r5, $r10;
        int i0;
        ORG.as220.tinySQL.dbfFileTable $r7;
        boolean $z0, $z2;
        ORG.as220.tinySQL.tinySQLException $r13;

        r0 := @this: ORG.as220.tinySQL.dbfFile;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Vector;

        $r7 = new ORG.as220.tinySQL.dbfFileTable;

        $r9 = r0.<ORG.as220.tinySQL.dbfFile: java.lang.String dataDir>;

        $r8 = r0.<ORG.as220.tinySQL.dbfFile: java.lang.String encoding>;

        $z0 = r0.<ORG.as220.tinySQL.dbfFile: boolean autoEnc>;

        specialinvoke $r7.<ORG.as220.tinySQL.dbfFileTable: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>($r9, r1, $r8, 1, $z0);

        r5 = virtualinvoke $r7.<ORG.as220.tinySQL.dbfFileTable: ORG.as220.tinySQL.DBFHeader getHeader()>();

        virtualinvoke $r7.<ORG.as220.tinySQL.dbfFileTable: boolean close()>();

        $z2 = r0.<ORG.as220.tinySQL.dbfFile: boolean readOnly>;

        if $z2 == 0 goto label1;

        $r13 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r13.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("dbfFile is in readonly mode");

        throw $r13;

     label1:
        i0 = virtualinvoke r3.<java.util.Vector: int size()>();

        $r10 = new ORG.as220.tinySQL.DBFHeader;

        $r11 = r0.<ORG.as220.tinySQL.dbfFile: java.lang.String encoding>;

        specialinvoke $r10.<ORG.as220.tinySQL.DBFHeader: void <init>(ORG.as220.tinySQL.DBFHeader,int,java.lang.String)>(r5, i0, $r11);

        $r12 = r0.<ORG.as220.tinySQL.dbfFile: java.lang.String dataDir>;

        virtualinvoke $r10.<ORG.as220.tinySQL.DBFHeader: void create(java.lang.String,java.lang.String)>($r12, r2);

        virtualinvoke $r10.<ORG.as220.tinySQL.DBFHeader: void setColDefinitions(java.util.Vector)>(r3);

        virtualinvoke $r10.<ORG.as220.tinySQL.DBFHeader: void close()>();

        return;
    }

    public void DropTable(ORG.as220.tinySQL.sqlparser.DropTableStatement) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.dbfFile r0;
        ORG.as220.tinySQL.sqlparser.DropTableStatement r1;
        boolean $z0;
        ORG.as220.tinySQL.tinySQLException $r2;

        r0 := @this: ORG.as220.tinySQL.dbfFile;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.DropTableStatement;

        $z0 = r0.<ORG.as220.tinySQL.dbfFile: boolean readOnly>;

        if $z0 == 0 goto label1;

        $r2 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r2.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("dbfFile is in readonly mode");

        throw $r2;

     label1:
        specialinvoke r0.<ORG.as220.tinySQL.tinySQL: void DropTable(ORG.as220.tinySQL.sqlparser.DropTableStatement)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <ORG.as220.tinySQL.dbfFile: int INSERT_SPEED> = 2;

        <ORG.as220.tinySQL.dbfFile: int INSERT_SIZE> = 1;

        <ORG.as220.tinySQL.dbfFile: int INSERT_DEFAULT> = 0;

        return;
    }
}
