public class ORG.as220.tinySQL.sqlparser.SQLStatementBatch extends java.lang.Object
{
    private java.util.Vector statements;
    private ORG.as220.tinySQL.tinySQLStatement parent;

    public void <init>(ORG.as220.tinySQL.tinySQLStatement)
    {
        ORG.as220.tinySQL.sqlparser.SQLStatementBatch r0;
        ORG.as220.tinySQL.tinySQLStatement r1;
        java.util.Vector $r2;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SQLStatementBatch;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLStatement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<ORG.as220.tinySQL.sqlparser.SQLStatementBatch: java.util.Vector statements> = $r2;

        r0.<ORG.as220.tinySQL.sqlparser.SQLStatementBatch: ORG.as220.tinySQL.tinySQLStatement parent> = r1;

        return;
    }

    public ORG.as220.tinySQL.tinySQLStatement getParent()
    {
        ORG.as220.tinySQL.sqlparser.SQLStatementBatch r0;
        ORG.as220.tinySQL.tinySQLStatement $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SQLStatementBatch;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.SQLStatementBatch: ORG.as220.tinySQL.tinySQLStatement parent>;

        return $r1;
    }

    public void add(ORG.as220.tinySQL.sqlparser.SQLStatement)
    {
        ORG.as220.tinySQL.sqlparser.SQLStatementBatch r0;
        ORG.as220.tinySQL.sqlparser.SQLStatement r1;
        java.util.Vector $r2;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SQLStatementBatch;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.SQLStatement;

        $r2 = r0.<ORG.as220.tinySQL.sqlparser.SQLStatementBatch: java.util.Vector statements>;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        return;
    }

    public void clear()
    {
        ORG.as220.tinySQL.sqlparser.SQLStatementBatch r0;
        java.util.Vector $r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SQLStatementBatch;

        $r1 = r0.<ORG.as220.tinySQL.sqlparser.SQLStatementBatch: java.util.Vector statements>;

        virtualinvoke $r1.<java.util.Vector: void clear()>();

        return;
    }

    public int[] executeAll() throws ORG.as220.tinySQL.tinySQLException, java.sql.BatchUpdateException
    {
        ORG.as220.tinySQL.sqlparser.SQLStatementBatch r0;
        int i0, $i1, i2;
        int[] r1;
        ORG.as220.tinySQL.sqlparser.SQLStatement r2;
        java.util.Vector $r3, $r4;
        java.lang.Object $r5;
        boolean $z0;
        java.sql.BatchUpdateException $r6;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SQLStatementBatch;

        $r3 = r0.<ORG.as220.tinySQL.sqlparser.SQLStatementBatch: java.util.Vector statements>;

        i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

        r1 = newarray (int)[i0];

        i2 = 0;

        goto label3;

     label1:
        $r4 = r0.<ORG.as220.tinySQL.sqlparser.SQLStatementBatch: java.util.Vector statements>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r2 = (ORG.as220.tinySQL.sqlparser.SQLStatement) $r5;

        $z0 = interfaceinvoke r2.<ORG.as220.tinySQL.sqlparser.SQLStatement: boolean execute()>();

        if $z0 == 0 goto label2;

        $r6 = new java.sql.BatchUpdateException;

        specialinvoke $r6.<java.sql.BatchUpdateException: void <init>(java.lang.String,int[])>("Statement tries to return ResultSet", r1);

        throw $r6;

     label2:
        $i1 = interfaceinvoke r2.<ORG.as220.tinySQL.sqlparser.SQLStatement: int getUpdateCount()>();

        r1[i2] = $i1;

        i2 = i2 + 1;

     label3:
        if i2 < i0 goto label1;

        return r1;
    }

    public java.lang.String toString()
    {
        ORG.as220.tinySQL.sqlparser.SQLStatementBatch r0;
        int i0, i1;
        ORG.as220.tinySQL.sqlparser.SQLStatement r2;
        java.lang.StringBuffer $r3;
        java.util.Vector $r4, $r5;
        java.lang.Object $r6;
        java.lang.String $r8, $r11;

        r0 := @this: ORG.as220.tinySQL.sqlparser.SQLStatementBatch;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = r0.<ORG.as220.tinySQL.sqlparser.SQLStatementBatch: java.util.Vector statements>;

        i0 = virtualinvoke $r4.<java.util.Vector: int size()>();

        i1 = 0;

        goto label2;

     label1:
        $r5 = r0.<ORG.as220.tinySQL.sqlparser.SQLStatementBatch: java.util.Vector statements>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r2 = (ORG.as220.tinySQL.sqlparser.SQLStatement) $r6;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Statement: ");

        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        $r11 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }
}
