class ORG.as220.tinySQL.sqlparser.Operator$EqualOperator extends ORG.as220.tinySQL.sqlparser.Operator
{

    private void <init>()
    {
        ORG.as220.tinySQL.sqlparser.Operator$EqualOperator r0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Operator$EqualOperator;

        specialinvoke r0.<ORG.as220.tinySQL.sqlparser.Operator: void <init>(ORG.as220.tinySQL.sqlparser.Operator)>(null);

        return;
    }

    public java.lang.Object evaluate(java.lang.Object, java.lang.Object)
    {
        ORG.as220.tinySQL.sqlparser.Operator$EqualOperator r0;
        java.lang.Object r1, r2;
        java.lang.Boolean $r3;
        int $i0;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Operator$EqualOperator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.Boolean;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.sqlparser.Operator$EqualOperator: int compareTo(java.lang.Object,java.lang.Object)>(r1, r2);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        specialinvoke $r3.<java.lang.Boolean: void <init>(boolean)>($z0);

        return $r3;
    }

    public java.lang.String toString()
    {
        ORG.as220.tinySQL.sqlparser.Operator$EqualOperator r0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Operator$EqualOperator;

        return " == ";
    }

    public int getLevel()
    {
        ORG.as220.tinySQL.sqlparser.Operator$EqualOperator r0;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Operator$EqualOperator;

        return 1;
    }

    void <init>(ORG.as220.tinySQL.sqlparser.Operator$EqualOperator)
    {
        ORG.as220.tinySQL.sqlparser.Operator$EqualOperator r0, r1;

        r0 := @this: ORG.as220.tinySQL.sqlparser.Operator$EqualOperator;

        r1 := @parameter0: ORG.as220.tinySQL.sqlparser.Operator$EqualOperator;

        specialinvoke r0.<ORG.as220.tinySQL.sqlparser.Operator$EqualOperator: void <init>()>();

        return;
    }
}
