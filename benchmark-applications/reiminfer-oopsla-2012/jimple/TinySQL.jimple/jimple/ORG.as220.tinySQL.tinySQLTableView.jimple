public class ORG.as220.tinySQL.tinySQLTableView extends java.lang.Object
{
    private java.util.Hashtable colcache;
    private ORG.as220.tinySQL.tinySQLTable table;
    private int _currentRowNumber;
    private ORG.as220.tinySQL.tsRawRow _currentRow;
    private java.lang.String alias;
    private ORG.as220.tinySQL.tsColumn[] tsColumnCache;
    private boolean isClosed;
    private ORG.as220.tinySQL.tinySQLIndex index;

    public void <init>(ORG.as220.tinySQL.tinySQLTable) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        ORG.as220.tinySQL.tinySQLTable r1;
        java.lang.String $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLTable;

        $r2 = virtualinvoke r1.<ORG.as220.tinySQL.tinySQLTable: java.lang.String getName()>();

        specialinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: void <init>(ORG.as220.tinySQL.tinySQLTable,java.lang.String)>(r1, $r2);

        return;
    }

    public void <init>(ORG.as220.tinySQL.tinySQLTable, java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        ORG.as220.tinySQL.tinySQLTable r1;
        java.lang.String r2;
        ORG.as220.tinySQL.tinySQLDefaultIndex $r3;
        java.util.Hashtable $r4;
        ORG.as220.tinySQL.tinySQLException $r5;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLTable;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r5 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r5.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("No table?");

        throw $r5;

     label1:
        $r3 = new ORG.as220.tinySQL.tinySQLDefaultIndex;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLDefaultIndex: void <init>()>();

        r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLIndex index> = $r3;

        r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table> = r1;

        virtualinvoke r1.<ORG.as220.tinySQL.tinySQLTable: void createdView(ORG.as220.tinySQL.tinySQLTableView)>(r0);

        r0.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String alias> = r2;

        $r4 = new java.util.Hashtable;

        specialinvoke $r4.<java.util.Hashtable: void <init>()>();

        r0.<ORG.as220.tinySQL.tinySQLTableView: java.util.Hashtable colcache> = $r4;

        r0.<ORG.as220.tinySQL.tinySQLTableView: int _currentRowNumber> = -1;

        return;
    }

    public void close() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        boolean $z0;
        ORG.as220.tinySQL.tinySQLTable $r1;
        ORG.as220.tinySQL.tinySQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $z0 = r0.<ORG.as220.tinySQL.tinySQLTableView: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r2 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r2.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("table is closed");

        throw $r2;

     label1:
        $r1 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        virtualinvoke $r1.<ORG.as220.tinySQL.tinySQLTable: void removedView(ORG.as220.tinySQL.tinySQLTableView)>(r0);

        r0.<ORG.as220.tinySQL.tinySQLTableView: boolean isClosed> = 1;

        return;
    }

    public java.lang.String getColumnName(int)
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        int i0;
        ORG.as220.tinySQL.tsColumn r1;
        java.lang.String $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i0);

        $r2 = virtualinvoke r1.<ORG.as220.tinySQL.tsColumn: java.lang.String getPhysicalName()>();

        return $r2;
    }

    public int findColumn(java.lang.String)
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        java.lang.String r1, $r12;
        java.lang.Integer r2, $r6;
        int i0, $i1, i2;
        ORG.as220.tinySQL.tsColumn r3;
        java.util.Hashtable $r4, $r7;
        java.lang.Object $r5;
        boolean $z0;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<ORG.as220.tinySQL.tinySQLTableView: java.util.Hashtable colcache>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Integer) $r5;

        if r2 == null goto label1;

        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        return $i1;

     label1:
        i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: int getColumnCount()>();

        i2 = 0;

        goto label4;

     label2:
        r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i2);

        $z0 = virtualinvoke r3.<ORG.as220.tinySQL.tsColumn: boolean isValidName(java.lang.String)>(r1);

        if $z0 == 0 goto label3;

        $r7 = r0.<ORG.as220.tinySQL.tinySQLTableView: java.util.Hashtable colcache>;

        $r6 = new java.lang.Integer;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(i2);

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

        return i2;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < i0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Column : ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found in this table");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <ORG.as220.tinySQL.util.Log: void error(java.lang.String)>($r12);

        return -1;
    }

    public boolean isDeleted() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        boolean $z0, $z1;
        int $i0;
        ORG.as220.tinySQL.tinySQLTable $r1;
        ORG.as220.tinySQL.tinySQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $z0 = r0.<ORG.as220.tinySQL.tinySQLTableView: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r2 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r2.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("table is closed");

        throw $r2;

     label1:
        $r1 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $i0 = r0.<ORG.as220.tinySQL.tinySQLTableView: int _currentRowNumber>;

        $z1 = virtualinvoke $r1.<ORG.as220.tinySQL.tinySQLTable: boolean isDeleted(int)>($i0);

        return $z1;
    }

    public void updateRow(ORG.as220.tinySQL.tsRow) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        ORG.as220.tinySQL.tsRow r1;
        int i0, $i1, $i2;
        boolean $z0;
        ORG.as220.tinySQL.tinySQLIndex $r2;
        ORG.as220.tinySQL.tsRawRow $r3, $r5;
        ORG.as220.tinySQL.tinySQLTable $r4;
        ORG.as220.tinySQL.tinySQLException $r6;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        r1 := @parameter0: ORG.as220.tinySQL.tsRow;

        $z0 = r0.<ORG.as220.tinySQL.tinySQLTableView: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r6 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r6.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("table is closed");

        throw $r6;

     label1:
        $r2 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLIndex index>;

        $i1 = r0.<ORG.as220.tinySQL.tinySQLTableView: int _currentRowNumber>;

        i0 = interfaceinvoke $r2.<ORG.as220.tinySQL.tinySQLIndex: int reverseTranslation(int)>($i1);

        $r4 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $r3 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsRawRow _currentRow>;

        $r5 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsRawRow convertRowToNative(ORG.as220.tinySQL.tsRow,ORG.as220.tinySQL.tsRawRow)>(r1, $r3);

        virtualinvoke $r4.<ORG.as220.tinySQL.tinySQLTable: void updateRow(int,ORG.as220.tinySQL.tsRawRow)>(i0, $r5);

        $i2 = r0.<ORG.as220.tinySQL.tinySQLTableView: int _currentRowNumber>;

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: boolean loadRow(int)>($i2);

        return;
    }

    public void insertRow(ORG.as220.tinySQL.tsRow) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        ORG.as220.tinySQL.tsRow r1;
        int i0;
        boolean $z0;
        ORG.as220.tinySQL.tinySQLTable $r2, $r3;
        ORG.as220.tinySQL.tsRawRow $r4, $r5;
        ORG.as220.tinySQL.tinySQLException $r6;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        r1 := @parameter0: ORG.as220.tinySQL.tsRow;

        $z0 = r0.<ORG.as220.tinySQL.tinySQLTableView: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r6 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r6.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("table is closed");

        throw $r6;

     label1:
        $r3 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $r2 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $r4 = virtualinvoke $r2.<ORG.as220.tinySQL.tinySQLTable: ORG.as220.tinySQL.tsRawRow getInsertRow()>();

        $r5 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsRawRow convertRowToNative(ORG.as220.tinySQL.tsRow,ORG.as220.tinySQL.tsRawRow)>(r1, $r4);

        i0 = virtualinvoke $r3.<ORG.as220.tinySQL.tinySQLTable: int insertRow(ORG.as220.tinySQL.tsRawRow)>($r5);

        virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: boolean loadRow(int)>(i0);

        return;
    }

    public ORG.as220.tinySQL.tsRawRow convertRowToNative(ORG.as220.tinySQL.tsRow, ORG.as220.tinySQL.tsRawRow) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        ORG.as220.tinySQL.tsRow r1;
        ORG.as220.tinySQL.tsRawRow r2;
        int i0, i1, i2, i3;
        ORG.as220.tinySQL.tsColumn r3;
        java.lang.String $r4, $r5, $r10;
        java.lang.Object $r6, $r11;
        ORG.as220.tinySQL.tinySQLException $r7;
        java.lang.StringBuilder $r8, $r9;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        r1 := @parameter0: ORG.as220.tinySQL.tsRow;

        r2 := @parameter1: ORG.as220.tinySQL.tsRawRow;

        i0 = virtualinvoke r1.<ORG.as220.tinySQL.tsRow: int size()>();

        i1 = 0;

        goto label5;

     label1:
        r3 = virtualinvoke r1.<ORG.as220.tinySQL.tsRow: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i1);

        $r4 = virtualinvoke r3.<ORG.as220.tinySQL.tsColumn: java.lang.String getPhysicalName()>();

        i2 = virtualinvoke r2.<ORG.as220.tinySQL.tsRawRow: int findColumn(java.lang.String)>($r4);

        if i2 == -1 goto label2;

        $r11 = virtualinvoke r1.<ORG.as220.tinySQL.tsRow: java.lang.Object get(int)>(i1);

        virtualinvoke r2.<ORG.as220.tinySQL.tsRawRow: void put(int,java.lang.Object)>(i2, $r11);

        goto label4;

     label2:
        $r5 = virtualinvoke r3.<ORG.as220.tinySQL.tsColumn: java.lang.String getDisplayName()>();

        i3 = virtualinvoke r2.<ORG.as220.tinySQL.tsRawRow: int findColumn(java.lang.String)>($r5);

        if i3 != -1 goto label3;

        $r7 = new ORG.as220.tinySQL.tinySQLException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Column : ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label3:
        $r6 = virtualinvoke r1.<ORG.as220.tinySQL.tsRow: java.lang.Object get(int)>(i1);

        virtualinvoke r2.<ORG.as220.tinySQL.tsRawRow: void put(int,java.lang.Object)>(i3, $r6);

     label4:
        i1 = i1 + 1;

     label5:
        if i1 < i0 goto label1;

        return r2;
    }

    public ORG.as220.tinySQL.tsColumn getColumnDefinition(int)
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        int i0, $i1;
        ORG.as220.tinySQL.tsColumn[] $r2, $r3, $r5, $r10, $r12;
        ORG.as220.tinySQL.tsColumn $r4, $r6, $r7, $r9;
        ORG.as220.tinySQL.tinySQLTable $r8, $r11;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        i0 := @parameter0: int;

        $r2 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsColumn[] tsColumnCache>;

        if $r2 != null goto label1;

        $r11 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $i1 = virtualinvoke $r11.<ORG.as220.tinySQL.tinySQLTable: int getColumnCount()>();

        $r12 = newarray (ORG.as220.tinySQL.tsColumn)[$i1];

        r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsColumn[] tsColumnCache> = $r12;

     label1:
        $r3 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsColumn[] tsColumnCache>;

        $r4 = $r3[i0];

        if $r4 != null goto label2;

        $r7 = new ORG.as220.tinySQL.tsColumn;

        $r8 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $r9 = virtualinvoke $r8.<ORG.as220.tinySQL.tinySQLTable: ORG.as220.tinySQL.tsColumn getColumnDefinition(int)>(i0);

        specialinvoke $r7.<ORG.as220.tinySQL.tsColumn: void <init>(ORG.as220.tinySQL.tinySQLTableView,ORG.as220.tinySQL.tsColumn)>(r0, $r9);

        $r10 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsColumn[] tsColumnCache>;

        $r10[i0] = $r7;

     label2:
        $r5 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsColumn[] tsColumnCache>;

        $r6 = $r5[i0];

        return $r6;
    }

    public java.lang.String getName()
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        ORG.as220.tinySQL.tinySQLTable $r1;
        java.lang.String $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $r2 = virtualinvoke $r1.<ORG.as220.tinySQL.tinySQLTable: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.String getAlias()
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        java.lang.String $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String alias>;

        return $r1;
    }

    public void setAlias(java.lang.String)
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        java.lang.String r1;
        java.lang.NullPointerException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Alias may not be null");

        throw $r2;

     label1:
        r0.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String alias> = r1;

        return;
    }

    private void setCurrentRow(int, ORG.as220.tinySQL.tsRawRow)
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        int i0;
        ORG.as220.tinySQL.tsRawRow r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        i0 := @parameter0: int;

        r1 := @parameter1: ORG.as220.tinySQL.tsRawRow;

        r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsRawRow _currentRow> = r1;

        r0.<ORG.as220.tinySQL.tinySQLTableView: int _currentRowNumber> = i0;

        return;
    }

    public boolean next() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $i0 = r0.<ORG.as220.tinySQL.tinySQLTableView: int _currentRowNumber>;

        $i1 = $i0 + 1;

        $z0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: boolean loadRow(int)>($i1);

        return $z0;
    }

    public boolean nextNonDeleted() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        int $i0, i1;
        ORG.as220.tinySQL.tinySQLTable $r1;
        boolean $z0, $z1, z2, $z3;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        i1 = r0.<ORG.as220.tinySQL.tinySQLTableView: int _currentRowNumber>;

        z2 = 0;

        goto label5;

     label1:
        i1 = i1 + 1;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: int getRowCount()>();

        if i1 >= $i0 goto label4;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $z0 = virtualinvoke $r1.<ORG.as220.tinySQL.tinySQLTable: boolean isDeleted(int)>(i1);

        if $z0 == 0 goto label2;

        $z3 = 0;

        goto label3;

     label2:
        $z3 = 1;

     label3:
        z2 = $z3;

        goto label5;

     label4:
        return 0;

     label5:
        if z2 == 0 goto label1;

        $z1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: boolean loadRow(int)>(i1);

        return $z1;
    }

    public boolean refresh() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        int $i0;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $i0 = r0.<ORG.as220.tinySQL.tinySQLTableView: int _currentRowNumber>;

        $z0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: boolean loadRow(int)>($i0);

        return $z0;
    }

    protected boolean loadRow(int) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        int i0, $i1;
        ORG.as220.tinySQL.tsRawRow r1;
        boolean $z0;
        ORG.as220.tinySQL.tinySQLIndex $r2;
        ORG.as220.tinySQL.tinySQLTable $r3;
        ORG.as220.tinySQL.tinySQLException $r4;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        i0 := @parameter0: int;

        $z0 = r0.<ORG.as220.tinySQL.tinySQLTableView: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r4 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r4.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("table is closed");

        throw $r4;

     label1:
        $r3 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $r2 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLIndex index>;

        $i1 = interfaceinvoke $r2.<ORG.as220.tinySQL.tinySQLIndex: int translateRow(int)>(i0);

        r1 = virtualinvoke $r3.<ORG.as220.tinySQL.tinySQLTable: ORG.as220.tinySQL.tsRawRow getRow(int)>($i1);

        specialinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: void setCurrentRow(int,ORG.as220.tinySQL.tsRawRow)>(i0, r1);

        if r1 == null goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean beforeFirst() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        boolean $z0;
        ORG.as220.tinySQL.tinySQLTable $r1;
        int $i0;
        ORG.as220.tinySQL.tinySQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $z0 = r0.<ORG.as220.tinySQL.tinySQLTableView: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r2 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r2.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("table is closed");

        throw $r2;

     label1:
        specialinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: void setCurrentRow(int,ORG.as220.tinySQL.tsRawRow)>(-1, null);

        $r1 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $i0 = virtualinvoke $r1.<ORG.as220.tinySQL.tinySQLTable: int getRowCount()>();

        if $i0 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean isBeforeFirst() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        boolean $z0;
        int $i0;
        ORG.as220.tinySQL.tinySQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $z0 = r0.<ORG.as220.tinySQL.tinySQLTableView: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r1 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r1.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("table is closed");

        throw $r1;

     label1:
        $i0 = r0.<ORG.as220.tinySQL.tinySQLTableView: int _currentRowNumber>;

        if $i0 != -1 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean absolute(int) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        boolean $z0, $z1, $z2, $z3;
        ORG.as220.tinySQL.tinySQLTable $r1, $r2;
        int $i0, $i1, i2;
        ORG.as220.tinySQL.tinySQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        i2 := @parameter0: int;

        $z0 = r0.<ORG.as220.tinySQL.tinySQLTableView: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r3 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("table is closed");

        throw $r3;

     label1:
        if i2 >= 0 goto label2;

        $r2 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $i1 = virtualinvoke $r2.<ORG.as220.tinySQL.tinySQLTable: int getRowCount()>();

        i2 = $i1 - i2;

        if i2 >= 0 goto label3;

        $z3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: boolean beforeFirst()>();

        return $z3;

     label2:
        $r1 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $i0 = virtualinvoke $r1.<ORG.as220.tinySQL.tinySQLTable: int getRowCount()>();

        if i2 <= $i0 goto label3;

        $z2 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: boolean afterLast()>();

        return $z2;

     label3:
        $z1 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: boolean loadRow(int)>(i2);

        return $z1;
    }

    public boolean relative(int) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        i0 := @parameter0: int;

        $i1 = r0.<ORG.as220.tinySQL.tinySQLTableView: int _currentRowNumber>;

        $i2 = $i1 + i0;

        $z0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: boolean absolute(int)>($i2);

        return $z0;
    }

    public boolean last() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: int getRowCount()>();

        $i1 = $i0 - 1;

        $z0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: boolean loadRow(int)>($i1);

        return $z0;
    }

    public boolean afterLast() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        ORG.as220.tinySQL.tinySQLTable $r1;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $i0 = virtualinvoke $r1.<ORG.as220.tinySQL.tinySQLTable: int getRowCount()>();

        specialinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: void setCurrentRow(int,ORG.as220.tinySQL.tsRawRow)>($i0, null);

        return 0;
    }

    public int getColumnCount()
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        ORG.as220.tinySQL.tinySQLTable $r1;
        int $i0;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $i0 = virtualinvoke $r1.<ORG.as220.tinySQL.tinySQLTable: int getColumnCount()>();

        return $i0;
    }

    public int getRowCount() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        boolean $z0;
        ORG.as220.tinySQL.tinySQLTable $r1;
        int $i0;
        ORG.as220.tinySQL.tinySQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $z0 = r0.<ORG.as220.tinySQL.tinySQLTableView: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r2 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r2.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("table is closed");

        throw $r2;

     label1:
        $r1 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $i0 = virtualinvoke $r1.<ORG.as220.tinySQL.tinySQLTable: int getRowCount()>();

        return $i0;
    }

    public java.lang.Object getColumn(int) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        int i0;
        boolean $z0;
        ORG.as220.tinySQL.tsRawRow $r1;
        java.lang.Object $r2;
        ORG.as220.tinySQL.tinySQLException $r3;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        i0 := @parameter0: int;

        $z0 = r0.<ORG.as220.tinySQL.tinySQLTableView: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r3 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r3.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("table is closed");

        throw $r3;

     label1:
        $r1 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsRawRow _currentRow>;

        $r2 = virtualinvoke $r1.<ORG.as220.tinySQL.tsRawRow: java.lang.Object get(int)>(i0);

        return $r2;
    }

    public final java.lang.Object getColumn(java.lang.String) throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        java.lang.String r1, $r7;
        boolean $z0;
        ORG.as220.tinySQL.tsRawRow $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        ORG.as220.tinySQL.tinySQLException $r4, $r8;
        java.lang.StringBuilder $r5, $r6;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<ORG.as220.tinySQL.tinySQLTableView: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r8 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r8.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("table is closed");

        throw $r8;

     label1:
        $r2 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tsRawRow _currentRow>;

        if $r2 != null goto label2;

        $r4 = new ORG.as220.tinySQL.tinySQLException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("No such row or not initialized: ");

        $i1 = r0.<ORG.as220.tinySQL.tinySQLTableView: int _currentRowNumber>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label2:
        $i0 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: int findColumn(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: java.lang.Object getColumn(int)>($i0);

        return $r3;
    }

    public int getCurrentRecordNumber() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        boolean $z0;
        int $i0;
        ORG.as220.tinySQL.tinySQLException $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $z0 = r0.<ORG.as220.tinySQL.tinySQLTableView: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r1 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r1.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("table is closed");

        throw $r1;

     label1:
        $i0 = r0.<ORG.as220.tinySQL.tinySQLTableView: int _currentRowNumber>;

        return $i0;
    }

    public boolean isReadOnly() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        boolean $z0, $z1;
        ORG.as220.tinySQL.tinySQLTable $r1;
        ORG.as220.tinySQL.tinySQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $z0 = r0.<ORG.as220.tinySQL.tinySQLTableView: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r2 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r2.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("table is closed");

        throw $r2;

     label1:
        $r1 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $z1 = virtualinvoke $r1.<ORG.as220.tinySQL.tinySQLTable: boolean isReadOnly()>();

        return $z1;
    }

    public void deleteRow() throws ORG.as220.tinySQL.tinySQLException
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        boolean $z0;
        int $i0;
        ORG.as220.tinySQL.tinySQLTable $r1;
        ORG.as220.tinySQL.tinySQLException $r2;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $z0 = r0.<ORG.as220.tinySQL.tinySQLTableView: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r2 = new ORG.as220.tinySQL.tinySQLException;

        specialinvoke $r2.<ORG.as220.tinySQL.tinySQLException: void <init>(java.lang.String)>("table is closed");

        throw $r2;

     label1:
        $r1 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLTable table>;

        $i0 = r0.<ORG.as220.tinySQL.tinySQLTableView: int _currentRowNumber>;

        virtualinvoke $r1.<ORG.as220.tinySQL.tinySQLTable: void deleteRow(int)>($i0);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        ORG.as220.tinySQL.tinySQLTableView r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String $r3, $r4, $r5, $r6, r7, r8;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof ORG.as220.tinySQL.tinySQLTableView;

        if $z0 == 0 goto label4;

        r2 = (ORG.as220.tinySQL.tinySQLTableView) r1;

        r7 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String getName()>();

        $r3 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String getName()>();

        $z1 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label1;

        $r4 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String getAlias()>();

        $z2 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label2;

     label1:
        return 1;

     label2:
        r8 = virtualinvoke r0.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String getAlias()>();

        $r5 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String getName()>();

        $z3 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z3 != 0 goto label3;

        $r6 = virtualinvoke r2.<ORG.as220.tinySQL.tinySQLTableView: java.lang.String getAlias()>();

        $z4 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z4 == 0 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    public void setIndex(ORG.as220.tinySQL.tinySQLIndex)
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        ORG.as220.tinySQL.tinySQLIndex r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        r1 := @parameter0: ORG.as220.tinySQL.tinySQLIndex;

        r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLIndex index> = r1;

        return;
    }

    public ORG.as220.tinySQL.tinySQLIndex getIndex()
    {
        ORG.as220.tinySQL.tinySQLTableView r0;
        ORG.as220.tinySQL.tinySQLIndex $r1;

        r0 := @this: ORG.as220.tinySQL.tinySQLTableView;

        $r1 = r0.<ORG.as220.tinySQL.tinySQLTableView: ORG.as220.tinySQL.tinySQLIndex index>;

        return $r1;
    }
}
